{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"writeAppTypeDeclarations\", {\n  enumerable: true,\n  get: function () {\n    return writeAppTypeDeclarations;\n  }\n});\nconst _os = /*#__PURE__*/_interop_require_default(require(\"os\"));\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nconst _fs = require(\"fs\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nasync function writeAppTypeDeclarations({\n  baseDir,\n  imageImportsEnabled,\n  hasPagesDir,\n  isAppDirEnabled\n}) {\n  // Reference `next` types\n  const appTypeDeclarations = _path.default.join(baseDir, \"next-env.d.ts\");\n  // Defaults EOL to system default\n  let eol = _os.default.EOL;\n  let currentContent;\n  try {\n    currentContent = await _fs.promises.readFile(appTypeDeclarations, \"utf8\");\n    // If file already exists then preserve its line ending\n    const lf = currentContent.indexOf(\"\\n\", /* skip first so we can lf - 1 */1);\n    if (lf !== -1) {\n      if (currentContent[lf - 1] === \"\\r\") {\n        eol = \"\\r\\n\";\n      } else {\n        eol = \"\\n\";\n      }\n    }\n  } catch {}\n  /**\n  * \"Triple-slash directives\" used to create typings files for Next.js projects\n  * using Typescript .\n  *\n  * @see https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html\n  */\n  const directives = [\n  // Include the core Next.js typings.\n  '/// <reference types=\"next\" />'];\n  if (imageImportsEnabled) {\n    directives.push('/// <reference types=\"next/image-types/global\" />');\n  }\n  if (isAppDirEnabled && hasPagesDir) {\n    directives.push('/// <reference types=\"next/navigation-types/compat/navigation\" />');\n  }\n  // Push the notice in.\n  directives.push(\"\", \"// NOTE: This file should not be edited\", \"// see https://nextjs.org/docs/basic-features/typescript for more information.\");\n  const content = directives.join(eol) + eol;\n  // Avoids an un-necessary write on read-only fs\n  if (currentContent === content) {\n    return;\n  }\n  await _fs.promises.writeFile(appTypeDeclarations, content);\n}","map":{"version":3,"names":["writeAppTypeDeclarations","baseDir","imageImportsEnabled","hasPagesDir","isAppDirEnabled","appTypeDeclarations","_path","default","join","eol","_os","EOL","currentContent","_fs","promises","readFile","lf","indexOf","directives","push","content","writeFile"],"sources":["../../../src/lib/typescript/writeAppTypeDeclarations.ts"],"sourcesContent":[null],"mappings":";;;;;+BAIsB;;;WAAAA,wBAAA;;;0DAJP;4DACE;oBACc;;;;;;AAExB,eAAeA,yBAAyB;EAC7CC,OAAO;EACPC,mBAAmB;EACnBC,WAAW;EACXC;AAAe,CAMhB;EACC;EACA,MAAMC,mBAAA,GAAsBC,KAAA,CAAAC,OAAI,CAACC,IAAI,CAACP,OAAA,EAAS;EAE/C;EACA,IAAIQ,GAAA,GAAMC,GAAA,CAAAH,OAAE,CAACI,GAAG;EAChB,IAAIC,cAAA;EAEJ,IAAI;IACFA,cAAA,GAAiB,MAAMC,GAAA,CAAAC,QAAE,CAACC,QAAQ,CAACV,mBAAA,EAAqB;IACxD;IACA,MAAMW,EAAA,GAAKJ,cAAA,CAAeK,OAAO,CAAC,MAAM,iCAAkC;IAE1E,IAAID,EAAA,KAAO,CAAC,GAAG;MACb,IAAIJ,cAAc,CAACI,EAAA,GAAK,EAAE,KAAK,MAAM;QACnCP,GAAA,GAAM;MACR,OAAO;QACLA,GAAA,GAAM;MACR;IACF;EACF,EAAE,MAAM,CAAC;EAET;;;;;;EAMA,MAAMS,UAAA,GAAuB;EAC3B;EACA,iCACD;EAED,IAAIhB,mBAAA,EAAqB;IACvBgB,UAAA,CAAWC,IAAI,CAAC;EAClB;EAEA,IAAIf,eAAA,IAAmBD,WAAA,EAAa;IAClCe,UAAA,CAAWC,IAAI,CACb;EAEJ;EAEA;EACAD,UAAA,CAAWC,IAAI,CACb,IACA,2CACA;EAGF,MAAMC,OAAA,GAAUF,UAAA,CAAWV,IAAI,CAACC,GAAA,IAAOA,GAAA;EAEvC;EACA,IAAIG,cAAA,KAAmBQ,OAAA,EAAS;IAC9B;EACF;EACA,MAAMP,GAAA,CAAAC,QAAE,CAACO,SAAS,CAAChB,mBAAA,EAAqBe,OAAA;AAC1C"},"metadata":{},"sourceType":"script","externalDependencies":[]}