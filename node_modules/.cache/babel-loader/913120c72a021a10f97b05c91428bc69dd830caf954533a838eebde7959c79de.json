{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  SerializableError: null,\n  isSerializableProps: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  SerializableError: function () {\n    return SerializableError;\n  },\n  isSerializableProps: function () {\n    return isSerializableProps;\n  }\n});\nconst _isplainobject = require(\"../shared/lib/is-plain-object\");\nconst regexpPlainIdentifier = /^[A-Za-z_$][A-Za-z0-9_$]*$/;\nclass SerializableError extends Error {\n  constructor(page, method, path, message) {\n    super(path ? `Error serializing \\`${path}\\` returned from \\`${method}\\` in \"${page}\".\\nReason: ${message}` : `Error serializing props returned from \\`${method}\\` in \"${page}\".\\nReason: ${message}`);\n  }\n}\nfunction isSerializableProps(page, method, input) {\n  if (!(0, _isplainobject.isPlainObject)(input)) {\n    throw new SerializableError(page, method, \"\", `Props must be returned as a plain object from ${method}: \\`{ props: { ... } }\\` (received: \\`${(0, _isplainobject.getObjectClassLabel)(input)}\\`).`);\n  }\n  function visit(visited, value, path) {\n    if (visited.has(value)) {\n      throw new SerializableError(page, method, path, `Circular references cannot be expressed in JSON (references: \\`${visited.get(value) || \"(self)\"}\\`).`);\n    }\n    visited.set(value, path);\n  }\n  function isSerializable(refs, value, path) {\n    const type = typeof value;\n    if (\n    // `null` can be serialized, but not `undefined`.\n    value === null ||\n    // n.b. `bigint`, `function`, `symbol`, and `undefined` cannot be\n    // serialized.\n    //\n    // `object` is special-cased below, as it may represent `null`, an Array,\n    // a plain object, a class, et al.\n    type === \"boolean\" || type === \"number\" || type === \"string\") {\n      return true;\n    }\n    if (type === \"undefined\") {\n      throw new SerializableError(page, method, path, \"`undefined` cannot be serialized as JSON. Please use `null` or omit this value.\");\n    }\n    if ((0, _isplainobject.isPlainObject)(value)) {\n      visit(refs, value, path);\n      if (Object.entries(value).every(([key, nestedValue]) => {\n        const nextPath = regexpPlainIdentifier.test(key) ? `${path}.${key}` : `${path}[${JSON.stringify(key)}]`;\n        const newRefs = new Map(refs);\n        return isSerializable(newRefs, key, nextPath) && isSerializable(newRefs, nestedValue, nextPath);\n      })) {\n        return true;\n      }\n      throw new SerializableError(page, method, path, `invariant: Unknown error encountered in Object.`);\n    }\n    if (Array.isArray(value)) {\n      visit(refs, value, path);\n      if (value.every((nestedValue, index) => {\n        const newRefs = new Map(refs);\n        return isSerializable(newRefs, nestedValue, `${path}[${index}]`);\n      })) {\n        return true;\n      }\n      throw new SerializableError(page, method, path, `invariant: Unknown error encountered in Array.`);\n    }\n    // None of these can be expressed as JSON:\n    // const type: \"bigint\" | \"symbol\" | \"object\" | \"function\"\n    throw new SerializableError(page, method, path, \"`\" + type + \"`\" + (type === \"object\" ? ` (\"${Object.prototype.toString.call(value)}\")` : \"\") + \" cannot be serialized as JSON. Please only return JSON serializable data types.\");\n  }\n  return isSerializable(new Map(), input, \"\");\n}","map":{"version":3,"names":["SerializableError","isSerializableProps","regexpPlainIdentifier","Error","constructor","page","method","path","message","input","_isplainobject","isPlainObject","getObjectClassLabel","visit","visited","value","has","get","set","isSerializable","refs","type","Object","entries","every","key","nestedValue","nextPath","test","JSON","stringify","newRefs","Map","Array","isArray","index","prototype","toString","call"],"sources":["../../src/lib/is-serializable-props.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;EAOaA,iBAAiB,WAAAA,CAAA;WAAjBA,iBAAA;;EAUGC,mBAAmB,WAAAA,CAAA;WAAnBA,mBAAA;;;+BAdT;AAEP,MAAMC,qBAAA,GAAwB;AAEvB,MAAMF,iBAAA,SAA0BG,KAAA;EACrCC,YAAYC,IAAY,EAAEC,MAAc,EAAEC,IAAY,EAAEC,OAAe,EAAE;IACvE,KAAK,CACHD,IAAA,GACK,uBAAsBA,IAAK,sBAAqBD,MAAO,UAASD,IAAK,eAAcG,OAAQ,EAAC,GAC5F,2CAA0CF,MAAO,UAASD,IAAK,eAAcG,OAAQ,EAAC;EAE/F;AACF;AAEO,SAASP,oBACdI,IAAY,EACZC,MAAc,EACdG,KAAU;EAEV,IAAI,CAAC,IAAAC,cAAA,CAAAC,aAAa,EAACF,KAAA,GAAQ;IACzB,MAAM,IAAIT,iBAAA,CACRK,IAAA,EACAC,MAAA,EACA,IACC,iDAAgDA,MAAO,yCAAwC,IAAAI,cAAA,CAAAE,mBAAmB,EACjHH,KAAA,CACA,MAAK;EAEX;EAEA,SAASI,MAAMC,OAAyB,EAAEC,KAAU,EAAER,IAAY;IAChE,IAAIO,OAAA,CAAQE,GAAG,CAACD,KAAA,GAAQ;MACtB,MAAM,IAAIf,iBAAA,CACRK,IAAA,EACAC,MAAA,EACAC,IAAA,EACC,kEACCO,OAAA,CAAQG,GAAG,CAACF,KAAA,KAAU,QACvB,MAAK;IAEV;IAEAD,OAAA,CAAQI,GAAG,CAACH,KAAA,EAAOR,IAAA;EACrB;EAEA,SAASY,eACPC,IAAsB,EACtBL,KAAU,EACVR,IAAY;IAEZ,MAAMc,IAAA,GAAO,OAAON,KAAA;IACpB;IACE;IACAA,KAAA,KAAU;IACV;IACA;IACA;IACA;IACA;IACAM,IAAA,KAAS,aACTA,IAAA,KAAS,YACTA,IAAA,KAAS,UACT;MACA,OAAO;IACT;IAEA,IAAIA,IAAA,KAAS,aAAa;MACxB,MAAM,IAAIrB,iBAAA,CACRK,IAAA,EACAC,MAAA,EACAC,IAAA,EACA;IAEJ;IAEA,IAAI,IAAAG,cAAA,CAAAC,aAAa,EAACI,KAAA,GAAQ;MACxBF,KAAA,CAAMO,IAAA,EAAML,KAAA,EAAOR,IAAA;MAEnB,IACEe,MAAA,CAAOC,OAAO,CAACR,KAAA,EAAOS,KAAK,CAAC,CAAC,CAACC,GAAA,EAAKC,WAAA,CAAY;QAC7C,MAAMC,QAAA,GAAWzB,qBAAA,CAAsB0B,IAAI,CAACH,GAAA,IACvC,GAAElB,IAAK,IAAGkB,GAAI,EAAC,GACf,GAAElB,IAAK,IAAGsB,IAAA,CAAKC,SAAS,CAACL,GAAA,CAAK,GAAE;QAErC,MAAMM,OAAA,GAAU,IAAIC,GAAA,CAAIZ,IAAA;QACxB,OACED,cAAA,CAAeY,OAAA,EAASN,GAAA,EAAKE,QAAA,KAC7BR,cAAA,CAAeY,OAAA,EAASL,WAAA,EAAaC,QAAA;MAEzC,IACA;QACA,OAAO;MACT;MAEA,MAAM,IAAI3B,iBAAA,CACRK,IAAA,EACAC,MAAA,EACAC,IAAA,EACC,iDAAgD;IAErD;IAEA,IAAI0B,KAAA,CAAMC,OAAO,CAACnB,KAAA,GAAQ;MACxBF,KAAA,CAAMO,IAAA,EAAML,KAAA,EAAOR,IAAA;MAEnB,IACEQ,KAAA,CAAMS,KAAK,CAAC,CAACE,WAAA,EAAaS,KAAA;QACxB,MAAMJ,OAAA,GAAU,IAAIC,GAAA,CAAIZ,IAAA;QACxB,OAAOD,cAAA,CAAeY,OAAA,EAASL,WAAA,EAAc,GAAEnB,IAAK,IAAG4B,KAAM,GAAE;MACjE,IACA;QACA,OAAO;MACT;MAEA,MAAM,IAAInC,iBAAA,CACRK,IAAA,EACAC,MAAA,EACAC,IAAA,EACC,gDAA+C;IAEpD;IAEA;IACA;IACA,MAAM,IAAIP,iBAAA,CACRK,IAAA,EACAC,MAAA,EACAC,IAAA,EACA,MACEc,IAAA,GACA,OACCA,IAAA,KAAS,WACL,MAAKC,MAAA,CAAOc,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACvB,KAAA,CAAO,IAAG,GAC/C,EAAC,IACL;EAEN;EAEA,OAAOI,cAAA,CAAe,IAAIa,GAAA,IAAOvB,KAAA,EAAO;AAC1C"},"metadata":{},"sourceType":"script","externalDependencies":[]}