{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFontAxes = void 0;\nconst format_available_values_1 = require(\"../format-available-values\");\nconst next_font_error_1 = require(\"../next-font-error\");\nconst google_fonts_metadata_1 = require(\"./google-fonts-metadata\");\n/**\n * Validates and gets the data for each font axis required to generate the Google Fonts URL.\n */\nfunction getFontAxes(fontFamily, weights, styles, selectedVariableAxes) {\n  const hasItalic = styles.includes('italic');\n  const hasNormal = styles.includes('normal');\n  // Make sure the order is correct, otherwise Google Fonts will return an error\n  // If only normal is set, we can skip returning the ital axis as normal is the default\n  const ital = hasItalic ? [...(hasNormal ? ['0'] : []), '1'] : undefined;\n  // Weights will always contain one element if it's a variable font\n  if (weights[0] === 'variable') {\n    // Get all the available axes for the current font from the metadata file\n    const allAxes = google_fonts_metadata_1.googleFontsMetadata[fontFamily].axes;\n    if (!allAxes) {\n      throw new Error('invariant variable font without axes');\n    }\n    if (selectedVariableAxes) {\n      // The axes other than weight and style that can be defined for the current variable font\n      const defineAbleAxes = allAxes.map(({\n        tag\n      }) => tag).filter(tag => tag !== 'wght');\n      if (defineAbleAxes.length === 0) {\n        (0, next_font_error_1.nextFontError)(`Font \\`${fontFamily}\\` has no definable \\`axes\\``);\n      }\n      if (!Array.isArray(selectedVariableAxes)) {\n        (0, next_font_error_1.nextFontError)(`Invalid axes value for font \\`${fontFamily}\\`, expected an array of axes.\\nAvailable axes: ${(0, format_available_values_1.formatAvailableValues)(defineAbleAxes)}`);\n      }\n      selectedVariableAxes.forEach(key => {\n        if (!defineAbleAxes.some(tag => tag === key)) {\n          (0, next_font_error_1.nextFontError)(`Invalid axes value \\`${key}\\` for font \\`${fontFamily}\\`.\\nAvailable axes: ${(0, format_available_values_1.formatAvailableValues)(defineAbleAxes)}`);\n        }\n      });\n    }\n    let weightAxis;\n    let variableAxes;\n    for (const {\n      tag,\n      min,\n      max\n    } of allAxes) {\n      if (tag === 'wght') {\n        // In variable fonts the weight is a range\n        weightAxis = `${min}..${max}`;\n      } else if (selectedVariableAxes === null || selectedVariableAxes === void 0 ? void 0 : selectedVariableAxes.includes(tag)) {\n        if (!variableAxes) {\n          variableAxes = [];\n        }\n        variableAxes.push([tag, `${min}..${max}`]);\n      }\n    }\n    return {\n      wght: weightAxis ? [weightAxis] : undefined,\n      ital,\n      variableAxes\n    };\n  } else {\n    return {\n      ital,\n      wght: weights\n    };\n  }\n}\nexports.getFontAxes = getFontAxes;","map":{"version":3,"names":["Object","defineProperty","exports","value","getFontAxes","format_available_values_1","require","next_font_error_1","google_fonts_metadata_1","fontFamily","weights","styles","selectedVariableAxes","hasItalic","includes","hasNormal","ital","undefined","allAxes","googleFontsMetadata","axes","Error","defineAbleAxes","map","tag","filter","length","nextFontError","Array","isArray","formatAvailableValues","forEach","key","some","weightAxis","variableAxes","min","max","push","wght"],"sources":["/Users/albertformatger/Documents/GitHub/web_musica/node_modules/next/dist/compiled/@next/font/dist/google/get-font-axes.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFontAxes = void 0;\nconst format_available_values_1 = require(\"../format-available-values\");\nconst next_font_error_1 = require(\"../next-font-error\");\nconst google_fonts_metadata_1 = require(\"./google-fonts-metadata\");\n/**\n * Validates and gets the data for each font axis required to generate the Google Fonts URL.\n */\nfunction getFontAxes(fontFamily, weights, styles, selectedVariableAxes) {\n    const hasItalic = styles.includes('italic');\n    const hasNormal = styles.includes('normal');\n    // Make sure the order is correct, otherwise Google Fonts will return an error\n    // If only normal is set, we can skip returning the ital axis as normal is the default\n    const ital = hasItalic ? [...(hasNormal ? ['0'] : []), '1'] : undefined;\n    // Weights will always contain one element if it's a variable font\n    if (weights[0] === 'variable') {\n        // Get all the available axes for the current font from the metadata file\n        const allAxes = google_fonts_metadata_1.googleFontsMetadata[fontFamily].axes;\n        if (!allAxes) {\n            throw new Error('invariant variable font without axes');\n        }\n        if (selectedVariableAxes) {\n            // The axes other than weight and style that can be defined for the current variable font\n            const defineAbleAxes = allAxes\n                .map(({ tag }) => tag)\n                .filter((tag) => tag !== 'wght');\n            if (defineAbleAxes.length === 0) {\n                (0, next_font_error_1.nextFontError)(`Font \\`${fontFamily}\\` has no definable \\`axes\\``);\n            }\n            if (!Array.isArray(selectedVariableAxes)) {\n                (0, next_font_error_1.nextFontError)(`Invalid axes value for font \\`${fontFamily}\\`, expected an array of axes.\\nAvailable axes: ${(0, format_available_values_1.formatAvailableValues)(defineAbleAxes)}`);\n            }\n            selectedVariableAxes.forEach((key) => {\n                if (!defineAbleAxes.some((tag) => tag === key)) {\n                    (0, next_font_error_1.nextFontError)(`Invalid axes value \\`${key}\\` for font \\`${fontFamily}\\`.\\nAvailable axes: ${(0, format_available_values_1.formatAvailableValues)(defineAbleAxes)}`);\n                }\n            });\n        }\n        let weightAxis;\n        let variableAxes;\n        for (const { tag, min, max } of allAxes) {\n            if (tag === 'wght') {\n                // In variable fonts the weight is a range\n                weightAxis = `${min}..${max}`;\n            }\n            else if (selectedVariableAxes === null || selectedVariableAxes === void 0 ? void 0 : selectedVariableAxes.includes(tag)) {\n                if (!variableAxes) {\n                    variableAxes = [];\n                }\n                variableAxes.push([tag, `${min}..${max}`]);\n            }\n        }\n        return {\n            wght: weightAxis ? [weightAxis] : undefined,\n            ital,\n            variableAxes,\n        };\n    }\n    else {\n        return {\n            ital,\n            wght: weights,\n        };\n    }\n}\nexports.getFontAxes = getFontAxes;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}