{"ast":null,"code":"// source: https://github.com/sindresorhus/resolve-from\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"resolveFrom\", {\n  enumerable: true,\n  get: function () {\n    return resolveFrom;\n  }\n});\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nconst _iserror = /*#__PURE__*/_interop_require_default(require(\"./is-error\"));\nconst _realpath = require(\"./realpath\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst Module = require(\"module\");\nconst resolveFrom = (fromDirectory, moduleId, silent) => {\n  if (typeof fromDirectory !== \"string\") {\n    throw new TypeError(`Expected \\`fromDir\\` to be of type \\`string\\`, got \\`${typeof fromDirectory}\\``);\n  }\n  if (typeof moduleId !== \"string\") {\n    throw new TypeError(`Expected \\`moduleId\\` to be of type \\`string\\`, got \\`${typeof moduleId}\\``);\n  }\n  try {\n    fromDirectory = (0, _realpath.realpathSync)(fromDirectory);\n  } catch (error) {\n    if ((0, _iserror.default)(error) && error.code === \"ENOENT\") {\n      fromDirectory = _path.default.resolve(fromDirectory);\n    } else if (silent) {\n      return;\n    } else {\n      throw error;\n    }\n  }\n  const fromFile = _path.default.join(fromDirectory, \"noop.js\");\n  const resolveFileName = () => Module._resolveFilename(moduleId, {\n    id: fromFile,\n    filename: fromFile,\n    paths: Module._nodeModulePaths(fromDirectory)\n  });\n  if (silent) {\n    try {\n      return resolveFileName();\n    } catch (error) {\n      return;\n    }\n  }\n  return resolveFileName();\n};","map":{"version":3,"names":["resolveFrom","Module","require","fromDirectory","moduleId","silent","TypeError","_realpath","realpathSync","error","_iserror","default","code","_path","resolve","fromFile","join","resolveFileName","_resolveFilename","id","filename","paths","_nodeModulePaths"],"sources":["../../src/lib/resolve-from.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;+BAOa;;;WAAAA,WAAA;;;4DANI;+DACG;0BACS;;;;;;AAE7B,MAAMC,MAAA,GAASC,OAAA,CAAQ;AAEhB,MAAMF,WAAA,GAAcA,CACzBG,aAAA,EACAC,QAAA,EACAC,MAAA;EAEA,IAAI,OAAOF,aAAA,KAAkB,UAAU;IACrC,MAAM,IAAIG,SAAA,CACP,wDAAuD,OAAOH,aAAc,IAAG;EAEpF;EAEA,IAAI,OAAOC,QAAA,KAAa,UAAU;IAChC,MAAM,IAAIE,SAAA,CACP,yDAAwD,OAAOF,QAAS,IAAG;EAEhF;EAEA,IAAI;IACFD,aAAA,GAAgB,IAAAI,SAAA,CAAAC,YAAY,EAACL,aAAA;EAC/B,EAAE,OAAOM,KAAA,EAAgB;IACvB,IAAI,IAAAC,QAAA,CAAAC,OAAO,EAACF,KAAA,KAAUA,KAAA,CAAMG,IAAI,KAAK,UAAU;MAC7CT,aAAA,GAAgBU,KAAA,CAAAF,OAAI,CAACG,OAAO,CAACX,aAAA;IAC/B,OAAO,IAAIE,MAAA,EAAQ;MACjB;IACF,OAAO;MACL,MAAMI,KAAA;IACR;EACF;EAEA,MAAMM,QAAA,GAAWF,KAAA,CAAAF,OAAI,CAACK,IAAI,CAACb,aAAA,EAAe;EAE1C,MAAMc,eAAA,GAAkBA,CAAA,KACtBhB,MAAA,CAAOiB,gBAAgB,CAACd,QAAA,EAAU;IAChCe,EAAA,EAAIJ,QAAA;IACJK,QAAA,EAAUL,QAAA;IACVM,KAAA,EAAOpB,MAAA,CAAOqB,gBAAgB,CAACnB,aAAA;EACjC;EAEF,IAAIE,MAAA,EAAQ;IACV,IAAI;MACF,OAAOY,eAAA;IACT,EAAE,OAAOR,KAAA,EAAO;MACd;IACF;EACF;EAEA,OAAOQ,eAAA;AACT"},"metadata":{},"sourceType":"script","externalDependencies":[]}