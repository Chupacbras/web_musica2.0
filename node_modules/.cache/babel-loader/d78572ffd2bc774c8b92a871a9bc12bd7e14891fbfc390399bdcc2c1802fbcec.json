{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// @ts-ignore\nconst Log = __importStar(require(\"next/dist/build/output/log\"));\nconst validate_google_font_function_call_1 = require(\"./validate-google-font-function-call\");\nconst get_font_axes_1 = require(\"./get-font-axes\");\nconst get_google_fonts_url_1 = require(\"./get-google-fonts-url\");\nconst next_font_error_1 = require(\"../next-font-error\");\nconst find_font_files_in_css_1 = require(\"./find-font-files-in-css\");\nconst get_fallback_font_override_metrics_1 = require(\"./get-fallback-font-override-metrics\");\nconst fetch_css_from_google_fonts_1 = require(\"./fetch-css-from-google-fonts\");\nconst fetch_font_file_1 = require(\"./fetch-font-file\");\nconst cssCache = new Map();\nconst fontCache = new Map();\n// regexp is based on https://github.com/sindresorhus/escape-string-regexp\nconst reHasRegExp = /[|\\\\{}()[\\]^$+*?.-]/;\nconst reReplaceRegExp = /[|\\\\{}()[\\]^$+*?.-]/g;\nfunction escapeStringRegexp(str) {\n  // see also: https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/escapeRegExp.js#L23\n  if (reHasRegExp.test(str)) {\n    return str.replace(reReplaceRegExp, '\\\\$&');\n  }\n  return str;\n}\nconst nextFontGoogleFontLoader = async ({\n  functionName,\n  data,\n  emitFontFile,\n  isDev,\n  isServer\n}) => {\n  var _a;\n  const {\n    fontFamily,\n    weights,\n    styles,\n    display,\n    preload,\n    selectedVariableAxes,\n    fallback,\n    adjustFontFallback,\n    variable,\n    subsets\n  } = (0, validate_google_font_function_call_1.validateGoogleFontFunctionCall)(functionName, data[0]);\n  // Validate and get the font axes required to generated the URL\n  const fontAxes = (0, get_font_axes_1.getFontAxes)(fontFamily, weights, styles, selectedVariableAxes);\n  // Generate the Google Fonts URL from the font family, axes and display value\n  const url = (0, get_google_fonts_url_1.getGoogleFontsUrl)(fontFamily, fontAxes, display);\n  // Get precalculated fallback font metrics, used to generate the fallback font CSS\n  const adjustFontFallbackMetrics = adjustFontFallback ? (0, get_fallback_font_override_metrics_1.getFallbackFontOverrideMetrics)(fontFamily) : undefined;\n  const result = {\n    fallbackFonts: fallback,\n    weight: weights.length === 1 && weights[0] !== 'variable' ? weights[0] : undefined,\n    style: styles.length === 1 ? styles[0] : undefined,\n    variable,\n    adjustFontFallback: adjustFontFallbackMetrics\n  };\n  try {\n    /**\n     * Hacky way to make sure the fetch is only done once.\n     * Otherwise both the client and server compiler would fetch the CSS.\n     * The reason we need to return the actual CSS from both the server and client is because a hash is generated based on the CSS content.\n     */\n    const hasCachedCSS = cssCache.has(url);\n    // Fetch CSS from Google Fonts or get it from the cache\n    let fontFaceDeclarations = hasCachedCSS ? cssCache.get(url) : await (0, fetch_css_from_google_fonts_1.fetchCSSFromGoogleFonts)(url, fontFamily, isDev).catch(err => {\n      console.error(err);\n      return null;\n    });\n    if (!hasCachedCSS) {\n      cssCache.set(url, fontFaceDeclarations !== null && fontFaceDeclarations !== void 0 ? fontFaceDeclarations : null);\n    } else {\n      cssCache.delete(url);\n    }\n    if (fontFaceDeclarations == null) {\n      (0, next_font_error_1.nextFontError)(`Failed to fetch \\`${fontFamily}\\` from Google Fonts.`);\n    }\n    // CSS Variables may be set on a body tag, ignore them to keep the CSS module pure\n    fontFaceDeclarations = fontFaceDeclarations.split('body {')[0];\n    // Find font files to download, provide the array of subsets we want to preload if preloading is enabled\n    const fontFiles = (0, find_font_files_in_css_1.findFontFilesInCss)(fontFaceDeclarations, preload ? subsets : undefined);\n    // Download the font files extracted from the CSS\n    const downloadedFiles = await Promise.all(fontFiles.map(async ({\n      googleFontFileUrl,\n      preloadFontFile\n    }) => {\n      const hasCachedFont = fontCache.has(googleFontFileUrl);\n      // Download the font file or get it from cache\n      const fontFileBuffer = hasCachedFont ? fontCache.get(googleFontFileUrl) : await (0, fetch_font_file_1.fetchFontFile)(googleFontFileUrl, isDev).catch(err => {\n        console.error(err);\n        return null;\n      });\n      if (!hasCachedFont) {\n        fontCache.set(googleFontFileUrl, fontFileBuffer !== null && fontFileBuffer !== void 0 ? fontFileBuffer : null);\n      } else {\n        fontCache.delete(googleFontFileUrl);\n      }\n      if (fontFileBuffer == null) {\n        (0, next_font_error_1.nextFontError)(`Failed to fetch \\`${fontFamily}\\` from Google Fonts.`);\n      }\n      const ext = /\\.(woff|woff2|eot|ttf|otf)$/.exec(googleFontFileUrl)[1];\n      // Emit font file to .next/static/media\n      const selfHostedFileUrl = emitFontFile(fontFileBuffer, ext, preloadFontFile, !!adjustFontFallbackMetrics);\n      return {\n        googleFontFileUrl,\n        selfHostedFileUrl\n      };\n    }));\n    /**\n     * Replace the @font-face sources with the self-hosted files we just downloaded to .next/static/media\n     *\n     * E.g.\n     * @font-face {\n     *   font-family: 'Inter';\n     *   src: url(https://fonts.gstatic.com/...) -> url(/_next/static/media/_.woff2)\n     * }\n     */\n    let updatedCssResponse = fontFaceDeclarations;\n    for (const {\n      googleFontFileUrl,\n      selfHostedFileUrl\n    } of downloadedFiles) {\n      updatedCssResponse = updatedCssResponse.replace(new RegExp(escapeStringRegexp(googleFontFileUrl), 'g'), selfHostedFileUrl);\n    }\n    return {\n      ...result,\n      css: updatedCssResponse\n    };\n  } catch (err) {\n    if (isDev) {\n      if (isServer) {\n        Log.error(`Failed to download \\`${fontFamily}\\` from Google Fonts. Using fallback font instead.\\n\\n${err.message}}`);\n      }\n      // In dev we should return the fallback font instead of throwing an error\n      let css = `@font-face {\n  font-family: '${fontFamily} Fallback';\n  src: local(\"${(_a = adjustFontFallbackMetrics === null || adjustFontFallbackMetrics === void 0 ? void 0 : adjustFontFallbackMetrics.fallbackFont) !== null && _a !== void 0 ? _a : 'Arial'}\");`;\n      if (adjustFontFallbackMetrics) {\n        css += `\n  ascent-override:${adjustFontFallbackMetrics.ascentOverride};\n  descent-override:${adjustFontFallbackMetrics.descentOverride};\n  line-gap-override:${adjustFontFallbackMetrics.lineGapOverride};\n  size-adjust:${adjustFontFallbackMetrics.sizeAdjust};`;\n      }\n      css += '\\n}';\n      return {\n        ...result,\n        css\n      };\n    } else {\n      throw err;\n    }\n  }\n};\nexports.default = nextFontGoogleFontLoader;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","Log","require","validate_google_font_function_call_1","get_font_axes_1","get_google_fonts_url_1","next_font_error_1","find_font_files_in_css_1","get_fallback_font_override_metrics_1","fetch_css_from_google_fonts_1","fetch_font_file_1","cssCache","Map","fontCache","reHasRegExp","reReplaceRegExp","escapeStringRegexp","str","test","replace","nextFontGoogleFontLoader","functionName","data","emitFontFile","isDev","isServer","_a","fontFamily","weights","styles","display","preload","selectedVariableAxes","fallback","adjustFontFallback","variable","subsets","validateGoogleFontFunctionCall","fontAxes","getFontAxes","url","getGoogleFontsUrl","adjustFontFallbackMetrics","getFallbackFontOverrideMetrics","fallbackFonts","weight","length","style","hasCachedCSS","has","fontFaceDeclarations","fetchCSSFromGoogleFonts","catch","err","console","error","set","delete","nextFontError","split","fontFiles","findFontFilesInCss","downloadedFiles","Promise","all","map","googleFontFileUrl","preloadFontFile","hasCachedFont","fontFileBuffer","fetchFontFile","ext","exec","selfHostedFileUrl","updatedCssResponse","RegExp","css","message","fallbackFont","ascentOverride","descentOverride","lineGapOverride","sizeAdjust","default"],"sources":["/Users/albertformatger/Documents/GitHub/web_musica/node_modules/next/dist/compiled/@next/font/dist/google/loader.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// @ts-ignore\nconst Log = __importStar(require(\"next/dist/build/output/log\"));\nconst validate_google_font_function_call_1 = require(\"./validate-google-font-function-call\");\nconst get_font_axes_1 = require(\"./get-font-axes\");\nconst get_google_fonts_url_1 = require(\"./get-google-fonts-url\");\nconst next_font_error_1 = require(\"../next-font-error\");\nconst find_font_files_in_css_1 = require(\"./find-font-files-in-css\");\nconst get_fallback_font_override_metrics_1 = require(\"./get-fallback-font-override-metrics\");\nconst fetch_css_from_google_fonts_1 = require(\"./fetch-css-from-google-fonts\");\nconst fetch_font_file_1 = require(\"./fetch-font-file\");\nconst cssCache = new Map();\nconst fontCache = new Map();\n// regexp is based on https://github.com/sindresorhus/escape-string-regexp\nconst reHasRegExp = /[|\\\\{}()[\\]^$+*?.-]/;\nconst reReplaceRegExp = /[|\\\\{}()[\\]^$+*?.-]/g;\nfunction escapeStringRegexp(str) {\n    // see also: https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/escapeRegExp.js#L23\n    if (reHasRegExp.test(str)) {\n        return str.replace(reReplaceRegExp, '\\\\$&');\n    }\n    return str;\n}\nconst nextFontGoogleFontLoader = async ({ functionName, data, emitFontFile, isDev, isServer, }) => {\n    var _a;\n    const { fontFamily, weights, styles, display, preload, selectedVariableAxes, fallback, adjustFontFallback, variable, subsets, } = (0, validate_google_font_function_call_1.validateGoogleFontFunctionCall)(functionName, data[0]);\n    // Validate and get the font axes required to generated the URL\n    const fontAxes = (0, get_font_axes_1.getFontAxes)(fontFamily, weights, styles, selectedVariableAxes);\n    // Generate the Google Fonts URL from the font family, axes and display value\n    const url = (0, get_google_fonts_url_1.getGoogleFontsUrl)(fontFamily, fontAxes, display);\n    // Get precalculated fallback font metrics, used to generate the fallback font CSS\n    const adjustFontFallbackMetrics = adjustFontFallback ? (0, get_fallback_font_override_metrics_1.getFallbackFontOverrideMetrics)(fontFamily) : undefined;\n    const result = {\n        fallbackFonts: fallback,\n        weight: weights.length === 1 && weights[0] !== 'variable'\n            ? weights[0]\n            : undefined,\n        style: styles.length === 1 ? styles[0] : undefined,\n        variable,\n        adjustFontFallback: adjustFontFallbackMetrics,\n    };\n    try {\n        /**\n         * Hacky way to make sure the fetch is only done once.\n         * Otherwise both the client and server compiler would fetch the CSS.\n         * The reason we need to return the actual CSS from both the server and client is because a hash is generated based on the CSS content.\n         */\n        const hasCachedCSS = cssCache.has(url);\n        // Fetch CSS from Google Fonts or get it from the cache\n        let fontFaceDeclarations = hasCachedCSS\n            ? cssCache.get(url)\n            : await (0, fetch_css_from_google_fonts_1.fetchCSSFromGoogleFonts)(url, fontFamily, isDev).catch((err) => {\n                console.error(err);\n                return null;\n            });\n        if (!hasCachedCSS) {\n            cssCache.set(url, fontFaceDeclarations !== null && fontFaceDeclarations !== void 0 ? fontFaceDeclarations : null);\n        }\n        else {\n            cssCache.delete(url);\n        }\n        if (fontFaceDeclarations == null) {\n            (0, next_font_error_1.nextFontError)(`Failed to fetch \\`${fontFamily}\\` from Google Fonts.`);\n        }\n        // CSS Variables may be set on a body tag, ignore them to keep the CSS module pure\n        fontFaceDeclarations = fontFaceDeclarations.split('body {')[0];\n        // Find font files to download, provide the array of subsets we want to preload if preloading is enabled\n        const fontFiles = (0, find_font_files_in_css_1.findFontFilesInCss)(fontFaceDeclarations, preload ? subsets : undefined);\n        // Download the font files extracted from the CSS\n        const downloadedFiles = await Promise.all(fontFiles.map(async ({ googleFontFileUrl, preloadFontFile }) => {\n            const hasCachedFont = fontCache.has(googleFontFileUrl);\n            // Download the font file or get it from cache\n            const fontFileBuffer = hasCachedFont\n                ? fontCache.get(googleFontFileUrl)\n                : await (0, fetch_font_file_1.fetchFontFile)(googleFontFileUrl, isDev).catch((err) => {\n                    console.error(err);\n                    return null;\n                });\n            if (!hasCachedFont) {\n                fontCache.set(googleFontFileUrl, fontFileBuffer !== null && fontFileBuffer !== void 0 ? fontFileBuffer : null);\n            }\n            else {\n                fontCache.delete(googleFontFileUrl);\n            }\n            if (fontFileBuffer == null) {\n                (0, next_font_error_1.nextFontError)(`Failed to fetch \\`${fontFamily}\\` from Google Fonts.`);\n            }\n            const ext = /\\.(woff|woff2|eot|ttf|otf)$/.exec(googleFontFileUrl)[1];\n            // Emit font file to .next/static/media\n            const selfHostedFileUrl = emitFontFile(fontFileBuffer, ext, preloadFontFile, !!adjustFontFallbackMetrics);\n            return {\n                googleFontFileUrl,\n                selfHostedFileUrl,\n            };\n        }));\n        /**\n         * Replace the @font-face sources with the self-hosted files we just downloaded to .next/static/media\n         *\n         * E.g.\n         * @font-face {\n         *   font-family: 'Inter';\n         *   src: url(https://fonts.gstatic.com/...) -> url(/_next/static/media/_.woff2)\n         * }\n         */\n        let updatedCssResponse = fontFaceDeclarations;\n        for (const { googleFontFileUrl, selfHostedFileUrl } of downloadedFiles) {\n            updatedCssResponse = updatedCssResponse.replace(new RegExp(escapeStringRegexp(googleFontFileUrl), 'g'), selfHostedFileUrl);\n        }\n        return {\n            ...result,\n            css: updatedCssResponse,\n        };\n    }\n    catch (err) {\n        if (isDev) {\n            if (isServer) {\n                Log.error(`Failed to download \\`${fontFamily}\\` from Google Fonts. Using fallback font instead.\\n\\n${err.message}}`);\n            }\n            // In dev we should return the fallback font instead of throwing an error\n            let css = `@font-face {\n  font-family: '${fontFamily} Fallback';\n  src: local(\"${(_a = adjustFontFallbackMetrics === null || adjustFontFallbackMetrics === void 0 ? void 0 : adjustFontFallbackMetrics.fallbackFont) !== null && _a !== void 0 ? _a : 'Arial'}\");`;\n            if (adjustFontFallbackMetrics) {\n                css += `\n  ascent-override:${adjustFontFallbackMetrics.ascentOverride};\n  descent-override:${adjustFontFallbackMetrics.descentOverride};\n  line-gap-override:${adjustFontFallbackMetrics.lineGapOverride};\n  size-adjust:${adjustFontFallbackMetrics.sizeAdjust};`;\n            }\n            css += '\\n}';\n            return {\n                ...result,\n                css,\n            };\n        }\n        else {\n            throw err;\n        }\n    }\n};\nexports.default = nextFontGoogleFontLoader;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}