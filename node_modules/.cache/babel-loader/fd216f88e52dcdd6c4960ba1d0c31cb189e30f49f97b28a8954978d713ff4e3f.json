{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fetchFontFile = void 0;\n// @ts-ignore\nconst node_fetch_1 = __importDefault(require(\"next/dist/compiled/node-fetch\"));\nconst get_proxy_agent_1 = require(\"./get-proxy-agent\");\n/**\n * Fetch the url and return a buffer with the font file.\n */\nasync function fetchFontFile(url, isDev) {\n  // Check if we're using mocked data\n  if (process.env.NEXT_FONT_GOOGLE_MOCKED_RESPONSES) {\n    // If it's an absolute path, read the file from the filesystem\n    if (url.startsWith('/')) {\n      return require('fs').readFileSync(url);\n    }\n    // Otherwise just return a unique buffer\n    return Buffer.from(url);\n  }\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), 3000);\n  const arrayBuffer = await (0, node_fetch_1.default)(url, {\n    agent: (0, get_proxy_agent_1.getProxyAgent)(),\n    // Add a timeout in dev\n    signal: isDev ? controller.signal : undefined\n  }).then(r => r.arrayBuffer()).finally(() => {\n    clearTimeout(timeoutId);\n  });\n  return Buffer.from(arrayBuffer);\n}\nexports.fetchFontFile = fetchFontFile;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","fetchFontFile","node_fetch_1","require","get_proxy_agent_1","url","isDev","process","env","NEXT_FONT_GOOGLE_MOCKED_RESPONSES","startsWith","readFileSync","Buffer","from","controller","AbortController","timeoutId","setTimeout","abort","arrayBuffer","default","agent","getProxyAgent","signal","undefined","then","r","finally","clearTimeout"],"sources":["/Users/albertformatger/Documents/GitHub/web_musica/node_modules/next/dist/compiled/@next/font/dist/google/fetch-font-file.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fetchFontFile = void 0;\n// @ts-ignore\nconst node_fetch_1 = __importDefault(require(\"next/dist/compiled/node-fetch\"));\nconst get_proxy_agent_1 = require(\"./get-proxy-agent\");\n/**\n * Fetch the url and return a buffer with the font file.\n */\nasync function fetchFontFile(url, isDev) {\n    // Check if we're using mocked data\n    if (process.env.NEXT_FONT_GOOGLE_MOCKED_RESPONSES) {\n        // If it's an absolute path, read the file from the filesystem\n        if (url.startsWith('/')) {\n            return require('fs').readFileSync(url);\n        }\n        // Otherwise just return a unique buffer\n        return Buffer.from(url);\n    }\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 3000);\n    const arrayBuffer = await (0, node_fetch_1.default)(url, {\n        agent: (0, get_proxy_agent_1.getProxyAgent)(),\n        // Add a timeout in dev\n        signal: isDev ? controller.signal : undefined,\n    })\n        .then((r) => r.arrayBuffer())\n        .finally(() => {\n        clearTimeout(timeoutId);\n    });\n    return Buffer.from(arrayBuffer);\n}\nexports.fetchFontFile = fetchFontFile;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAC9B;AACA,MAAMC,YAAY,GAAGR,eAAe,CAACS,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAC9E,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AACtD;AACA;AACA;AACA,eAAeF,aAAaA,CAACI,GAAG,EAAEC,KAAK,EAAE;EACrC;EACA,IAAIC,OAAO,CAACC,GAAG,CAACC,iCAAiC,EAAE;IAC/C;IACA,IAAIJ,GAAG,CAACK,UAAU,CAAC,GAAG,CAAC,EAAE;MACrB,OAAOP,OAAO,CAAC,IAAI,CAAC,CAACQ,YAAY,CAACN,GAAG,CAAC;IAC1C;IACA;IACA,OAAOO,MAAM,CAACC,IAAI,CAACR,GAAG,CAAC;EAC3B;EACA,MAAMS,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;EACxC,MAAMC,SAAS,GAAGC,UAAU,CAAC,MAAMH,UAAU,CAACI,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC;EAC5D,MAAMC,WAAW,GAAG,MAAM,CAAC,CAAC,EAAEjB,YAAY,CAACkB,OAAO,EAAEf,GAAG,EAAE;IACrDgB,KAAK,EAAE,CAAC,CAAC,EAAEjB,iBAAiB,CAACkB,aAAa,EAAE,CAAC;IAC7C;IACAC,MAAM,EAAEjB,KAAK,GAAGQ,UAAU,CAACS,MAAM,GAAGC;EACxC,CAAC,CAAC,CACGC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACP,WAAW,CAAC,CAAC,CAAC,CAC5BQ,OAAO,CAAC,MAAM;IACfC,YAAY,CAACZ,SAAS,CAAC;EAC3B,CAAC,CAAC;EACF,OAAOJ,MAAM,CAACC,IAAI,CAACM,WAAW,CAAC;AACnC;AACApB,OAAO,CAACE,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}