{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"FlightClientEntryPlugin\", {\n  enumerable: true,\n  get: function () {\n    return FlightClientEntryPlugin;\n  }\n});\nconst _webpack = require(\"next/dist/compiled/webpack/webpack\");\nconst _querystring = require(\"querystring\");\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nconst _ondemandentryhandler = require(\"../../../server/dev/on-demand-entry-handler\");\nconst _constants = require(\"../../../lib/constants\");\nconst _constants1 = require(\"../../../shared/lib/constants\");\nconst _utils = require(\"../loaders/utils\");\nconst _utils1 = require(\"../utils\");\nconst _normalizepathsep = require(\"../../../shared/lib/page-path/normalize-path-sep\");\nconst _buildcontext = require(\"../../build-context\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst PLUGIN_NAME = \"FlightClientEntryPlugin\";\nconst pluginState = (0, _buildcontext.getProxiedPluginState)({\n  // A map to track \"action\" -> \"list of bundles\".\n  serverActions: {},\n  edgeServerActions: {},\n  actionModServerId: {},\n  actionModEdgeServerId: {},\n  // Mapping of resource path to module id for server/edge server.\n  serverModuleIds: {},\n  edgeServerModuleIds: {},\n  // Collect modules from server/edge compiler in client layer,\n  // and detect if it's been used, and mark it as `async: true` for react.\n  // So that react could unwrap the async module from promise and render module itself.\n  ASYNC_CLIENT_MODULES: [],\n  injectedClientEntries: {}\n});\nfunction deduplicateCSSImportsForEntry(mergedCSSimports) {\n  // If multiple entry module connections are having the same CSS import,\n  // we only need to have one module to keep track of that CSS import.\n  // It is based on the fact that if a page or a layout is rendered in the\n  // given entry, all its parent layouts are always rendered too.\n  // This can avoid duplicate CSS imports in the generated CSS manifest,\n  // for example, if a page and its parent layout are both using the same\n  // CSS import, we only need to have the layout to keep track of that CSS\n  // import.\n  // To achieve this, we need to first collect all the CSS imports from\n  // every connection, and deduplicate them in the order of layers from\n  // top to bottom. The implementation can be generally described as:\n  // - Sort by number of `/` in the request path (the more `/`, the deeper)\n  // - When in the same depth, sort by the filename (template < layout < page and others)\n  // Sort the connections as described above.\n  const sortedCSSImports = Object.entries(mergedCSSimports).sort((a, b) => {\n    const [aPath] = a;\n    const [bPath] = b;\n    const aDepth = aPath.split(\"/\").length;\n    const bDepth = bPath.split(\"/\").length;\n    if (aDepth !== bDepth) {\n      return aDepth - bDepth;\n    }\n    const aName = _path.default.parse(aPath).name;\n    const bName = _path.default.parse(bPath).name;\n    const indexA = [\"template\", \"layout\"].indexOf(aName);\n    const indexB = [\"template\", \"layout\"].indexOf(bName);\n    if (indexA === -1) return 1;\n    if (indexB === -1) return -1;\n    return indexA - indexB;\n  });\n  const dedupedCSSImports = {};\n  const trackedCSSImports = new Set();\n  for (const [entryName, cssImports] of sortedCSSImports) {\n    for (const cssImport of cssImports) {\n      if (trackedCSSImports.has(cssImport)) continue;\n      // Only track CSS imports that are in files that can inherit CSS.\n      const filename = _path.default.parse(entryName).name;\n      if ([\"template\", \"layout\"].includes(filename)) {\n        trackedCSSImports.add(cssImport);\n      }\n      if (!dedupedCSSImports[entryName]) {\n        dedupedCSSImports[entryName] = [];\n      }\n      dedupedCSSImports[entryName].push(cssImport);\n    }\n  }\n  return dedupedCSSImports;\n}\nclass FlightClientEntryPlugin {\n  constructor(options) {\n    this.dev = options.dev;\n    this.appDir = options.appDir;\n    this.isEdgeServer = options.isEdgeServer;\n    this.useServerActions = options.useServerActions;\n    this.serverActionsBodySizeLimit = options.serverActionsBodySizeLimit;\n    this.assetPrefix = !this.dev && !this.isEdgeServer ? \"../\" : \"\";\n  }\n  apply(compiler) {\n    compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation, {\n      normalModuleFactory\n    }) => {\n      compilation.dependencyFactories.set(_webpack.webpack.dependencies.ModuleDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(_webpack.webpack.dependencies.ModuleDependency, new _webpack.webpack.dependencies.NullDependency.Template());\n    });\n    compiler.hooks.finishMake.tapPromise(PLUGIN_NAME, compilation => this.createClientEntries(compiler, compilation));\n    compiler.hooks.afterCompile.tap(PLUGIN_NAME, compilation => {\n      const recordModule = (modId, mod) => {\n        var _mod_resourceResolveData, _mod_resourceResolveData1;\n        // Match Resource is undefined unless an import is using the inline match resource syntax\n        // https://webpack.js.org/api/loaders/#inline-matchresource\n        const modPath = mod.matchResource || ((_mod_resourceResolveData = mod.resourceResolveData) == null ? void 0 : _mod_resourceResolveData.path);\n        const modQuery = ((_mod_resourceResolveData1 = mod.resourceResolveData) == null ? void 0 : _mod_resourceResolveData1.query) || \"\";\n        // query is already part of mod.resource\n        // so it's only neccessary to add it for matchResource or mod.resourceResolveData\n        const modResource = modPath ? modPath + modQuery : mod.resource;\n        if (mod.layer !== _constants.WEBPACK_LAYERS.serverSideRendering) {\n          return;\n        }\n        // Check mod resource to exclude the empty resource module like virtual module created by next-flight-client-entry-loader\n        if (typeof modId !== \"undefined\" && modResource) {\n          // Note that this isn't that reliable as webpack is still possible to assign\n          // additional queries to make sure there's no conflict even using the `named`\n          // module ID strategy.\n          let ssrNamedModuleId = _path.default.relative(compiler.context, modResource);\n          if (!ssrNamedModuleId.startsWith(\".\")) {\n            // TODO use getModuleId instead\n            ssrNamedModuleId = `./${(0, _normalizepathsep.normalizePathSep)(ssrNamedModuleId)}`;\n          }\n          if (this.isEdgeServer) {\n            pluginState.edgeServerModuleIds[ssrNamedModuleId.replace(/\\/next\\/dist\\/esm\\//, \"/next/dist/\")] = modId;\n          } else {\n            pluginState.serverModuleIds[ssrNamedModuleId] = modId;\n          }\n        }\n      };\n      (0, _utils1.traverseModules)(compilation, (mod, _chunk, _chunkGroup, modId) => {\n        // The module must has request, and resource so it's not a new entry created with loader.\n        // Using the client layer module, which doesn't have `rsc` tag in buildInfo.\n        if (mod.request && mod.resource && !mod.buildInfo.rsc) {\n          if (compilation.moduleGraph.isAsync(mod)) {\n            pluginState.ASYNC_CLIENT_MODULES.push(mod.resource);\n          }\n        }\n        recordModule(String(modId), mod);\n      });\n    });\n    compiler.hooks.make.tap(PLUGIN_NAME, compilation => {\n      compilation.hooks.processAssets.tap({\n        name: PLUGIN_NAME,\n        stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_HASH\n      }, assets => this.createActionAssets(compilation, assets));\n    });\n  }\n  async createClientEntries(compiler, compilation) {\n    const addClientEntryAndSSRModulesList = [];\n    const createdSSRDependenciesForEntry = {};\n    const addActionEntryList = [];\n    const actionMapsPerEntry = {};\n    // For each SC server compilation entry, we need to create its corresponding\n    // client component entry.\n    (0, _utils1.forEachEntryModule)(compilation, ({\n      name,\n      entryModule\n    }) => {\n      const internalClientComponentEntryImports = new Set();\n      const actionEntryImports = new Map();\n      const clientEntriesToInject = [];\n      const mergedCSSimports = {};\n      for (const connection of compilation.moduleGraph.getOutgoingConnections(entryModule)) {\n        // Entry can be any user defined entry files such as layout, page, error, loading, etc.\n        const entryRequest = connection.dependency.request;\n        const {\n          clientComponentImports,\n          actionImports,\n          cssImports\n        } = this.collectComponentInfoFromServerEntryDependency({\n          entryRequest,\n          compilation,\n          resolvedModule: connection.resolvedModule\n        });\n        actionImports.forEach(([dep, names]) => actionEntryImports.set(dep, names));\n        const isAbsoluteRequest = _path.default.isAbsolute(entryRequest);\n        // Next.js internals are put into a separate entry.\n        if (!isAbsoluteRequest) {\n          clientComponentImports.forEach(value => internalClientComponentEntryImports.add(value));\n          continue;\n        }\n        // TODO-APP: Enable these lines. This ensures no entrypoint is created for layout/page when there are no client components.\n        // Currently disabled because it causes test failures in CI.\n        // if (clientImports.length === 0 && actionImports.length === 0) {\n        //   continue\n        // }\n        const relativeRequest = isAbsoluteRequest ? _path.default.relative(compilation.options.context, entryRequest) : entryRequest;\n        // Replace file suffix as `.js` will be added.\n        const bundlePath = (0, _normalizepathsep.normalizePathSep)(relativeRequest.replace(/\\.[^.\\\\/]+$/, \"\").replace(/^src[\\\\/]/, \"\"));\n        Object.assign(mergedCSSimports, cssImports);\n        clientEntriesToInject.push({\n          compiler,\n          compilation,\n          entryName: name,\n          clientComponentImports,\n          bundlePath,\n          absolutePagePath: entryRequest\n        });\n      }\n      // Make sure CSS imports are deduplicated before injecting the client entry\n      // and SSR modules.\n      const dedupedCSSImports = deduplicateCSSImportsForEntry(mergedCSSimports);\n      for (const clientEntryToInject of clientEntriesToInject) {\n        const injected = this.injectClientEntryAndSSRModules({\n          ...clientEntryToInject,\n          clientImports: [...clientEntryToInject.clientComponentImports, ...(dedupedCSSImports[clientEntryToInject.absolutePagePath] || [])]\n        });\n        // Track all created SSR dependencies for each entry from the server layer.\n        if (!createdSSRDependenciesForEntry[clientEntryToInject.entryName]) {\n          createdSSRDependenciesForEntry[clientEntryToInject.entryName] = [];\n        }\n        createdSSRDependenciesForEntry[clientEntryToInject.entryName].push(injected[2]);\n        addClientEntryAndSSRModulesList.push(injected);\n      }\n      // Create internal app\n      addClientEntryAndSSRModulesList.push(this.injectClientEntryAndSSRModules({\n        compiler,\n        compilation,\n        entryName: name,\n        clientImports: [...internalClientComponentEntryImports],\n        bundlePath: _constants1.APP_CLIENT_INTERNALS\n      }));\n      if (actionEntryImports.size > 0) {\n        if (!actionMapsPerEntry[name]) {\n          actionMapsPerEntry[name] = new Map();\n        }\n        actionMapsPerEntry[name] = new Map([...actionMapsPerEntry[name], ...actionEntryImports]);\n      }\n    });\n    const createdActions = new Set();\n    for (const [name, actionEntryImports] of Object.entries(actionMapsPerEntry)) {\n      for (const [dep, actionNames] of actionEntryImports) {\n        for (const actionName of actionNames) {\n          createdActions.add(name + \"@\" + dep + \"@\" + actionName);\n        }\n      }\n      addActionEntryList.push(this.injectActionEntry({\n        compiler,\n        compilation,\n        actions: actionEntryImports,\n        entryName: name,\n        bundlePath: name\n      }));\n    }\n    if (this.useServerActions) {\n      compilation.hooks.finishModules.tapPromise(PLUGIN_NAME, () => {\n        const addedClientActionEntryList = [];\n        const actionMapsPerClientEntry = {};\n        // We need to create extra action entries that are created from the\n        // client layer.\n        // Start from each entry's created SSR dependency from our previous step.\n        for (const [name, ssrEntryDepdendencies] of Object.entries(createdSSRDependenciesForEntry)) {\n          // Collect from all entries, e.g. layout.js, page.js, loading.js, ...\n          // add agregate them.\n          const actionEntryImports = this.collectClientActionsFromDependencies({\n            compilation,\n            dependencies: ssrEntryDepdendencies\n          });\n          if (actionEntryImports.size > 0) {\n            if (!actionMapsPerClientEntry[name]) {\n              actionMapsPerClientEntry[name] = new Map();\n            }\n            actionMapsPerClientEntry[name] = new Map([...actionMapsPerClientEntry[name], ...actionEntryImports]);\n          }\n        }\n        for (const [name, actionEntryImports] of Object.entries(actionMapsPerClientEntry)) {\n          // If an action method is already created in the server layer, we don't\n          // need to create it again in the action layer.\n          // This is to avoid duplicate action instances and make sure the module\n          // state is shared.\n          let remainingClientImportedActions = false;\n          const remainingActionEntryImports = new Map();\n          for (const [dep, actionNames] of actionEntryImports) {\n            const remainingActionNames = [];\n            for (const actionName of actionNames) {\n              const id = name + \"@\" + dep + \"@\" + actionName;\n              if (!createdActions.has(id)) {\n                remainingActionNames.push(actionName);\n              }\n            }\n            if (remainingActionNames.length > 0) {\n              remainingActionEntryImports.set(dep, remainingActionNames);\n              remainingClientImportedActions = true;\n            }\n          }\n          if (remainingClientImportedActions) {\n            addedClientActionEntryList.push(this.injectActionEntry({\n              compiler,\n              compilation,\n              actions: remainingActionEntryImports,\n              entryName: name,\n              bundlePath: name,\n              fromClient: true\n            }));\n          }\n        }\n        return Promise.all(addedClientActionEntryList);\n      });\n    }\n    // Invalidate in development to trigger recompilation\n    const invalidator = (0, _ondemandentryhandler.getInvalidator)(compiler.outputPath);\n    // Check if any of the entry injections need an invalidation\n    if (invalidator && addClientEntryAndSSRModulesList.some(([shouldInvalidate]) => shouldInvalidate === true)) {\n      invalidator.invalidate([_constants1.COMPILER_NAMES.client]);\n    }\n    // Client compiler is invalidated before awaiting the compilation of the SSR client component entries\n    // so that the client compiler is running in parallel to the server compiler.\n    await Promise.all(addClientEntryAndSSRModulesList.map(addClientEntryAndSSRModules => addClientEntryAndSSRModules[1]));\n    // Wait for action entries to be added.\n    await Promise.all(addActionEntryList);\n  }\n  collectClientActionsFromDependencies({\n    compilation,\n    dependencies\n  }) {\n    // action file path -> action names\n    const collectedActions = new Map();\n    // Keep track of checked modules to avoid infinite loops with recursive imports.\n    const visitedModule = new Set();\n    const visitedEntry = new Set();\n    const collectActions = ({\n      entryRequest,\n      resolvedModule\n    }) => {\n      const collectActionsInDep = mod => {\n        var _mod_resourceResolveData, _mod_resourceResolveData1;\n        if (!mod) return;\n        // We have to always use the resolved request here to make sure the\n        // server and client are using the same module path (required by RSC), as\n        // the server compiler and client compiler have different resolve configs.\n        const modRequest = ((_mod_resourceResolveData = mod.resourceResolveData) == null ? void 0 : _mod_resourceResolveData.path) + ((_mod_resourceResolveData1 = mod.resourceResolveData) == null ? void 0 : _mod_resourceResolveData1.query);\n        if (!modRequest || visitedModule.has(modRequest)) return;\n        visitedModule.add(modRequest);\n        const actions = (0, _utils.getActions)(mod);\n        if (actions) {\n          collectedActions.set(modRequest, actions);\n        }\n        compilation.moduleGraph.getOutgoingConnections(mod).forEach(connection => {\n          collectActionsInDep(connection.resolvedModule);\n        });\n      };\n      // Don't traverse the module graph anymore once hitting the action layer.\n      if (!entryRequest.includes(\"next-flight-action-entry-loader\")) {\n        // Traverse the module graph to find all client components.\n        collectActionsInDep(resolvedModule);\n      }\n    };\n    for (const entryDependency of dependencies) {\n      const ssrEntryModule = compilation.moduleGraph.getResolvedModule(entryDependency);\n      for (const connection of compilation.moduleGraph.getOutgoingConnections(ssrEntryModule)) {\n        const dependency = connection.dependency;\n        const request = dependency.request;\n        // It is possible that the same entry is added multiple times in the\n        // connection graph. We can just skip these to speed up the process.\n        if (visitedEntry.has(request)) continue;\n        visitedEntry.add(request);\n        collectActions({\n          entryRequest: request,\n          resolvedModule: connection.resolvedModule\n        });\n      }\n    }\n    return collectedActions;\n  }\n  collectComponentInfoFromServerEntryDependency({\n    entryRequest,\n    compilation,\n    resolvedModule\n  }) {\n    // Keep track of checked modules to avoid infinite loops with recursive imports.\n    const visited = new Set();\n    // Info to collect.\n    const clientComponentImports = [];\n    const actionImports = [];\n    const CSSImports = new Set();\n    const filterClientComponents = mod => {\n      var _mod_resourceResolveData, _mod_resourceResolveData1;\n      if (!mod) return;\n      const isCSS = (0, _utils.isCSSMod)(mod);\n      // We have to always use the resolved request here to make sure the\n      // server and client are using the same module path (required by RSC), as\n      // the server compiler and client compiler have different resolve configs.\n      let modRequest = ((_mod_resourceResolveData = mod.resourceResolveData) == null ? void 0 : _mod_resourceResolveData.path) + ((_mod_resourceResolveData1 = mod.resourceResolveData) == null ? void 0 : _mod_resourceResolveData1.query);\n      // Context modules don't have a resource path, we use the identifier instead.\n      if (mod.constructor.name === \"ContextModule\") {\n        modRequest = mod._identifier;\n      }\n      if (!modRequest || visited.has(modRequest)) return;\n      visited.add(modRequest);\n      const actions = (0, _utils.getActions)(mod);\n      if (actions) {\n        actionImports.push([modRequest, actions]);\n      }\n      if (isCSS) {\n        const sideEffectFree = mod.factoryMeta && mod.factoryMeta.sideEffectFree;\n        if (sideEffectFree) {\n          const unused = !compilation.moduleGraph.getExportsInfo(mod).isModuleUsed(this.isEdgeServer ? _constants1.EDGE_RUNTIME_WEBPACK : \"webpack-runtime\");\n          if (unused) return;\n        }\n        CSSImports.add(modRequest);\n      }\n      if ((0, _utils.isClientComponentEntryModule)(mod)) {\n        clientComponentImports.push(modRequest);\n        return;\n      }\n      compilation.moduleGraph.getOutgoingConnections(mod).forEach(connection => {\n        filterClientComponents(connection.resolvedModule);\n      });\n    };\n    // Traverse the module graph to find all client components.\n    filterClientComponents(resolvedModule);\n    return {\n      clientComponentImports,\n      cssImports: CSSImports.size ? {\n        [entryRequest]: Array.from(CSSImports)\n      } : {},\n      actionImports\n    };\n  }\n  injectClientEntryAndSSRModules({\n    compiler,\n    compilation,\n    entryName,\n    clientImports,\n    bundlePath,\n    absolutePagePath\n  }) {\n    let shouldInvalidate = false;\n    const loaderOptions = {\n      modules: clientImports.sort((a, b) => _utils.regexCSS.test(b) ? 1 : a.localeCompare(b)),\n      server: false\n    };\n    // For the client entry, we always use the CJS build of Next.js. If the\n    // server is using the ESM build (when using the Edge runtime), we need to\n    // replace them.\n    const clientLoader = `next-flight-client-entry-loader?${(0, _querystring.stringify)({\n      modules: this.isEdgeServer ? loaderOptions.modules.map(importPath => importPath.replace(/[\\\\/]next[\\\\/]dist[\\\\/]esm[\\\\/]/, \"/next/dist/\".replace(/\\//g, _path.default.sep))) : loaderOptions.modules,\n      server: false\n    })}!`;\n    const clientSSRLoader = `next-flight-client-entry-loader?${(0, _querystring.stringify)({\n      ...loaderOptions,\n      server: true\n    })}!`;\n    // Add for the client compilation\n    // Inject the entry to the client compiler.\n    if (this.dev) {\n      const entries = (0, _ondemandentryhandler.getEntries)(compiler.outputPath);\n      const pageKey = (0, _ondemandentryhandler.getEntryKey)(_constants1.COMPILER_NAMES.client, \"app\", bundlePath);\n      if (!entries[pageKey]) {\n        entries[pageKey] = {\n          type: _ondemandentryhandler.EntryTypes.CHILD_ENTRY,\n          parentEntries: new Set([entryName]),\n          absoluteEntryFilePath: absolutePagePath,\n          bundlePath,\n          request: clientLoader,\n          dispose: false,\n          lastActiveTime: Date.now()\n        };\n        shouldInvalidate = true;\n      } else {\n        const entryData = entries[pageKey];\n        // New version of the client loader\n        if (entryData.request !== clientLoader) {\n          entryData.request = clientLoader;\n          shouldInvalidate = true;\n        }\n        if (entryData.type === _ondemandentryhandler.EntryTypes.CHILD_ENTRY) {\n          entryData.parentEntries.add(entryName);\n        }\n        entryData.dispose = false;\n        entryData.lastActiveTime = Date.now();\n      }\n    } else {\n      pluginState.injectedClientEntries[bundlePath] = clientLoader;\n    }\n    // Inject the entry to the server compiler (__ssr__).\n    const clientComponentEntryDep = _webpack.webpack.EntryPlugin.createDependency(clientSSRLoader, {\n      name: bundlePath\n    });\n    return [shouldInvalidate,\n    // Add the dependency to the server compiler.\n    // This promise is awaited later using `Promise.all` in order to parallelize adding the entries.\n    // It ensures we can parallelize the SSR and Client compiler entries.\n    this.addEntry(compilation,\n    // Reuse compilation context.\n    compiler.context, clientComponentEntryDep, {\n      // By using the same entry name\n      name: entryName,\n      // Layer should be client for the SSR modules\n      // This ensures the client components are bundled on client layer\n      layer: _constants.WEBPACK_LAYERS.serverSideRendering\n    }), clientComponentEntryDep];\n  }\n  injectActionEntry({\n    compiler,\n    compilation,\n    actions,\n    entryName,\n    bundlePath,\n    fromClient\n  }) {\n    const actionsArray = Array.from(actions.entries());\n    const actionLoader = `next-flight-action-entry-loader?${(0, _querystring.stringify)({\n      actions: JSON.stringify(actionsArray),\n      __client_imported__: fromClient\n    })}!`;\n    const currentCompilerServerActions = this.isEdgeServer ? pluginState.edgeServerActions : pluginState.serverActions;\n    for (const [p, names] of actionsArray) {\n      for (const name of names) {\n        const id = (0, _utils.generateActionId)(p, name);\n        if (typeof currentCompilerServerActions[id] === \"undefined\") {\n          currentCompilerServerActions[id] = {\n            workers: {},\n            layer: {}\n          };\n        }\n        currentCompilerServerActions[id].workers[bundlePath] = \"\";\n        currentCompilerServerActions[id].layer[bundlePath] = fromClient ? _constants.WEBPACK_LAYERS.actionBrowser : _constants.WEBPACK_LAYERS.reactServerComponents;\n      }\n    }\n    // Inject the entry to the server compiler\n    const actionEntryDep = _webpack.webpack.EntryPlugin.createDependency(actionLoader, {\n      name: bundlePath\n    });\n    return this.addEntry(compilation,\n    // Reuse compilation context.\n    compiler.context, actionEntryDep, {\n      name: entryName,\n      layer: fromClient ? _constants.WEBPACK_LAYERS.actionBrowser : _constants.WEBPACK_LAYERS.reactServerComponents\n    });\n  }\n  addEntry(compilation, context, dependency, options) /* Promise<module> */{\n    return new Promise((resolve, reject) => {\n      const entry = compilation.entries.get(options.name);\n      entry.includeDependencies.push(dependency);\n      compilation.hooks.addEntry.call(entry, options);\n      compilation.addModuleTree({\n        context,\n        dependency,\n        contextInfo: {\n          issuerLayer: options.layer\n        }\n      }, (err, module) => {\n        if (err) {\n          compilation.hooks.failedEntry.call(dependency, options, err);\n          return reject(err);\n        }\n        compilation.hooks.succeedEntry.call(dependency, options, module);\n        return resolve(module);\n      });\n    });\n  }\n  createActionAssets(compilation, assets) {\n    const serverActions = {};\n    const edgeServerActions = {};\n    if (this.useServerActions) {\n      (0, _utils1.traverseModules)(compilation, (mod, _chunk, chunkGroup, modId) => {\n        // Go through all action entries and record the module ID for each entry.\n        if (chunkGroup.name && mod.request && /next-flight-action-entry-loader/.test(mod.request)) {\n          const fromClient = /&__client_imported__=true/.test(mod.request);\n          const mapping = this.isEdgeServer ? pluginState.actionModEdgeServerId : pluginState.actionModServerId;\n          if (!mapping[chunkGroup.name]) {\n            mapping[chunkGroup.name] = {};\n          }\n          mapping[chunkGroup.name][fromClient ? \"client\" : \"server\"] = modId;\n        }\n      });\n      for (let id in pluginState.serverActions) {\n        const action = pluginState.serverActions[id];\n        for (let name in action.workers) {\n          const modId = pluginState.actionModServerId[name][action.layer[name] === _constants.WEBPACK_LAYERS.actionBrowser ? \"client\" : \"server\"];\n          action.workers[name] = modId;\n        }\n        serverActions[id] = action;\n      }\n      for (let id in pluginState.edgeServerActions) {\n        const action = pluginState.edgeServerActions[id];\n        for (let name in action.workers) {\n          const modId = pluginState.actionModEdgeServerId[name][action.layer[name] === _constants.WEBPACK_LAYERS.actionBrowser ? \"client\" : \"server\"];\n          action.workers[name] = modId;\n        }\n        edgeServerActions[id] = action;\n      }\n    }\n    const json = JSON.stringify({\n      node: serverActions,\n      edge: edgeServerActions\n    }, null, this.dev ? 2 : undefined);\n    assets[`${this.assetPrefix}${_constants1.SERVER_REFERENCE_MANIFEST}.js`] = new _webpack.sources.RawSource(`self.__RSC_SERVER_MANIFEST=${JSON.stringify(json)}`);\n    assets[`${this.assetPrefix}${_constants1.SERVER_REFERENCE_MANIFEST}.json`] = new _webpack.sources.RawSource(json);\n  }\n}","map":{"version":3,"names":["FlightClientEntryPlugin","PLUGIN_NAME","pluginState","_buildcontext","getProxiedPluginState","serverActions","edgeServerActions","actionModServerId","actionModEdgeServerId","serverModuleIds","edgeServerModuleIds","ASYNC_CLIENT_MODULES","injectedClientEntries","deduplicateCSSImportsForEntry","mergedCSSimports","sortedCSSImports","Object","entries","sort","a","b","aPath","bPath","aDepth","split","length","bDepth","aName","_path","default","parse","name","bName","indexA","indexOf","indexB","dedupedCSSImports","trackedCSSImports","Set","entryName","cssImports","cssImport","has","filename","includes","add","push","constructor","options","dev","appDir","isEdgeServer","useServerActions","serverActionsBodySizeLimit","assetPrefix","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","_webpack","webpack","dependencies","ModuleDependency","dependencyTemplates","NullDependency","Template","finishMake","tapPromise","createClientEntries","afterCompile","recordModule","modId","mod","_mod_resourceResolveData","_mod_resourceResolveData1","modPath","matchResource","resourceResolveData","path","modQuery","query","modResource","resource","layer","_constants","WEBPACK_LAYERS","serverSideRendering","ssrNamedModuleId","relative","context","startsWith","_normalizepathsep","normalizePathSep","replace","_utils1","traverseModules","_chunk","_chunkGroup","request","buildInfo","rsc","moduleGraph","isAsync","String","make","processAssets","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_HASH","assets","createActionAssets","addClientEntryAndSSRModulesList","createdSSRDependenciesForEntry","addActionEntryList","actionMapsPerEntry","forEachEntryModule","entryModule","internalClientComponentEntryImports","actionEntryImports","Map","clientEntriesToInject","connection","getOutgoingConnections","entryRequest","dependency","clientComponentImports","actionImports","collectComponentInfoFromServerEntryDependency","resolvedModule","forEach","dep","names","isAbsoluteRequest","isAbsolute","value","relativeRequest","bundlePath","assign","absolutePagePath","clientEntryToInject","injected","injectClientEntryAndSSRModules","clientImports","_constants1","APP_CLIENT_INTERNALS","size","createdActions","actionNames","actionName","injectActionEntry","actions","finishModules","addedClientActionEntryList","actionMapsPerClientEntry","ssrEntryDepdendencies","collectClientActionsFromDependencies","remainingClientImportedActions","remainingActionEntryImports","remainingActionNames","id","fromClient","Promise","all","invalidator","_ondemandentryhandler","getInvalidator","outputPath","some","shouldInvalidate","invalidate","COMPILER_NAMES","client","map","addClientEntryAndSSRModules","collectedActions","visitedModule","visitedEntry","collectActions","collectActionsInDep","modRequest","_utils","getActions","entryDependency","ssrEntryModule","getResolvedModule","visited","CSSImports","filterClientComponents","isCSS","isCSSMod","_identifier","sideEffectFree","factoryMeta","unused","getExportsInfo","isModuleUsed","EDGE_RUNTIME_WEBPACK","isClientComponentEntryModule","Array","from","loaderOptions","modules","regexCSS","test","localeCompare","server","clientLoader","_querystring","stringify","importPath","sep","clientSSRLoader","getEntries","pageKey","getEntryKey","type","EntryTypes","CHILD_ENTRY","parentEntries","absoluteEntryFilePath","dispose","lastActiveTime","Date","now","entryData","clientComponentEntryDep","EntryPlugin","createDependency","addEntry","actionsArray","actionLoader","JSON","__client_imported__","currentCompilerServerActions","p","generateActionId","workers","actionBrowser","reactServerComponents","actionEntryDep","resolve","reject","entry","get","includeDependencies","call","addModuleTree","contextInfo","issuerLayer","err","module","failedEntry","succeedEntry","chunkGroup","mapping","action","json","node","edge","undefined","SERVER_REFERENCE_MANIFEST","sources","RawSource"],"sources":["../../../../src/build/webpack/plugins/flight-client-entry-plugin.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}