{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"tryToParsePath\", {\n  enumerable: true,\n  get: function () {\n    return tryToParsePath;\n  }\n});\nconst _pathtoregexp = require(\"next/dist/compiled/path-to-regexp\");\nconst _url = require(\"url\");\nconst _iserror = /*#__PURE__*/_interop_require_default(require(\"./is-error\"));\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * If there is an error show our error link but still show original error or\n * a formatted one if we can\n */\nfunction reportError({\n  route,\n  parsedPath\n}, err) {\n  let errMatches;\n  if ((0, _iserror.default)(err) && (errMatches = err.message.match(/at (\\d{0,})/))) {\n    const position = parseInt(errMatches[1], 10);\n    console.error(`\\nError parsing \\`${route}\\` ` + `https://nextjs.org/docs/messages/invalid-route-source\\n` + `Reason: ${err.message}\\n\\n` + `  ${parsedPath}\\n` + `  ${new Array(position).fill(\" \").join(\"\")}^\\n`);\n  } else {\n    console.error(`\\nError parsing ${route} https://nextjs.org/docs/messages/invalid-route-source`, err);\n  }\n}\nfunction tryToParsePath(route, options) {\n  const result = {\n    route,\n    parsedPath: route\n  };\n  try {\n    if (options == null ? void 0 : options.handleUrl) {\n      const parsed = (0, _url.parse)(route, true);\n      result.parsedPath = `${parsed.pathname}${parsed.hash || \"\"}`;\n    }\n    result.tokens = (0, _pathtoregexp.parse)(result.parsedPath);\n    result.regexStr = (0, _pathtoregexp.tokensToRegexp)(result.tokens).source;\n  } catch (err) {\n    reportError(result, err);\n    result.error = err;\n  }\n  return result;\n}","map":{"version":3,"names":["tryToParsePath","reportError","route","parsedPath","err","errMatches","_iserror","default","message","match","position","parseInt","console","error","Array","fill","join","options","result","handleUrl","parsed","_url","parse","pathname","hash","tokens","_pathtoregexp","regexStr","tokensToRegexp","source"],"sources":["../../src/lib/try-to-parse-path.ts"],"sourcesContent":[null],"mappings":";;;;;+BA2CgB;;;WAAAA,cAAA;;;8BA1CsB;qBACJ;+DACd;;;;;;AAUpB;;;;AAIA,SAASC,YAAY;EAAEC,KAAK;EAAEC;AAAU,CAAe,EAAEC,GAAQ;EAC/D,IAAIC,UAAA;EACJ,IAAI,IAAAC,QAAA,CAAAC,OAAO,EAACH,GAAA,MAASC,UAAA,GAAaD,GAAA,CAAII,OAAO,CAACC,KAAK,CAAC,cAAa,GAAI;IACnE,MAAMC,QAAA,GAAWC,QAAA,CAASN,UAAU,CAAC,EAAE,EAAE;IACzCO,OAAA,CAAQC,KAAK,CACV,qBAAoBX,KAAM,KAAI,GAC5B,yDAAwD,GACxD,WAAUE,GAAA,CAAII,OAAQ,MAAK,GAC3B,KAAIL,UAAW,IAAG,GAClB,KAAI,IAAIW,KAAA,CAAMJ,QAAA,EAAUK,IAAI,CAAC,KAAKC,IAAI,CAAC,GAAI,KAAI;EAEtD,OAAO;IACLJ,OAAA,CAAQC,KAAK,CACV,mBAAkBX,KAAM,wDAAuD,EAChFE,GAAA;EAEJ;AACF;AASO,SAASJ,eACdE,KAAa,EACbe,OAEC;EAED,MAAMC,MAAA,GAAsB;IAAEhB,KAAA;IAAOC,UAAA,EAAYD;EAAM;EACvD,IAAI;IACF,IAAIe,OAAA,oBAAAA,OAAA,CAASE,SAAS,EAAE;MACtB,MAAMC,MAAA,GAAS,IAAAC,IAAA,CAAAC,KAAQ,EAACpB,KAAA,EAAO;MAC/BgB,MAAA,CAAOf,UAAU,GAAI,GAAEiB,MAAA,CAAOG,QAAU,GAAEH,MAAA,CAAOI,IAAI,IAAI,EAAG,EAAC;IAC/D;IAEAN,MAAA,CAAOO,MAAM,GAAG,IAAAC,aAAA,CAAAJ,KAAK,EAACJ,MAAA,CAAOf,UAAU;IACvCe,MAAA,CAAOS,QAAQ,GAAG,IAAAD,aAAA,CAAAE,cAAc,EAACV,MAAA,CAAOO,MAAM,EAAEI,MAAM;EACxD,EAAE,OAAOzB,GAAA,EAAK;IACZH,WAAA,CAAYiB,MAAA,EAAQd,GAAA;IACpBc,MAAA,CAAOL,KAAK,GAAGT,GAAA;EACjB;EAEA,OAAOc,MAAA;AACT"},"metadata":{},"sourceType":"script","externalDependencies":[]}