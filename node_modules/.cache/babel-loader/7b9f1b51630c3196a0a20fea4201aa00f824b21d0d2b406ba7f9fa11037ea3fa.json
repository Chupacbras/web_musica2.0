{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"buildDataRoute\", {\n  enumerable: true,\n  get: function () {\n    return buildDataRoute;\n  }\n});\nconst _path = /*#__PURE__*/_interop_require_default(require(\"../../../shared/lib/isomorphic/path\"));\nconst _normalizepagepath = require(\"../../../shared/lib/page-path/normalize-page-path\");\nconst _isdynamic = require(\"../../../shared/lib/router/utils/is-dynamic\");\nconst _routeregex = require(\"../../../shared/lib/router/utils/route-regex\");\nconst _loadcustomroutes = require(\"../../../lib/load-custom-routes\");\nconst _escaperegexp = require(\"../../../shared/lib/escape-regexp\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction buildDataRoute(page, buildId) {\n  const pagePath = (0, _normalizepagepath.normalizePagePath)(page);\n  const dataRoute = _path.default.posix.join(\"/_next/data\", buildId, `${pagePath}.json`);\n  let dataRouteRegex;\n  let namedDataRouteRegex;\n  let routeKeys;\n  if ((0, _isdynamic.isDynamicRoute)(page)) {\n    const routeRegex = (0, _routeregex.getNamedRouteRegex)(dataRoute.replace(/\\.json$/, \"\"), true);\n    dataRouteRegex = (0, _loadcustomroutes.normalizeRouteRegex)(routeRegex.re.source.replace(/\\(\\?:\\\\\\/\\)\\?\\$$/, `\\\\.json$`));\n    namedDataRouteRegex = routeRegex.namedRegex.replace(/\\(\\?:\\/\\)\\?\\$$/, `\\\\.json$`);\n    routeKeys = routeRegex.routeKeys;\n  } else {\n    dataRouteRegex = (0, _loadcustomroutes.normalizeRouteRegex)(new RegExp(`^${_path.default.posix.join(\"/_next/data\", (0, _escaperegexp.escapeStringRegexp)(buildId), `${pagePath}.json`)}$`).source);\n  }\n  return {\n    page,\n    routeKeys,\n    dataRouteRegex,\n    namedDataRouteRegex\n  };\n}","map":{"version":3,"names":["buildDataRoute","page","buildId","pagePath","_normalizepagepath","normalizePagePath","dataRoute","_path","default","posix","join","dataRouteRegex","namedDataRouteRegex","routeKeys","_isdynamic","isDynamicRoute","routeRegex","_routeregex","getNamedRouteRegex","replace","_loadcustomroutes","normalizeRouteRegex","re","source","namedRegex","RegExp","_escaperegexp","escapeStringRegexp"],"sources":["../../../../src/server/lib/router-utils/build-data-route.ts"],"sourcesContent":[null],"mappings":";;;;;+BAOgB;;;WAAAA,cAAA;;;4DAPC;mCACiB;2BACH;4BACI;kCACC;8BACD;;;;;;AAE5B,SAASA,eAAeC,IAAY,EAAEC,OAAe;EAC1D,MAAMC,QAAA,GAAW,IAAAC,kBAAA,CAAAC,iBAAiB,EAACJ,IAAA;EACnC,MAAMK,SAAA,GAAYC,KAAA,CAAAC,OAAI,CAACC,KAAK,CAACC,IAAI,CAAC,eAAeR,OAAA,EAAU,GAAEC,QAAS,OAAM;EAE5E,IAAIQ,cAAA;EACJ,IAAIC,mBAAA;EACJ,IAAIC,SAAA;EAEJ,IAAI,IAAAC,UAAA,CAAAC,cAAc,EAACd,IAAA,GAAO;IACxB,MAAMe,UAAA,GAAa,IAAAC,WAAA,CAAAC,kBAAkB,EACnCZ,SAAA,CAAUa,OAAO,CAAC,WAAW,KAC7B;IAGFR,cAAA,GAAiB,IAAAS,iBAAA,CAAAC,mBAAmB,EAClCL,UAAA,CAAWM,EAAE,CAACC,MAAM,CAACJ,OAAO,CAAC,oBAAqB,UAAS;IAE7DP,mBAAA,GAAsBI,UAAA,CAAWQ,UAAU,CAAEL,OAAO,CAClD,kBACC,UAAS;IAEZN,SAAA,GAAYG,UAAA,CAAWH,SAAS;EAClC,OAAO;IACLF,cAAA,GAAiB,IAAAS,iBAAA,CAAAC,mBAAmB,EAClC,IAAII,MAAA,CACD,IAAGlB,KAAA,CAAAC,OAAI,CAACC,KAAK,CAACC,IAAI,CACjB,eACA,IAAAgB,aAAA,CAAAC,kBAAkB,EAACzB,OAAA,GAClB,GAAEC,QAAS,OAAM,CAClB,GAAE,EACJoB,MAAM;EAEZ;EAEA,OAAO;IACLtB,IAAA;IACAY,SAAA;IACAF,cAAA;IACAC;EACF;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}