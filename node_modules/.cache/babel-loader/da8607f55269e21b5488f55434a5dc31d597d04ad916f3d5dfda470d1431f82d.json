{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  collectMetadata: null,\n  resolveMetadataItems: null,\n  accumulateMetadata: null,\n  resolveMetadata: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  collectMetadata: function () {\n    return collectMetadata;\n  },\n  resolveMetadataItems: function () {\n    return resolveMetadataItems;\n  },\n  accumulateMetadata: function () {\n    return accumulateMetadata;\n  },\n  resolveMetadata: function () {\n    return resolveMetadata;\n  }\n});\nconst _defaultmetadata = require(\"./default-metadata\");\nconst _resolveopengraph = require(\"./resolvers/resolve-opengraph\");\nconst _resolvetitle = require(\"./resolvers/resolve-title\");\nconst _utils = require(\"./generate/utils\");\nconst _clientreference = require(\"../client-reference\");\nconst _appdirmodule = require(\"../../server/lib/app-dir-module\");\nconst _interopdefault = require(\"../interop-default\");\nconst _resolvebasics = require(\"./resolvers/resolve-basics\");\nconst _resolveicons = require(\"./resolvers/resolve-icons\");\nconst _tracer = require(\"../../server/lib/trace/tracer\");\nconst _constants = require(\"../../server/lib/trace/constants\");\nconst _constants1 = require(\"../../shared/lib/constants\");\nfunction hasIconsProperty(icons, prop) {\n  if (!icons) return false;\n  if (prop === \"icon\") {\n    // Detect if icons.icon will be presented, icons array and icons string will all be merged into icons.icon\n    return !!(typeof icons === \"string\" || icons instanceof URL || Array.isArray(icons) || prop in icons && icons[prop]);\n  } else {\n    // Detect if icons.apple will be presented, only icons.apple will be merged into icons.apple\n    return !!(typeof icons === \"object\" && prop in icons && icons[prop]);\n  }\n}\nfunction mergeStaticMetadata(source, target, staticFilesMetadata, metadataContext, titleTemplates) {\n  var _source_twitter, _source_openGraph;\n  if (!staticFilesMetadata) return;\n  const {\n    icon,\n    apple,\n    openGraph,\n    twitter,\n    manifest\n  } = staticFilesMetadata;\n  // file based metadata is specified and current level metadata icons is not specified\n  if (icon && !hasIconsProperty(source == null ? void 0 : source.icons, \"icon\") || apple && !hasIconsProperty(source == null ? void 0 : source.icons, \"apple\")) {\n    target.icons = {\n      icon: icon || [],\n      apple: apple || []\n    };\n  }\n  // file based metadata is specified and current level metadata twitter.images is not specified\n  if (twitter && !(source == null ? void 0 : (_source_twitter = source.twitter) == null ? void 0 : _source_twitter.hasOwnProperty(\"images\"))) {\n    const resolvedTwitter = (0, _resolveopengraph.resolveTwitter)({\n      ...target.twitter,\n      images: twitter\n    }, target.metadataBase, titleTemplates.twitter);\n    target.twitter = resolvedTwitter;\n  }\n  // file based metadata is specified and current level metadata openGraph.images is not specified\n  if (openGraph && !(source == null ? void 0 : (_source_openGraph = source.openGraph) == null ? void 0 : _source_openGraph.hasOwnProperty(\"images\"))) {\n    const resolvedOpenGraph = (0, _resolveopengraph.resolveOpenGraph)({\n      ...target.openGraph,\n      images: openGraph\n    }, target.metadataBase, metadataContext, titleTemplates.openGraph);\n    target.openGraph = resolvedOpenGraph;\n  }\n  if (manifest) {\n    target.manifest = manifest;\n  }\n  return target;\n}\n// Merge the source metadata into the resolved target metadata.\nfunction merge({\n  source,\n  target,\n  staticFilesMetadata,\n  titleTemplates,\n  metadataContext\n}) {\n  // If there's override metadata, prefer it otherwise fallback to the default metadata.\n  const metadataBase = typeof (source == null ? void 0 : source.metadataBase) !== \"undefined\" ? source.metadataBase : target.metadataBase;\n  for (const key_ in source) {\n    const key = key_;\n    switch (key) {\n      case \"title\":\n        {\n          target.title = (0, _resolvetitle.resolveTitle)(source.title, titleTemplates.title);\n          break;\n        }\n      case \"alternates\":\n        {\n          target.alternates = (0, _resolvebasics.resolveAlternates)(source.alternates, metadataBase, metadataContext);\n          break;\n        }\n      case \"openGraph\":\n        {\n          target.openGraph = (0, _resolveopengraph.resolveOpenGraph)(source.openGraph, metadataBase, metadataContext, titleTemplates.openGraph);\n          break;\n        }\n      case \"twitter\":\n        {\n          target.twitter = (0, _resolveopengraph.resolveTwitter)(source.twitter, metadataBase, titleTemplates.twitter);\n          break;\n        }\n      case \"verification\":\n        target.verification = (0, _resolvebasics.resolveVerification)(source.verification);\n        break;\n      case \"viewport\":\n        {\n          target.viewport = (0, _resolvebasics.resolveViewport)(source.viewport);\n          break;\n        }\n      case \"icons\":\n        {\n          target.icons = (0, _resolveicons.resolveIcons)(source.icons);\n          break;\n        }\n      case \"appleWebApp\":\n        target.appleWebApp = (0, _resolvebasics.resolveAppleWebApp)(source.appleWebApp);\n        break;\n      case \"appLinks\":\n        target.appLinks = (0, _resolvebasics.resolveAppLinks)(source.appLinks);\n        break;\n      case \"robots\":\n        {\n          target.robots = (0, _resolvebasics.resolveRobots)(source.robots);\n          break;\n        }\n      case \"themeColor\":\n        {\n          target.themeColor = (0, _resolvebasics.resolveThemeColor)(source.themeColor);\n          break;\n        }\n      case \"archives\":\n      case \"assets\":\n      case \"bookmarks\":\n      case \"keywords\":\n        {\n          target[key] = (0, _utils.resolveAsArrayOrUndefined)(source[key]);\n          break;\n        }\n      case \"authors\":\n        {\n          target[key] = (0, _utils.resolveAsArrayOrUndefined)(source.authors);\n          break;\n        }\n      case \"itunes\":\n        {\n          target[key] = (0, _resolvebasics.resolveItunes)(source.itunes, metadataBase, metadataContext);\n          break;\n        }\n      // directly assign fields that fallback to null\n      case \"applicationName\":\n      case \"description\":\n      case \"generator\":\n      case \"creator\":\n      case \"publisher\":\n      case \"category\":\n      case \"classification\":\n      case \"referrer\":\n      case \"colorScheme\":\n      case \"formatDetection\":\n      case \"manifest\":\n        // @ts-ignore TODO: support inferring\n        target[key] = source[key] || null;\n        break;\n      case \"other\":\n        target.other = Object.assign({}, target.other, source.other);\n        break;\n      case \"metadataBase\":\n        target.metadataBase = metadataBase;\n        break;\n      default:\n        break;\n    }\n  }\n  mergeStaticMetadata(source, target, staticFilesMetadata, metadataContext, titleTemplates);\n}\nasync function getDefinedMetadata(mod, props, tracingProps) {\n  // Layer is a client component, we just skip it. It can't have metadata exported.\n  // Return early to avoid accessing properties error for client references.\n  if ((0, _clientreference.isClientReference)(mod)) {\n    return null;\n  }\n  if (typeof mod.generateMetadata === \"function\") {\n    const {\n      route\n    } = tracingProps;\n    return parent => (0, _tracer.getTracer)().trace(_constants.ResolveMetadataSpan.generateMetadata, {\n      spanName: `generateMetadata ${route}`,\n      attributes: {\n        \"next.page\": route\n      }\n    }, () => mod.generateMetadata(props, parent));\n  }\n  return mod.metadata || null;\n}\nasync function collectStaticImagesFiles(metadata, props, type) {\n  var _this;\n  if (!(metadata == null ? void 0 : metadata[type])) return undefined;\n  const iconPromises = metadata[type].map(async imageModule => (0, _interopdefault.interopDefault)(await imageModule(props)));\n  return (iconPromises == null ? void 0 : iconPromises.length) > 0 ? (_this = await Promise.all(iconPromises)) == null ? void 0 : _this.flat() : undefined;\n}\nasync function resolveStaticMetadata(components, props) {\n  const {\n    metadata\n  } = components;\n  if (!metadata) return null;\n  const [icon, apple, openGraph, twitter] = await Promise.all([collectStaticImagesFiles(metadata, props, \"icon\"), collectStaticImagesFiles(metadata, props, \"apple\"), collectStaticImagesFiles(metadata, props, \"openGraph\"), collectStaticImagesFiles(metadata, props, \"twitter\")]);\n  const staticMetadata = {\n    icon,\n    apple,\n    openGraph,\n    twitter,\n    manifest: metadata.manifest\n  };\n  return staticMetadata;\n}\nasync function collectMetadata({\n  tree,\n  metadataItems,\n  errorMetadataItem,\n  props,\n  route,\n  errorConvention\n}) {\n  let mod;\n  let modType;\n  const hasErrorConventionComponent = Boolean(errorConvention && tree[2][errorConvention]);\n  if (errorConvention) {\n    mod = await (0, _appdirmodule.getComponentTypeModule)(tree, \"layout\");\n    modType = errorConvention;\n  } else {\n    [mod, modType] = await (0, _appdirmodule.getLayoutOrPageModule)(tree);\n  }\n  if (modType) {\n    route += `/${modType}`;\n  }\n  const staticFilesMetadata = await resolveStaticMetadata(tree[2], props);\n  const metadataExport = mod ? await getDefinedMetadata(mod, props, {\n    route\n  }) : null;\n  metadataItems.push([metadataExport, staticFilesMetadata]);\n  if (hasErrorConventionComponent && errorConvention) {\n    const errorMod = await (0, _appdirmodule.getComponentTypeModule)(tree, errorConvention);\n    const errorMetadataExport = errorMod ? await getDefinedMetadata(errorMod, props, {\n      route\n    }) : null;\n    errorMetadataItem[0] = errorMetadataExport;\n    errorMetadataItem[1] = staticFilesMetadata;\n  }\n}\nasync function resolveMetadataItems({\n  tree,\n  parentParams,\n  metadataItems,\n  errorMetadataItem,\n  treePrefix = [],\n  getDynamicParamFromSegment,\n  searchParams,\n  errorConvention\n}) {\n  const [segment, parallelRoutes, {\n    page\n  }] = tree;\n  const currentTreePrefix = [...treePrefix, segment];\n  const isPage = typeof page !== \"undefined\";\n  // Handle dynamic segment params.\n  const segmentParam = getDynamicParamFromSegment(segment);\n  /**\n  * Create object holding the parent params and current params\n  */\n  const currentParams =\n  // Handle null case where dynamic param is optional\n  segmentParam && segmentParam.value !== null ? {\n    ...parentParams,\n    [segmentParam.param]: segmentParam.value\n  } : parentParams;\n  const layerProps = {\n    params: currentParams,\n    ...(isPage && {\n      searchParams\n    })\n  };\n  await collectMetadata({\n    tree,\n    metadataItems,\n    errorMetadataItem,\n    errorConvention,\n    props: layerProps,\n    route: currentTreePrefix // __PAGE__ shouldn't be shown in a route\n    .filter(s => s !== _constants1.PAGE_SEGMENT_KEY).join(\"/\")\n  });\n  for (const key in parallelRoutes) {\n    const childTree = parallelRoutes[key];\n    await resolveMetadataItems({\n      tree: childTree,\n      metadataItems,\n      errorMetadataItem,\n      parentParams: currentParams,\n      treePrefix: currentTreePrefix,\n      searchParams,\n      getDynamicParamFromSegment,\n      errorConvention\n    });\n  }\n  if (Object.keys(parallelRoutes).length === 0 && errorConvention) {\n    // If there are no parallel routes, place error metadata as the last item.\n    // e.g. layout -> layout -> not-found\n    metadataItems.push(errorMetadataItem);\n  }\n  return metadataItems;\n}\nconst commonOgKeys = [\"title\", \"description\", \"images\"];\nfunction postProcessMetadata(metadata, titleTemplates) {\n  const {\n    openGraph,\n    twitter\n  } = metadata;\n  if (openGraph) {\n    let autoFillProps = {};\n    const hasTwTitle = twitter == null ? void 0 : twitter.title.absolute;\n    const hasTwDescription = twitter == null ? void 0 : twitter.description;\n    const hasTwImages = Boolean((twitter == null ? void 0 : twitter.hasOwnProperty(\"images\")) && twitter.images);\n    if (!hasTwTitle) autoFillProps.title = openGraph.title;\n    if (!hasTwDescription) autoFillProps.description = openGraph.description;\n    if (!hasTwImages) autoFillProps.images = openGraph.images;\n    if (Object.keys(autoFillProps).length > 0) {\n      const partialTwitter = (0, _resolveopengraph.resolveTwitter)(autoFillProps, metadata.metadataBase, titleTemplates.twitter);\n      if (metadata.twitter) {\n        metadata.twitter = Object.assign({}, metadata.twitter, {\n          ...(!hasTwTitle && {\n            title: partialTwitter == null ? void 0 : partialTwitter.title\n          }),\n          ...(!hasTwDescription && {\n            description: partialTwitter == null ? void 0 : partialTwitter.description\n          }),\n          ...(!hasTwImages && {\n            images: partialTwitter == null ? void 0 : partialTwitter.images\n          })\n        });\n      } else {\n        metadata.twitter = partialTwitter;\n      }\n    }\n  }\n  return metadata;\n}\nasync function accumulateMetadata(metadataItems, metadataContext) {\n  const resolvedMetadata = (0, _defaultmetadata.createDefaultMetadata)();\n  const resolvers = [];\n  const generateMetadataResults = [];\n  let titleTemplates = {\n    title: null,\n    twitter: null,\n    openGraph: null\n  };\n  // Loop over all metadata items again, merging synchronously any static object exports,\n  // awaiting any static promise exports, and resolving parent metadata and awaiting any generated metadata\n  let resolvingIndex = 0;\n  for (let i = 0; i < metadataItems.length; i++) {\n    const [metadataExport, staticFilesMetadata] = metadataItems[i];\n    let metadata = null;\n    if (typeof metadataExport === \"function\") {\n      if (!resolvers.length) {\n        for (let j = i; j < metadataItems.length; j++) {\n          const [preloadMetadataExport] = metadataItems[j];\n          // call each `generateMetadata function concurrently and stash their resolver\n          if (typeof preloadMetadataExport === \"function\") {\n            generateMetadataResults.push(preloadMetadataExport(new Promise(resolve => {\n              resolvers.push(resolve);\n            })));\n          }\n        }\n      }\n      const resolveParent = resolvers[resolvingIndex];\n      const generatedMetadata = generateMetadataResults[resolvingIndex++];\n      // In dev we clone and freeze to prevent relying on mutating resolvedMetadata directly.\n      // In prod we just pass resolvedMetadata through without any copying.\n      const currentResolvedMetadata = process.env.NODE_ENV === \"development\" ? Object.freeze(require(\"./clone-metadata\").cloneMetadata(resolvedMetadata)) : resolvedMetadata;\n      // This resolve should unblock the generateMetadata function if it awaited the parent\n      // argument. If it didn't await the parent argument it might already have a value since it was\n      // called concurrently. Regardless we await the return value before continuing on to the next layer\n      resolveParent(currentResolvedMetadata);\n      metadata = generatedMetadata instanceof Promise ? await generatedMetadata : generatedMetadata;\n    } else if (metadataExport !== null && typeof metadataExport === \"object\") {\n      // This metadataExport is the object form\n      metadata = metadataExport;\n    }\n    merge({\n      metadataContext,\n      target: resolvedMetadata,\n      source: metadata,\n      staticFilesMetadata,\n      titleTemplates\n    });\n    // If the layout is the same layer with page, skip the leaf layout and leaf page\n    // The leaf layout and page are the last two items\n    if (i < metadataItems.length - 2) {\n      var _resolvedMetadata_title, _resolvedMetadata_openGraph, _resolvedMetadata_twitter;\n      titleTemplates = {\n        title: ((_resolvedMetadata_title = resolvedMetadata.title) == null ? void 0 : _resolvedMetadata_title.template) || null,\n        openGraph: ((_resolvedMetadata_openGraph = resolvedMetadata.openGraph) == null ? void 0 : _resolvedMetadata_openGraph.title.template) || null,\n        twitter: ((_resolvedMetadata_twitter = resolvedMetadata.twitter) == null ? void 0 : _resolvedMetadata_twitter.title.template) || null\n      };\n    }\n  }\n  return postProcessMetadata(resolvedMetadata, titleTemplates);\n}\nasync function resolveMetadata({\n  tree,\n  parentParams,\n  metadataItems,\n  errorMetadataItem,\n  getDynamicParamFromSegment,\n  searchParams,\n  errorConvention,\n  metadataContext\n}) {\n  const resolvedMetadataItems = await resolveMetadataItems({\n    tree,\n    parentParams,\n    metadataItems,\n    errorMetadataItem,\n    getDynamicParamFromSegment,\n    searchParams,\n    errorConvention\n  });\n  let metadata = (0, _defaultmetadata.createDefaultMetadata)();\n  let error;\n  try {\n    metadata = await accumulateMetadata(resolvedMetadataItems, metadataContext);\n  } catch (err) {\n    error = err;\n  }\n  return [metadata, error];\n}","map":{"version":3,"names":["collectMetadata","resolveMetadataItems","accumulateMetadata","resolveMetadata","hasIconsProperty","icons","prop","URL","Array","isArray","mergeStaticMetadata","source","target","staticFilesMetadata","metadataContext","titleTemplates","_source_twitter","_source_openGraph","icon","apple","openGraph","twitter","manifest","hasOwnProperty","resolvedTwitter","_resolveopengraph","resolveTwitter","images","metadataBase","resolvedOpenGraph","resolveOpenGraph","merge","key_","key","title","_resolvetitle","resolveTitle","alternates","_resolvebasics","resolveAlternates","verification","resolveVerification","viewport","resolveViewport","_resolveicons","resolveIcons","appleWebApp","resolveAppleWebApp","appLinks","resolveAppLinks","robots","resolveRobots","themeColor","resolveThemeColor","_utils","resolveAsArrayOrUndefined","authors","resolveItunes","itunes","other","Object","assign","getDefinedMetadata","mod","props","tracingProps","_clientreference","isClientReference","generateMetadata","route","parent","_tracer","getTracer","trace","_constants","ResolveMetadataSpan","spanName","attributes","metadata","collectStaticImagesFiles","type","_this","undefined","iconPromises","map","imageModule","_interopdefault","interopDefault","length","Promise","all","flat","resolveStaticMetadata","components","staticMetadata","tree","metadataItems","errorMetadataItem","errorConvention","modType","hasErrorConventionComponent","Boolean","_appdirmodule","getComponentTypeModule","getLayoutOrPageModule","metadataExport","push","errorMod","errorMetadataExport","parentParams","treePrefix","getDynamicParamFromSegment","searchParams","segment","parallelRoutes","page","currentTreePrefix","isPage","segmentParam","currentParams","value","param","layerProps","params","filter","s","_constants1","PAGE_SEGMENT_KEY","join","childTree","keys","commonOgKeys","postProcessMetadata","autoFillProps","hasTwTitle","absolute","hasTwDescription","description","hasTwImages","partialTwitter","resolvedMetadata","_defaultmetadata","createDefaultMetadata","resolvers","generateMetadataResults","resolvingIndex","i","j","preloadMetadataExport","resolve","resolveParent","generatedMetadata","currentResolvedMetadata","process","env","NODE_ENV","freeze","require","cloneMetadata","_resolvedMetadata_title","_resolvedMetadata_openGraph","_resolvedMetadata_twitter","template","resolvedMetadataItems","error","err"],"sources":["../../../src/lib/metadata/resolve-metadata.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}