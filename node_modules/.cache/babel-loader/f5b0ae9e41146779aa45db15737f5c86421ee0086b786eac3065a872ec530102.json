{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"verifyAndLint\", {\n  enumerable: true,\n  get: function () {\n    return verifyAndLint;\n  }\n});\nconst _chalk = /*#__PURE__*/_interop_require_default(require(\"next/dist/compiled/chalk\"));\nconst _jestworker = require(\"next/dist/compiled/jest-worker\");\nconst _fs = require(\"fs\");\nconst _path = require(\"path\");\nconst _constants = require(\"./constants\");\nconst _events = require(\"../telemetry/events\");\nconst _compileerror = require(\"./compile-error\");\nconst _iserror = /*#__PURE__*/_interop_require_default(require(\"./is-error\"));\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nasync function verifyAndLint(dir, cacheLocation, configLintDirs, enableWorkerThreads, telemetry) {\n  try {\n    const lintWorkers = new _jestworker.Worker(require.resolve(\"./eslint/runLintCheck\"), {\n      numWorkers: 1,\n      enableWorkerThreads,\n      maxRetries: 0\n    });\n    lintWorkers.getStdout().pipe(process.stdout);\n    lintWorkers.getStderr().pipe(process.stderr);\n    const lintDirs = (configLintDirs ?? _constants.ESLINT_DEFAULT_DIRS).reduce((res, d) => {\n      const currDir = (0, _path.join)(dir, d);\n      if (!(0, _fs.existsSync)(currDir)) return res;\n      res.push(currDir);\n      return res;\n    }, []);\n    const lintResults = await lintWorkers.runLintCheck(dir, lintDirs, {\n      lintDuringBuild: true,\n      eslintOptions: {\n        cacheLocation\n      }\n    });\n    const lintOutput = typeof lintResults === \"string\" ? lintResults : lintResults == null ? void 0 : lintResults.output;\n    if (typeof lintResults !== \"string\" && (lintResults == null ? void 0 : lintResults.eventInfo)) {\n      telemetry.record((0, _events.eventLintCheckCompleted)({\n        ...lintResults.eventInfo,\n        buildLint: true\n      }));\n    }\n    if (typeof lintResults !== \"string\" && (lintResults == null ? void 0 : lintResults.isError) && lintOutput) {\n      await telemetry.flush();\n      throw new _compileerror.CompileError(lintOutput);\n    }\n    if (lintOutput) {\n      console.log(lintOutput);\n    }\n    lintWorkers.end();\n  } catch (err) {\n    if ((0, _iserror.default)(err)) {\n      if (err.type === \"CompileError\" || err instanceof _compileerror.CompileError) {\n        console.error(_chalk.default.red(\"\\nFailed to compile.\"));\n        console.error(err.message);\n        process.exit(1);\n      } else if (err.type === \"FatalError\") {\n        console.error(err.message);\n        process.exit(1);\n      }\n    }\n    throw err;\n  }\n}","map":{"version":3,"names":["verifyAndLint","dir","cacheLocation","configLintDirs","enableWorkerThreads","telemetry","lintWorkers","_jestworker","Worker","require","resolve","numWorkers","maxRetries","getStdout","pipe","process","stdout","getStderr","stderr","lintDirs","_constants","ESLINT_DEFAULT_DIRS","reduce","res","d","currDir","_path","join","_fs","existsSync","push","lintResults","runLintCheck","lintDuringBuild","eslintOptions","lintOutput","output","eventInfo","record","_events","eventLintCheckCompleted","buildLint","isError","flush","_compileerror","CompileError","console","log","end","err","_iserror","default","type","error","_chalk","red","message","exit"],"sources":["../../src/lib/verifyAndLint.ts"],"sourcesContent":[null],"mappings":";;;;;+BAUsB;;;WAAAA,aAAA;;;6DAVJ;4BACK;oBACI;sBACN;2BACe;wBAEI;8BACX;+DACT;;;;;;AAEb,eAAeA,cACpBC,GAAW,EACXC,aAAqB,EACrBC,cAAoC,EACpCC,mBAAwC,EACxCC,SAAoB;EAEpB,IAAI;IACF,MAAMC,WAAA,GAAc,IAAIC,WAAA,CAAAC,MAAM,CAACC,OAAA,CAAQC,OAAO,CAAC,0BAA0B;MACvEC,UAAA,EAAY;MACZP,mBAAA;MACAQ,UAAA,EAAY;IACd;IAIAN,WAAA,CAAYO,SAAS,GAAGC,IAAI,CAACC,OAAA,CAAQC,MAAM;IAC3CV,WAAA,CAAYW,SAAS,GAAGH,IAAI,CAACC,OAAA,CAAQG,MAAM;IAE3C,MAAMC,QAAA,GAAW,CAAChB,cAAA,IAAkBiB,UAAA,CAAAC,mBAAmB,EAAEC,MAAM,CAC7D,CAACC,GAAA,EAAeC,CAAA;MACd,MAAMC,OAAA,GAAU,IAAAC,KAAA,CAAAC,IAAI,EAAC1B,GAAA,EAAKuB,CAAA;MAC1B,IAAI,CAAC,IAAAI,GAAA,CAAAC,UAAU,EAACJ,OAAA,GAAU,OAAOF,GAAA;MACjCA,GAAA,CAAIO,IAAI,CAACL,OAAA;MACT,OAAOF,GAAA;IACT,GACA,EAAE;IAGJ,MAAMQ,WAAA,GAAc,MAAMzB,WAAA,CAAY0B,YAAY,CAAC/B,GAAA,EAAKkB,QAAA,EAAU;MAChEc,eAAA,EAAiB;MACjBC,aAAA,EAAe;QACbhC;MACF;IACF;IACA,MAAMiC,UAAA,GACJ,OAAOJ,WAAA,KAAgB,WAAWA,WAAA,GAAcA,WAAA,oBAAAA,WAAA,CAAaK,MAAM;IAErE,IAAI,OAAOL,WAAA,KAAgB,aAAYA,WAAA,oBAAAA,WAAA,CAAaM,SAAS,GAAE;MAC7DhC,SAAA,CAAUiC,MAAM,CACd,IAAAC,OAAA,CAAAC,uBAAuB,EAAC;QACtB,GAAGT,WAAA,CAAYM,SAAS;QACxBI,SAAA,EAAW;MACb;IAEJ;IAEA,IAAI,OAAOV,WAAA,KAAgB,aAAYA,WAAA,oBAAAA,WAAA,CAAaW,OAAO,KAAIP,UAAA,EAAY;MACzE,MAAM9B,SAAA,CAAUsC,KAAK;MACrB,MAAM,IAAIC,aAAA,CAAAC,YAAY,CAACV,UAAA;IACzB;IAEA,IAAIA,UAAA,EAAY;MACdW,OAAA,CAAQC,GAAG,CAACZ,UAAA;IACd;IAEA7B,WAAA,CAAY0C,GAAG;EACjB,EAAE,OAAOC,GAAA,EAAK;IACZ,IAAI,IAAAC,QAAA,CAAAC,OAAO,EAACF,GAAA,GAAM;MAChB,IAAIA,GAAA,CAAIG,IAAI,KAAK,kBAAkBH,GAAA,YAAeL,aAAA,CAAAC,YAAY,EAAE;QAC9DC,OAAA,CAAQO,KAAK,CAACC,MAAA,CAAAH,OAAK,CAACI,GAAG,CAAC;QACxBT,OAAA,CAAQO,KAAK,CAACJ,GAAA,CAAIO,OAAO;QACzBzC,OAAA,CAAQ0C,IAAI,CAAC;MACf,OAAO,IAAIR,GAAA,CAAIG,IAAI,KAAK,cAAc;QACpCN,OAAA,CAAQO,KAAK,CAACJ,GAAA,CAAIO,OAAO;QACzBzC,OAAA,CAAQ0C,IAAI,CAAC;MACf;IACF;IACA,MAAMR,GAAA;EACR;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}