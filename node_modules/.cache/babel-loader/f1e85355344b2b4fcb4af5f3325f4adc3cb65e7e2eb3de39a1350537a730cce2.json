{"ast":null,"code":"// minimal implementation MurmurHash2 hash function\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"BloomFilter\", {\n  enumerable: true,\n  get: function () {\n    return BloomFilter;\n  }\n});\nfunction murmurhash2(str) {\n  let h = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    h = Math.imul(h ^ c, 0x5bd1e995);\n    h ^= h >>> 13;\n    h = Math.imul(h, 0x5bd1e995);\n  }\n  return h >>> 0;\n}\nclass BloomFilter {\n  static from(items, errorRate) {\n    if (errorRate === void 0) errorRate = 0.01;\n    const filter = new BloomFilter(items.length, errorRate);\n    for (const item of items) {\n      filter.add(item);\n    }\n    return filter;\n  }\n  export() {\n    const data = {\n      numItems: this.numItems,\n      errorRate: this.errorRate,\n      numBits: this.numBits,\n      numHashes: this.numHashes,\n      bitArray: this.bitArray\n    };\n    if (typeof window === \"undefined\" && process.env.NEXT_RUNTIME !== \"edge\") {\n      if (this.errorRate < 0.01) {\n        const filterData = JSON.stringify(data);\n        const gzipSize = require(\"next/dist/compiled/gzip-size\").sync(filterData);\n        if (gzipSize > 1024) {\n          console.warn(\"Creating filter with error rate less than 1% (0.01) can increase the size dramatically proceed with caution. Received error rate \" + this.errorRate + \" resulted in size \" + filterData.length + \" bytes, \" + gzipSize + \" bytes (gzip)\");\n        }\n      }\n    }\n    return data;\n  }\n  import(data) {\n    this.numItems = data.numItems;\n    this.errorRate = data.errorRate;\n    this.numBits = data.numBits;\n    this.numHashes = data.numHashes;\n    this.bitArray = data.bitArray;\n  }\n  add(item) {\n    const hashValues = this.getHashValues(item);\n    hashValues.forEach(hash => {\n      this.bitArray[hash] = 1;\n    });\n  }\n  contains(item) {\n    const hashValues = this.getHashValues(item);\n    return hashValues.every(hash => this.bitArray[hash]);\n  }\n  getHashValues(item) {\n    const hashValues = [];\n    for (let i = 1; i <= this.numHashes; i++) {\n      const hash = murmurhash2(\"\" + item + i) % this.numBits;\n      hashValues.push(hash);\n    }\n    return hashValues;\n  }\n  constructor(numItems, errorRate) {\n    this.numItems = numItems;\n    this.errorRate = errorRate;\n    this.numBits = Math.ceil(-(numItems * Math.log(errorRate)) / (Math.log(2) * Math.log(2)));\n    this.numHashes = Math.ceil(this.numBits / numItems * Math.log(2));\n    this.bitArray = new Array(this.numBits).fill(0);\n  }\n}","map":{"version":3,"names":["BloomFilter","murmurhash2","str","h","i","length","c","charCodeAt","Math","imul","from","items","errorRate","filter","item","add","export","data","numItems","numBits","numHashes","bitArray","window","process","env","NEXT_RUNTIME","filterData","JSON","stringify","gzipSize","require","sync","console","warn","import","hashValues","getHashValues","forEach","hash","contains","every","push","constructor","ceil","log","Array","fill"],"sources":["../../../src/shared/lib/bloom-filter.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}