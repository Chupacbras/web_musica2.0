{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGoogleFontsUrl = void 0;\nconst sort_fonts_variant_values_1 = require(\"./sort-fonts-variant-values\");\n/**\n * Generate the Google Fonts URL given the requested weight(s), style(s) and additional variable axes\n */\nfunction getGoogleFontsUrl(fontFamily, axes, display) {\n  var _a, _b;\n  // Variants are all combinations of weight and style, each variant will result in a separate font file\n  const variants = [];\n  if (axes.wght) {\n    for (const wght of axes.wght) {\n      if (!axes.ital) {\n        variants.push([['wght', wght], ...((_a = axes.variableAxes) !== null && _a !== void 0 ? _a : [])]);\n      } else {\n        for (const ital of axes.ital) {\n          variants.push([['ital', ital], ['wght', wght], ...((_b = axes.variableAxes) !== null && _b !== void 0 ? _b : [])]);\n        }\n      }\n    }\n  } else if (axes.variableAxes) {\n    // Variable fonts might not have a range of weights, just add optional variable axes in that case\n    variants.push([...axes.variableAxes]);\n  }\n  // Google api requires the axes to be sorted, starting with lowercase words\n  if (axes.variableAxes) {\n    variants.forEach(variant => {\n      variant.sort(([a], [b]) => {\n        const aIsLowercase = a.charCodeAt(0) > 96;\n        const bIsLowercase = b.charCodeAt(0) > 96;\n        if (aIsLowercase && !bIsLowercase) return -1;\n        if (bIsLowercase && !aIsLowercase) return 1;\n        return a > b ? 1 : -1;\n      });\n    });\n  }\n  let url = `https://fonts.googleapis.com/css2?family=${fontFamily.replace(/ /g, '+')}`;\n  if (variants.length > 0) {\n    url = `${url}:${variants[0].map(([key]) => key).join(',')}@${variants.map(variant => variant.map(([, val]) => val).join(',')).sort(sort_fonts_variant_values_1.sortFontsVariantValues).join(';')}`;\n  }\n  url = `${url}&display=${display}`;\n  return url;\n}\nexports.getGoogleFontsUrl = getGoogleFontsUrl;","map":{"version":3,"names":["Object","defineProperty","exports","value","getGoogleFontsUrl","sort_fonts_variant_values_1","require","fontFamily","axes","display","_a","_b","variants","wght","ital","push","variableAxes","forEach","variant","sort","a","b","aIsLowercase","charCodeAt","bIsLowercase","url","replace","length","map","key","join","val","sortFontsVariantValues"],"sources":["/Users/albertformatger/Documents/GitHub/web_musica/node_modules/next/dist/compiled/@next/font/dist/google/get-google-fonts-url.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getGoogleFontsUrl = void 0;\nconst sort_fonts_variant_values_1 = require(\"./sort-fonts-variant-values\");\n/**\n * Generate the Google Fonts URL given the requested weight(s), style(s) and additional variable axes\n */\nfunction getGoogleFontsUrl(fontFamily, axes, display) {\n    var _a, _b;\n    // Variants are all combinations of weight and style, each variant will result in a separate font file\n    const variants = [];\n    if (axes.wght) {\n        for (const wght of axes.wght) {\n            if (!axes.ital) {\n                variants.push([['wght', wght], ...((_a = axes.variableAxes) !== null && _a !== void 0 ? _a : [])]);\n            }\n            else {\n                for (const ital of axes.ital) {\n                    variants.push([\n                        ['ital', ital],\n                        ['wght', wght],\n                        ...((_b = axes.variableAxes) !== null && _b !== void 0 ? _b : []),\n                    ]);\n                }\n            }\n        }\n    }\n    else if (axes.variableAxes) {\n        // Variable fonts might not have a range of weights, just add optional variable axes in that case\n        variants.push([...axes.variableAxes]);\n    }\n    // Google api requires the axes to be sorted, starting with lowercase words\n    if (axes.variableAxes) {\n        variants.forEach((variant) => {\n            variant.sort(([a], [b]) => {\n                const aIsLowercase = a.charCodeAt(0) > 96;\n                const bIsLowercase = b.charCodeAt(0) > 96;\n                if (aIsLowercase && !bIsLowercase)\n                    return -1;\n                if (bIsLowercase && !aIsLowercase)\n                    return 1;\n                return a > b ? 1 : -1;\n            });\n        });\n    }\n    let url = `https://fonts.googleapis.com/css2?family=${fontFamily.replace(/ /g, '+')}`;\n    if (variants.length > 0) {\n        url = `${url}:${variants[0].map(([key]) => key).join(',')}@${variants\n            .map((variant) => variant.map(([, val]) => val).join(','))\n            .sort(sort_fonts_variant_values_1.sortFontsVariantValues)\n            .join(';')}`;\n    }\n    url = `${url}&display=${display}`;\n    return url;\n}\nexports.getGoogleFontsUrl = getGoogleFontsUrl;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}