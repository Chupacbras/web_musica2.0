{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"getNextFontLoader\", {\n  enumerable: true,\n  get: function () {\n    return getNextFontLoader;\n  }\n});\nconst _client = require(\"./client\");\nconst _fileresolve = require(\"./file-resolve\");\nfunction getNextFontLoader(ctx, postcss, fontLoaderPath) {\n  const loaders = [];\n  if (ctx.isClient) {\n    // Add appropriate development mode or production mode style\n    // loader\n    loaders.push((0, _client.getClientStyleLoader)({\n      hasAppDir: ctx.hasAppDir,\n      isDevelopment: ctx.isDevelopment,\n      assetPrefix: ctx.assetPrefix\n    }));\n  }\n  loaders.push({\n    loader: require.resolve(\"../../../../loaders/css-loader/src\"),\n    options: {\n      postcss,\n      importLoaders: 1,\n      // Use CJS mode for backwards compatibility:\n      esModule: false,\n      url: (url, resourcePath) => (0, _fileresolve.cssFileResolve)(url, resourcePath, ctx.experimental.urlImports),\n      import: (url, _, resourcePath) => (0, _fileresolve.cssFileResolve)(url, resourcePath, ctx.experimental.urlImports),\n      modules: {\n        // Do not transform class names (CJS mode backwards compatibility):\n        exportLocalsConvention: \"asIs\",\n        // Server-side (Node.js) rendering support:\n        exportOnlyLocals: ctx.isServer,\n        // Disallow global style exports so we can code-split CSS and\n        // not worry about loading order.\n        mode: \"pure\",\n        getLocalIdent: (_context, _localIdentName, exportName, _options, meta) => {\n          // hash from next-font-loader\n          return `__${exportName}_${meta.fontFamilyHash}`;\n        }\n      },\n      fontLoader: true\n    }\n  });\n  loaders.push({\n    loader: \"next-font-loader\",\n    options: {\n      isDev: ctx.isDevelopment,\n      isServer: ctx.isServer,\n      assetPrefix: ctx.assetPrefix,\n      fontLoaderPath,\n      postcss\n    }\n  });\n  return loaders;\n}","map":{"version":3,"names":["getNextFontLoader","ctx","postcss","fontLoaderPath","loaders","isClient","push","_client","getClientStyleLoader","hasAppDir","isDevelopment","assetPrefix","loader","require","resolve","options","importLoaders","esModule","url","resourcePath","_fileresolve","cssFileResolve","experimental","urlImports","import","_","modules","exportLocalsConvention","exportOnlyLocals","isServer","mode","getLocalIdent","_context","_localIdentName","exportName","_options","meta","fontFamilyHash","fontLoader","isDev"],"sources":["../../../../../../../src/build/webpack/config/blocks/css/loaders/next-font.ts"],"sourcesContent":[null],"mappings":";;;;;+BAKgB;;;WAAAA,iBAAA;;;wBAHqB;6BACN;AAExB,SAASA,kBACdC,GAAyB,EACzBC,OAAY,EACZC,cAAsB;EAEtB,MAAMC,OAAA,GAAoC,EAAE;EAE5C,IAAIH,GAAA,CAAII,QAAQ,EAAE;IAChB;IACA;IACAD,OAAA,CAAQE,IAAI,CACV,IAAAC,OAAA,CAAAC,oBAAoB,EAAC;MACnBC,SAAA,EAAWR,GAAA,CAAIQ,SAAS;MACxBC,aAAA,EAAeT,GAAA,CAAIS,aAAa;MAChCC,WAAA,EAAaV,GAAA,CAAIU;IACnB;EAEJ;EAEAP,OAAA,CAAQE,IAAI,CAAC;IACXM,MAAA,EAAQC,OAAA,CAAQC,OAAO,CAAC;IACxBC,OAAA,EAAS;MACPb,OAAA;MACAc,aAAA,EAAe;MACf;MACAC,QAAA,EAAU;MACVC,GAAA,EAAKA,CAACA,GAAA,EAAaC,YAAA,KACjB,IAAAC,YAAA,CAAAC,cAAc,EAACH,GAAA,EAAKC,YAAA,EAAclB,GAAA,CAAIqB,YAAY,CAACC,UAAU;MAC/DC,MAAA,EAAQA,CAACN,GAAA,EAAaO,CAAA,EAAQN,YAAA,KAC5B,IAAAC,YAAA,CAAAC,cAAc,EAACH,GAAA,EAAKC,YAAA,EAAclB,GAAA,CAAIqB,YAAY,CAACC,UAAU;MAC/DG,OAAA,EAAS;QACP;QACAC,sBAAA,EAAwB;QACxB;QACAC,gBAAA,EAAkB3B,GAAA,CAAI4B,QAAQ;QAC9B;QACA;QACAC,IAAA,EAAM;QACNC,aAAA,EAAeA,CACbC,QAAA,EACAC,eAAA,EACAC,UAAA,EACAC,QAAA,EACAC,IAAA;UAEA;UACA,OAAQ,KAAIF,UAAW,IAAGE,IAAA,CAAKC,cAAe,EAAC;QACjD;MACF;MACAC,UAAA,EAAY;IACd;EACF;EAEAlC,OAAA,CAAQE,IAAI,CAAC;IACXM,MAAA,EAAQ;IACRG,OAAA,EAAS;MACPwB,KAAA,EAAOtC,GAAA,CAAIS,aAAa;MACxBmB,QAAA,EAAU5B,GAAA,CAAI4B,QAAQ;MACtBlB,WAAA,EAAaV,GAAA,CAAIU,WAAW;MAC5BR,cAAA;MACAD;IACF;EACF;EAEA,OAAOE,OAAA;AACT"},"metadata":{},"sourceType":"script","externalDependencies":[]}