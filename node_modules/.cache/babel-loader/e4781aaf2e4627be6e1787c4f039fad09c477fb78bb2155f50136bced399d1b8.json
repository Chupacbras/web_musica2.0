{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  signalFromNodeResponse: null,\n  NextRequestAdapter: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  signalFromNodeResponse: function () {\n    return signalFromNodeResponse;\n  },\n  NextRequestAdapter: function () {\n    return NextRequestAdapter;\n  }\n});\nconst _requestmeta = require(\"../../../request-meta\");\nconst _utils = require(\"../../utils\");\nconst _request = require(\"../request\");\nfunction signalFromNodeResponse(response) {\n  const {\n    errored,\n    destroyed\n  } = response;\n  if (errored || destroyed) return AbortSignal.abort(errored);\n  const controller = new AbortController();\n  // If `finish` fires first, then `res.end()` has been called and the close is\n  // just us finishing the stream on our side. If `close` fires first, then we\n  // know the client disconnected before we finished.\n  function onClose() {\n    controller.abort();\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    response.off(\"finish\", onFinish);\n  }\n  function onFinish() {\n    response.off(\"close\", onClose);\n  }\n  response.once(\"close\", onClose);\n  response.once(\"finish\", onFinish);\n  return controller.signal;\n}\nclass NextRequestAdapter {\n  static fromBaseNextRequest(request, signal) {\n    // TODO: look at refining this check\n    if (\"request\" in request && request.request) {\n      return NextRequestAdapter.fromWebNextRequest(request);\n    }\n    return NextRequestAdapter.fromNodeNextRequest(request, signal);\n  }\n  static fromNodeNextRequest(request, signal) {\n    // HEAD and GET requests can not have a body.\n    let body = null;\n    if (request.method !== \"GET\" && request.method !== \"HEAD\" && request.body) {\n      // @ts-expect-error - this is handled by undici, when streams/web land use it instead\n      body = request.body;\n    }\n    let url;\n    if (request.url.startsWith(\"http\")) {\n      url = new URL(request.url);\n    } else {\n      // Grab the full URL from the request metadata.\n      const base = (0, _requestmeta.getRequestMeta)(request, \"__NEXT_INIT_URL\");\n      if (!base || !base.startsWith(\"http\")) {\n        // Because the URL construction relies on the fact that the URL provided\n        // is absolute, we need to provide a base URL. We can't use the request\n        // URL because it's relative, so we use a dummy URL instead.\n        url = new URL(request.url, \"http://n\");\n      } else {\n        url = new URL(request.url, base);\n      }\n    }\n    return new _request.NextRequest(url, {\n      body,\n      method: request.method,\n      headers: (0, _utils.fromNodeOutgoingHttpHeaders)(request.headers),\n      // @ts-expect-error - see https://github.com/whatwg/fetch/pull/1457\n      duplex: \"half\",\n      signal\n    });\n  }\n  static fromWebNextRequest(request) {\n    // HEAD and GET requests can not have a body.\n    let body = null;\n    if (request.method !== \"GET\" && request.method !== \"HEAD\") {\n      body = request.body;\n    }\n    return new _request.NextRequest(request.url, {\n      body,\n      method: request.method,\n      headers: (0, _utils.fromNodeOutgoingHttpHeaders)(request.headers),\n      // @ts-expect-error - see https://github.com/whatwg/fetch/pull/1457\n      duplex: \"half\",\n      signal: request.request.signal\n    });\n  }\n}","map":{"version":3,"names":["signalFromNodeResponse","NextRequestAdapter","response","errored","destroyed","AbortSignal","abort","controller","AbortController","onClose","off","onFinish","once","signal","fromBaseNextRequest","request","fromWebNextRequest","fromNodeNextRequest","body","method","url","startsWith","URL","base","_requestmeta","getRequestMeta","_request","NextRequest","headers","_utils","fromNodeOutgoingHttpHeaders","duplex"],"sources":["../../../../../src/server/web/spec-extension/adapters/next-request.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;EAiBgBA,sBAAsB,WAAAA,CAAA;WAAtBA,sBAAA;;EAsBHC,kBAAkB,WAAAA,CAAA;WAAlBA,kBAAA;;;6BAlCkB;uBACa;yBAChB;AAUrB,SAASD,uBAAuBE,QAAkB;EACvD,MAAM;IAAEC,OAAO;IAAEC;EAAS,CAAE,GAAGF,QAAA;EAC/B,IAAIC,OAAA,IAAWC,SAAA,EAAW,OAAOC,WAAA,CAAYC,KAAK,CAACH,OAAA;EAEnD,MAAMI,UAAA,GAAa,IAAIC,eAAA;EACvB;EACA;EACA;EACA,SAASC,QAAA;IACPF,UAAA,CAAWD,KAAK;IAChB;IACAJ,QAAA,CAASQ,GAAG,CAAC,UAAUC,QAAA;EACzB;EACA,SAASA,SAAA;IACPT,QAAA,CAASQ,GAAG,CAAC,SAASD,OAAA;EACxB;EACAP,QAAA,CAASU,IAAI,CAAC,SAASH,OAAA;EACvBP,QAAA,CAASU,IAAI,CAAC,UAAUD,QAAA;EAExB,OAAOJ,UAAA,CAAWM,MAAM;AAC1B;AAEO,MAAMZ,kBAAA;EACX,OAAca,oBACZC,OAAwB,EACxBF,MAAmB,EACN;IACb;IACA,IAAI,aAAaE,OAAA,IAAWA,OAAC,CAA2BA,OAAO,EAAE;MAC/D,OAAOd,kBAAA,CAAmBe,kBAAkB,CAACD,OAAA;IAC/C;IAEA,OAAOd,kBAAA,CAAmBgB,mBAAmB,CAC3CF,OAAA,EACAF,MAAA;EAEJ;EAEA,OAAcI,oBACZF,OAAwB,EACxBF,MAAmB,EACN;IACb;IACA,IAAIK,IAAA,GAAwB;IAC5B,IAAIH,OAAA,CAAQI,MAAM,KAAK,SAASJ,OAAA,CAAQI,MAAM,KAAK,UAAUJ,OAAA,CAAQG,IAAI,EAAE;MACzE;MACAA,IAAA,GAAOH,OAAA,CAAQG,IAAI;IACrB;IAEA,IAAIE,GAAA;IACJ,IAAIL,OAAA,CAAQK,GAAG,CAACC,UAAU,CAAC,SAAS;MAClCD,GAAA,GAAM,IAAIE,GAAA,CAAIP,OAAA,CAAQK,GAAG;IAC3B,OAAO;MACL;MACA,MAAMG,IAAA,GAAO,IAAAC,YAAA,CAAAC,cAAc,EAACV,OAAA,EAAS;MACrC,IAAI,CAACQ,IAAA,IAAQ,CAACA,IAAA,CAAKF,UAAU,CAAC,SAAS;QACrC;QACA;QACA;QACAD,GAAA,GAAM,IAAIE,GAAA,CAAIP,OAAA,CAAQK,GAAG,EAAE;MAC7B,OAAO;QACLA,GAAA,GAAM,IAAIE,GAAA,CAAIP,OAAA,CAAQK,GAAG,EAAEG,IAAA;MAC7B;IACF;IAEA,OAAO,IAAIG,QAAA,CAAAC,WAAW,CAACP,GAAA,EAAK;MAC1BF,IAAA;MACAC,MAAA,EAAQJ,OAAA,CAAQI,MAAM;MACtBS,OAAA,EAAS,IAAAC,MAAA,CAAAC,2BAA2B,EAACf,OAAA,CAAQa,OAAO;MACpD;MACAG,MAAA,EAAQ;MACRlB;IAIF;EACF;EAEA,OAAcG,mBAAmBD,OAAuB,EAAe;IACrE;IACA,IAAIG,IAAA,GAA8B;IAClC,IAAIH,OAAA,CAAQI,MAAM,KAAK,SAASJ,OAAA,CAAQI,MAAM,KAAK,QAAQ;MACzDD,IAAA,GAAOH,OAAA,CAAQG,IAAI;IACrB;IAEA,OAAO,IAAIQ,QAAA,CAAAC,WAAW,CAACZ,OAAA,CAAQK,GAAG,EAAE;MAClCF,IAAA;MACAC,MAAA,EAAQJ,OAAA,CAAQI,MAAM;MACtBS,OAAA,EAAS,IAAAC,MAAA,CAAAC,2BAA2B,EAACf,OAAA,CAAQa,OAAO;MACpD;MACAG,MAAA,EAAQ;MACRlB,MAAA,EAAQE,OAAA,CAAQA,OAAO,CAACF;IAI1B;EACF;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}