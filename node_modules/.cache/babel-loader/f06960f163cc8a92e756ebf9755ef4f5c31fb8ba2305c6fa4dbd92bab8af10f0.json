{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  downloadNativeNextSwc: null,\n  downloadWasmSwc: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  downloadNativeNextSwc: function () {\n    return downloadNativeNextSwc;\n  },\n  downloadWasmSwc: function () {\n    return downloadWasmSwc;\n  }\n});\nconst _fs = /*#__PURE__*/_interop_require_default(require(\"fs\"));\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nconst _log = /*#__PURE__*/_interop_require_wildcard(require(\"../build/output/log\"));\nconst _tar = /*#__PURE__*/_interop_require_default(require(\"next/dist/compiled/tar\"));\nconst _fileexists = require(\"./file-exists\");\nconst _getregistry = require(\"./helpers/get-registry\");\nconst _getcachedirectory = require(\"./helpers/get-cache-directory\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nconst {\n  fetch\n} = require(\"next/dist/compiled/undici\");\nconst {\n  WritableStream\n} = require(\"node:stream/web\");\nconst MAX_VERSIONS_TO_CACHE = 8;\nasync function extractBinary(outputDirectory, pkgName, tarFileName) {\n  const cacheDirectory = await (0, _getcachedirectory.getCacheDirectory)(\"next-swc\", process.env[\"NEXT_SWC_PATH\"]);\n  const extractFromTar = async () => {\n    await _tar.default.x({\n      file: _path.default.join(cacheDirectory, tarFileName),\n      cwd: outputDirectory,\n      strip: 1\n    });\n  };\n  if (!(await (0, _fileexists.fileExists)(_path.default.join(cacheDirectory, tarFileName)))) {\n    _log.info(`Downloading swc package ${pkgName}...`);\n    await _fs.default.promises.mkdir(cacheDirectory, {\n      recursive: true\n    });\n    const tempFile = _path.default.join(cacheDirectory, `${tarFileName}.temp-${Date.now()}`);\n    const registry = (0, _getregistry.getRegistry)();\n    const downloadUrl = `${registry}${pkgName}/-/${tarFileName}`;\n    await fetch(downloadUrl).then(res => {\n      const {\n        ok,\n        body\n      } = res;\n      if (!ok || !body) {\n        _log.error(`Failed to download swc package from ${downloadUrl}`);\n      }\n      if (!ok) {\n        throw new Error(`request failed with status ${res.status}`);\n      }\n      if (!body) {\n        throw new Error(\"request failed with empty body\");\n      }\n      const cacheWriteStream = _fs.default.createWriteStream(tempFile);\n      return body.pipeTo(new WritableStream({\n        write(chunk) {\n          cacheWriteStream.write(chunk);\n        },\n        close() {\n          cacheWriteStream.close();\n        }\n      }));\n    });\n    await _fs.default.promises.rename(tempFile, _path.default.join(cacheDirectory, tarFileName));\n  }\n  await extractFromTar();\n  const cacheFiles = await _fs.default.promises.readdir(cacheDirectory);\n  if (cacheFiles.length > MAX_VERSIONS_TO_CACHE) {\n    cacheFiles.sort((a, b) => {\n      if (a.length < b.length) return -1;\n      return a.localeCompare(b);\n    });\n    // prune oldest versions in cache\n    for (let i = 0; i++; i < cacheFiles.length - MAX_VERSIONS_TO_CACHE) {\n      await _fs.default.promises.unlink(_path.default.join(cacheDirectory, cacheFiles[i])).catch(() => {});\n    }\n  }\n}\nasync function downloadNativeNextSwc(version, bindingsDirectory, triplesABI) {\n  for (const triple of triplesABI) {\n    const pkgName = `@next/swc-${triple}`;\n    const tarFileName = `${pkgName.substring(6)}-${version}.tgz`;\n    const outputDirectory = _path.default.join(bindingsDirectory, pkgName);\n    if (await (0, _fileexists.fileExists)(outputDirectory)) {\n      // if the package is already downloaded a different\n      // failure occurred than not being present\n      return;\n    }\n    await _fs.default.promises.mkdir(outputDirectory, {\n      recursive: true\n    });\n    await extractBinary(outputDirectory, pkgName, tarFileName);\n  }\n}\nasync function downloadWasmSwc(version, wasmDirectory, variant = \"nodejs\") {\n  const pkgName = `@next/swc-wasm-${variant}`;\n  const tarFileName = `${pkgName.substring(6)}-${version}.tgz`;\n  const outputDirectory = _path.default.join(wasmDirectory, pkgName);\n  if (await (0, _fileexists.fileExists)(outputDirectory)) {\n    // if the package is already downloaded a different\n    // failure occurred than not being present\n    return;\n  }\n  await _fs.default.promises.mkdir(outputDirectory, {\n    recursive: true\n  });\n  await extractBinary(outputDirectory, pkgName, tarFileName);\n}","map":{"version":3,"names":["downloadNativeNextSwc","downloadWasmSwc","fetch","require","WritableStream","MAX_VERSIONS_TO_CACHE","extractBinary","outputDirectory","pkgName","tarFileName","cacheDirectory","_getcachedirectory","getCacheDirectory","process","env","extractFromTar","_tar","default","x","file","_path","join","cwd","strip","_fileexists","fileExists","_log","info","_fs","promises","mkdir","recursive","tempFile","Date","now","registry","_getregistry","getRegistry","downloadUrl","then","res","ok","body","error","Error","status","cacheWriteStream","createWriteStream","pipeTo","write","chunk","close","rename","cacheFiles","readdir","length","sort","a","b","localeCompare","i","unlink","catch","version","bindingsDirectory","triplesABI","triple","substring","wasmDirectory","variant"],"sources":["../../src/lib/download-swc.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}