{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"getSegmentParam\", {\n  enumerable: true,\n  get: function () {\n    return getSegmentParam;\n  }\n});\nconst _interceptionroutes = require(\"../future/helpers/interception-routes\");\nfunction getSegmentParam(segment) {\n  const interceptionMarker = _interceptionroutes.INTERCEPTION_ROUTE_MARKERS.find(marker => segment.startsWith(marker));\n  // if an interception marker is part of the path segment, we need to jump ahead\n  // to the relevant portion for param parsing\n  if (interceptionMarker) {\n    segment = segment.slice(interceptionMarker.length);\n  }\n  if (segment.startsWith(\"[[...\") && segment.endsWith(\"]]\")) {\n    return {\n      type: \"optional-catchall\",\n      param: segment.slice(5, -2)\n    };\n  }\n  if (segment.startsWith(\"[...\") && segment.endsWith(\"]\")) {\n    return {\n      type: \"catchall\",\n      param: segment.slice(4, -1)\n    };\n  }\n  if (segment.startsWith(\"[\") && segment.endsWith(\"]\")) {\n    return {\n      type: \"dynamic\",\n      param: segment.slice(1, -1)\n    };\n  }\n  return null;\n}","map":{"version":3,"names":["getSegmentParam","segment","interceptionMarker","_interceptionroutes","INTERCEPTION_ROUTE_MARKERS","find","marker","startsWith","slice","length","endsWith","type","param"],"sources":["../../../src/server/app-render/get-segment-param.tsx"],"sourcesContent":[null],"mappings":";;;;;+BAMgB;;;WAAAA,eAAA;;;oCAN2B;AAMpC,SAASA,gBAAgBC,OAAe;EAI7C,MAAMC,kBAAA,GAAqBC,mBAAA,CAAAC,0BAA0B,CAACC,IAAI,CAAEC,MAAA,IAC1DL,OAAA,CAAQM,UAAU,CAACD,MAAA;EAGrB;EACA;EACA,IAAIJ,kBAAA,EAAoB;IACtBD,OAAA,GAAUA,OAAA,CAAQO,KAAK,CAACN,kBAAA,CAAmBO,MAAM;EACnD;EAEA,IAAIR,OAAA,CAAQM,UAAU,CAAC,YAAYN,OAAA,CAAQS,QAAQ,CAAC,OAAO;IACzD,OAAO;MACLC,IAAA,EAAM;MACNC,KAAA,EAAOX,OAAA,CAAQO,KAAK,CAAC,GAAG,CAAC;IAC3B;EACF;EAEA,IAAIP,OAAA,CAAQM,UAAU,CAAC,WAAWN,OAAA,CAAQS,QAAQ,CAAC,MAAM;IACvD,OAAO;MACLC,IAAA,EAAM;MACNC,KAAA,EAAOX,OAAA,CAAQO,KAAK,CAAC,GAAG,CAAC;IAC3B;EACF;EAEA,IAAIP,OAAA,CAAQM,UAAU,CAAC,QAAQN,OAAA,CAAQS,QAAQ,CAAC,MAAM;IACpD,OAAO;MACLC,IAAA,EAAM;MACNC,KAAA,EAAOX,OAAA,CAAQO,KAAK,CAAC,GAAG,CAAC;IAC3B;EACF;EAEA,OAAO;AACT"},"metadata":{},"sourceType":"script","externalDependencies":[]}