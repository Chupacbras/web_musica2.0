{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFallbackMetricsFromFontFile = void 0;\n// The font metadata of the fallback fonts, retrieved with fontkit on system font files\n// The average width is calculated with the calcAverageWidth function below\nconst DEFAULT_SANS_SERIF_FONT = {\n  name: 'Arial',\n  azAvgWidth: 934.5116279069767,\n  unitsPerEm: 2048\n};\nconst DEFAULT_SERIF_FONT = {\n  name: 'Times New Roman',\n  azAvgWidth: 854.3953488372093,\n  unitsPerEm: 2048\n};\n/**\n * Calculate the average character width of a font file.\n * Used to calculate the size-adjust property by comparing the fallback average with the loaded font average.\n */\nfunction calcAverageWidth(font) {\n  try {\n    /**\n     * Finding the right characters to use when calculating the average width is tricky.\n     * We can't just use the average width of all characters, because we have to take letter frequency into account.\n     * We also have to take word length into account, because the font's space width usually differ a lot from other characters.\n     * The goal is to find a string that'll give you a good average width, given most texts in most languages.\n     *\n     * TODO: Currently only works for the latin alphabet. Support more languages by finding the right characters for additional languages.\n     *\n     * The used characters were decided through trial and error with letter frequency and word length tables as a guideline.\n     * E.g. https://en.wikipedia.org/wiki/Letter_frequency\n     */\n    const avgCharacters = 'aaabcdeeeefghiijklmnnoopqrrssttuvwxyz      ';\n    // Check if the font file has all the characters we need to calculate the average width\n    const hasAllChars = font.glyphsForString(avgCharacters).flatMap(glyph => glyph.codePoints).every(codePoint => font.hasGlyphForCodePoint(codePoint));\n    if (!hasAllChars) return undefined;\n    const widths = font.glyphsForString(avgCharacters).map(glyph => glyph.advanceWidth);\n    const totalWidth = widths.reduce((sum, width) => sum + width, 0);\n    return totalWidth / widths.length;\n  } catch {\n    // Could not calculate average width from the font file, skip size-adjust\n    return undefined;\n  }\n}\nfunction formatOverrideValue(val) {\n  return Math.abs(val * 100).toFixed(2) + '%';\n}\n/**\n * Given a font file and category, calculate the fallback font override values.\n * The returned values can be used to generate a CSS @font-face declaration.\n *\n * For example:\n * @font-face {\n *   font-family: local-font;\n *   src: local(Arial);\n *   size-adjust: 90%;\n * }\n *\n * Read more about this technique in these texts by the Google Aurora team:\n * https://developer.chrome.com/blog/font-fallbacks/\n * https://docs.google.com/document/d/e/2PACX-1vRsazeNirATC7lIj2aErSHpK26hZ6dA9GsQ069GEbq5fyzXEhXbvByoftSfhG82aJXmrQ_sJCPBqcx_/pub\n */\nfunction getFallbackMetricsFromFontFile(font, category = 'serif') {\n  const fallbackFont = category === 'serif' ? DEFAULT_SERIF_FONT : DEFAULT_SANS_SERIF_FONT;\n  const azAvgWidth = calcAverageWidth(font);\n  const {\n    ascent,\n    descent,\n    lineGap,\n    unitsPerEm\n  } = font;\n  const fallbackFontAvgWidth = fallbackFont.azAvgWidth / fallbackFont.unitsPerEm;\n  let sizeAdjust = azAvgWidth ? azAvgWidth / unitsPerEm / fallbackFontAvgWidth : 1;\n  return {\n    ascentOverride: formatOverrideValue(ascent / (unitsPerEm * sizeAdjust)),\n    descentOverride: formatOverrideValue(descent / (unitsPerEm * sizeAdjust)),\n    lineGapOverride: formatOverrideValue(lineGap / (unitsPerEm * sizeAdjust)),\n    fallbackFont: fallbackFont.name,\n    sizeAdjust: formatOverrideValue(sizeAdjust)\n  };\n}\nexports.getFallbackMetricsFromFontFile = getFallbackMetricsFromFontFile;","map":{"version":3,"names":["Object","defineProperty","exports","value","getFallbackMetricsFromFontFile","DEFAULT_SANS_SERIF_FONT","name","azAvgWidth","unitsPerEm","DEFAULT_SERIF_FONT","calcAverageWidth","font","avgCharacters","hasAllChars","glyphsForString","flatMap","glyph","codePoints","every","codePoint","hasGlyphForCodePoint","undefined","widths","map","advanceWidth","totalWidth","reduce","sum","width","length","formatOverrideValue","val","Math","abs","toFixed","category","fallbackFont","ascent","descent","lineGap","fallbackFontAvgWidth","sizeAdjust","ascentOverride","descentOverride","lineGapOverride"],"sources":["/Users/albertformatger/Documents/GitHub/web_musica/node_modules/next/dist/compiled/@next/font/dist/local/get-fallback-metrics-from-font-file.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFallbackMetricsFromFontFile = void 0;\n// The font metadata of the fallback fonts, retrieved with fontkit on system font files\n// The average width is calculated with the calcAverageWidth function below\nconst DEFAULT_SANS_SERIF_FONT = {\n    name: 'Arial',\n    azAvgWidth: 934.5116279069767,\n    unitsPerEm: 2048,\n};\nconst DEFAULT_SERIF_FONT = {\n    name: 'Times New Roman',\n    azAvgWidth: 854.3953488372093,\n    unitsPerEm: 2048,\n};\n/**\n * Calculate the average character width of a font file.\n * Used to calculate the size-adjust property by comparing the fallback average with the loaded font average.\n */\nfunction calcAverageWidth(font) {\n    try {\n        /**\n         * Finding the right characters to use when calculating the average width is tricky.\n         * We can't just use the average width of all characters, because we have to take letter frequency into account.\n         * We also have to take word length into account, because the font's space width usually differ a lot from other characters.\n         * The goal is to find a string that'll give you a good average width, given most texts in most languages.\n         *\n         * TODO: Currently only works for the latin alphabet. Support more languages by finding the right characters for additional languages.\n         *\n         * The used characters were decided through trial and error with letter frequency and word length tables as a guideline.\n         * E.g. https://en.wikipedia.org/wiki/Letter_frequency\n         */\n        const avgCharacters = 'aaabcdeeeefghiijklmnnoopqrrssttuvwxyz      ';\n        // Check if the font file has all the characters we need to calculate the average width\n        const hasAllChars = font\n            .glyphsForString(avgCharacters)\n            .flatMap((glyph) => glyph.codePoints)\n            .every((codePoint) => font.hasGlyphForCodePoint(codePoint));\n        if (!hasAllChars)\n            return undefined;\n        const widths = font\n            .glyphsForString(avgCharacters)\n            .map((glyph) => glyph.advanceWidth);\n        const totalWidth = widths.reduce((sum, width) => sum + width, 0);\n        return totalWidth / widths.length;\n    }\n    catch {\n        // Could not calculate average width from the font file, skip size-adjust\n        return undefined;\n    }\n}\nfunction formatOverrideValue(val) {\n    return Math.abs(val * 100).toFixed(2) + '%';\n}\n/**\n * Given a font file and category, calculate the fallback font override values.\n * The returned values can be used to generate a CSS @font-face declaration.\n *\n * For example:\n * @font-face {\n *   font-family: local-font;\n *   src: local(Arial);\n *   size-adjust: 90%;\n * }\n *\n * Read more about this technique in these texts by the Google Aurora team:\n * https://developer.chrome.com/blog/font-fallbacks/\n * https://docs.google.com/document/d/e/2PACX-1vRsazeNirATC7lIj2aErSHpK26hZ6dA9GsQ069GEbq5fyzXEhXbvByoftSfhG82aJXmrQ_sJCPBqcx_/pub\n */\nfunction getFallbackMetricsFromFontFile(font, category = 'serif') {\n    const fallbackFont = category === 'serif' ? DEFAULT_SERIF_FONT : DEFAULT_SANS_SERIF_FONT;\n    const azAvgWidth = calcAverageWidth(font);\n    const { ascent, descent, lineGap, unitsPerEm } = font;\n    const fallbackFontAvgWidth = fallbackFont.azAvgWidth / fallbackFont.unitsPerEm;\n    let sizeAdjust = azAvgWidth\n        ? azAvgWidth / unitsPerEm / fallbackFontAvgWidth\n        : 1;\n    return {\n        ascentOverride: formatOverrideValue(ascent / (unitsPerEm * sizeAdjust)),\n        descentOverride: formatOverrideValue(descent / (unitsPerEm * sizeAdjust)),\n        lineGapOverride: formatOverrideValue(lineGap / (unitsPerEm * sizeAdjust)),\n        fallbackFont: fallbackFont.name,\n        sizeAdjust: formatOverrideValue(sizeAdjust),\n    };\n}\nexports.getFallbackMetricsFromFontFile = getFallbackMetricsFromFontFile;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,8BAA8B,GAAG,KAAK,CAAC;AAC/C;AACA;AACA,MAAMC,uBAAuB,GAAG;EAC5BC,IAAI,EAAE,OAAO;EACbC,UAAU,EAAE,iBAAiB;EAC7BC,UAAU,EAAE;AAChB,CAAC;AACD,MAAMC,kBAAkB,GAAG;EACvBH,IAAI,EAAE,iBAAiB;EACvBC,UAAU,EAAE,iBAAiB;EAC7BC,UAAU,EAAE;AAChB,CAAC;AACD;AACA;AACA;AACA;AACA,SAASE,gBAAgBA,CAACC,IAAI,EAAE;EAC5B,IAAI;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,MAAMC,aAAa,GAAG,6CAA6C;IACnE;IACA,MAAMC,WAAW,GAAGF,IAAI,CACnBG,eAAe,CAACF,aAAa,CAAC,CAC9BG,OAAO,CAAEC,KAAK,IAAKA,KAAK,CAACC,UAAU,CAAC,CACpCC,KAAK,CAAEC,SAAS,IAAKR,IAAI,CAACS,oBAAoB,CAACD,SAAS,CAAC,CAAC;IAC/D,IAAI,CAACN,WAAW,EACZ,OAAOQ,SAAS;IACpB,MAAMC,MAAM,GAAGX,IAAI,CACdG,eAAe,CAACF,aAAa,CAAC,CAC9BW,GAAG,CAAEP,KAAK,IAAKA,KAAK,CAACQ,YAAY,CAAC;IACvC,MAAMC,UAAU,GAAGH,MAAM,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAKD,GAAG,GAAGC,KAAK,EAAE,CAAC,CAAC;IAChE,OAAOH,UAAU,GAAGH,MAAM,CAACO,MAAM;EACrC,CAAC,CACD,MAAM;IACF;IACA,OAAOR,SAAS;EACpB;AACJ;AACA,SAASS,mBAAmBA,CAACC,GAAG,EAAE;EAC9B,OAAOC,IAAI,CAACC,GAAG,CAACF,GAAG,GAAG,GAAG,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS9B,8BAA8BA,CAACO,IAAI,EAAEwB,QAAQ,GAAG,OAAO,EAAE;EAC9D,MAAMC,YAAY,GAAGD,QAAQ,KAAK,OAAO,GAAG1B,kBAAkB,GAAGJ,uBAAuB;EACxF,MAAME,UAAU,GAAGG,gBAAgB,CAACC,IAAI,CAAC;EACzC,MAAM;IAAE0B,MAAM;IAAEC,OAAO;IAAEC,OAAO;IAAE/B;EAAW,CAAC,GAAGG,IAAI;EACrD,MAAM6B,oBAAoB,GAAGJ,YAAY,CAAC7B,UAAU,GAAG6B,YAAY,CAAC5B,UAAU;EAC9E,IAAIiC,UAAU,GAAGlC,UAAU,GACrBA,UAAU,GAAGC,UAAU,GAAGgC,oBAAoB,GAC9C,CAAC;EACP,OAAO;IACHE,cAAc,EAAEZ,mBAAmB,CAACO,MAAM,IAAI7B,UAAU,GAAGiC,UAAU,CAAC,CAAC;IACvEE,eAAe,EAAEb,mBAAmB,CAACQ,OAAO,IAAI9B,UAAU,GAAGiC,UAAU,CAAC,CAAC;IACzEG,eAAe,EAAEd,mBAAmB,CAACS,OAAO,IAAI/B,UAAU,GAAGiC,UAAU,CAAC,CAAC;IACzEL,YAAY,EAAEA,YAAY,CAAC9B,IAAI;IAC/BmC,UAAU,EAAEX,mBAAmB,CAACW,UAAU;EAC9C,CAAC;AACL;AACAvC,OAAO,CAACE,8BAA8B,GAAGA,8BAA8B"},"metadata":{},"sourceType":"script","externalDependencies":[]}