{"ast":null,"code":"// the minimum number of operations required to convert string a to string b.\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"detectTypo\", {\n  enumerable: true,\n  get: function () {\n    return detectTypo;\n  }\n});\nfunction minDistance(a, b, threshold) {\n  const m = a.length;\n  const n = b.length;\n  if (m < n) {\n    return minDistance(b, a, threshold);\n  }\n  if (n === 0) {\n    return m;\n  }\n  let previousRow = Array.from({\n    length: n + 1\n  }, (_, i) => i);\n  for (let i = 0; i < m; i++) {\n    const s1 = a[i];\n    let currentRow = [i + 1];\n    for (let j = 0; j < n; j++) {\n      const s2 = b[j];\n      const insertions = previousRow[j + 1] + 1;\n      const deletions = currentRow[j] + 1;\n      const substitutions = previousRow[j] + Number(s1 !== s2);\n      currentRow.push(Math.min(insertions, deletions, substitutions));\n    }\n    previousRow = currentRow;\n  }\n  return previousRow[previousRow.length - 1];\n}\nfunction detectTypo(input, options, threshold = 2) {\n  const potentialTypos = options.map(o => ({\n    option: o,\n    distance: minDistance(o, input, threshold)\n  })).filter(({\n    distance\n  }) => distance <= threshold && distance > 0).sort((a, b) => a.distance - b.distance);\n  if (potentialTypos.length) {\n    return potentialTypos[0].option;\n  }\n  return null;\n}","map":{"version":3,"names":["detectTypo","minDistance","a","b","threshold","m","length","n","previousRow","Array","from","_","i","s1","currentRow","j","s2","insertions","deletions","substitutions","Number","push","Math","min","input","options","potentialTypos","map","o","option","distance","filter","sort"],"sources":["../../src/lib/detect-typo.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;+BA8BgB;;;WAAAA,UAAA;;;AA7BhB,SAASC,YAAYC,CAAS,EAAEC,CAAS,EAAEC,SAAiB;EAC1D,MAAMC,CAAA,GAAIH,CAAA,CAAEI,MAAM;EAClB,MAAMC,CAAA,GAAIJ,CAAA,CAAEG,MAAM;EAElB,IAAID,CAAA,GAAIE,CAAA,EAAG;IACT,OAAON,WAAA,CAAYE,CAAA,EAAGD,CAAA,EAAGE,SAAA;EAC3B;EAEA,IAAIG,CAAA,KAAM,GAAG;IACX,OAAOF,CAAA;EACT;EAEA,IAAIG,WAAA,GAAcC,KAAA,CAAMC,IAAI,CAAC;IAAEJ,MAAA,EAAQC,CAAA,GAAI;EAAE,GAAG,CAACI,CAAA,EAAGC,CAAA,KAAMA,CAAA;EAE1D,KAAK,IAAIA,CAAA,GAAI,GAAGA,CAAA,GAAIP,CAAA,EAAGO,CAAA,IAAK;IAC1B,MAAMC,EAAA,GAAKX,CAAC,CAACU,CAAA,CAAE;IACf,IAAIE,UAAA,GAAa,CAACF,CAAA,GAAI,EAAE;IACxB,KAAK,IAAIG,CAAA,GAAI,GAAGA,CAAA,GAAIR,CAAA,EAAGQ,CAAA,IAAK;MAC1B,MAAMC,EAAA,GAAKb,CAAC,CAACY,CAAA,CAAE;MACf,MAAME,UAAA,GAAaT,WAAW,CAACO,CAAA,GAAI,EAAE,GAAG;MACxC,MAAMG,SAAA,GAAYJ,UAAU,CAACC,CAAA,CAAE,GAAG;MAClC,MAAMI,aAAA,GAAgBX,WAAW,CAACO,CAAA,CAAE,GAAGK,MAAA,CAAOP,EAAA,KAAOG,EAAA;MACrDF,UAAA,CAAWO,IAAI,CAACC,IAAA,CAAKC,GAAG,CAACN,UAAA,EAAYC,SAAA,EAAWC,aAAA;IAClD;IACAX,WAAA,GAAcM,UAAA;EAChB;EACA,OAAON,WAAW,CAACA,WAAA,CAAYF,MAAM,GAAG,EAAE;AAC5C;AAEO,SAASN,WAAWwB,KAAa,EAAEC,OAAiB,EAAErB,SAAA,GAAY,CAAC;EACxE,MAAMsB,cAAA,GAAiBD,OAAA,CACpBE,GAAG,CAAEC,CAAA,KAAO;IACXC,MAAA,EAAQD,CAAA;IACRE,QAAA,EAAU7B,WAAA,CAAY2B,CAAA,EAAGJ,KAAA,EAAOpB,SAAA;EAClC,IACC2B,MAAM,CAAC,CAAC;IAAED;EAAQ,CAAE,KAAKA,QAAA,IAAY1B,SAAA,IAAa0B,QAAA,GAAW,GAC7DE,IAAI,CAAC,CAAC9B,CAAA,EAAGC,CAAA,KAAMD,CAAA,CAAE4B,QAAQ,GAAG3B,CAAA,CAAE2B,QAAQ;EAEzC,IAAIJ,cAAA,CAAepB,MAAM,EAAE;IACzB,OAAOoB,cAAc,CAAC,EAAE,CAACG,MAAM;EACjC;EACA,OAAO;AACT"},"metadata":{},"sourceType":"script","externalDependencies":[]}