{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  Meta: null,\n  MetaFilter: null,\n  MultiMeta: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  Meta: function () {\n    return Meta;\n  },\n  MetaFilter: function () {\n    return MetaFilter;\n  },\n  MultiMeta: function () {\n    return MultiMeta;\n  }\n});\nconst _react = /*#__PURE__*/_interop_require_default(require(\"react\"));\nconst _nonnullable = require(\"../../non-nullable\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction Meta({\n  name,\n  property,\n  content,\n  media\n}) {\n  if (typeof content !== \"undefined\" && content !== null && content !== \"\") {\n    return /*#__PURE__*/_react.default.createElement(\"meta\", {\n      ...(name ? {\n        name\n      } : {\n        property\n      }),\n      ...(media ? {\n        media\n      } : undefined),\n      content: typeof content === \"string\" ? content : content.toString()\n    });\n  }\n  return null;\n}\nfunction MetaFilter(items) {\n  const acc = [];\n  for (const item of items) {\n    if (Array.isArray(item)) {\n      acc.push(...item.filter(_nonnullable.nonNullable));\n    } else if ((0, _nonnullable.nonNullable)(item)) {\n      acc.push(item);\n    }\n  }\n  return acc;\n}\nfunction camelToSnake(camelCaseStr) {\n  return camelCaseStr.replace(/([A-Z])/g, function (match) {\n    return \"_\" + match.toLowerCase();\n  });\n}\nfunction getMetaKey(prefix, key) {\n  // Use `twitter:image` and `og:image` instead of `twitter:image:url` and `og:image:url`\n  // to be more compatible as it's a more common format\n  if ((prefix === \"og:image\" || prefix === \"twitter:image\") && key === \"url\") {\n    return prefix;\n  }\n  if (prefix.startsWith(\"og:\") || prefix.startsWith(\"twitter:\")) {\n    key = camelToSnake(key);\n  }\n  return prefix + \":\" + key;\n}\nfunction ExtendMeta({\n  content,\n  namePrefix,\n  propertyPrefix\n}) {\n  if (!content) return null;\n  return MetaFilter(Object.entries(content).map(([k, v]) => {\n    return typeof v === \"undefined\" ? null : Meta({\n      ...(propertyPrefix && {\n        property: getMetaKey(propertyPrefix, k)\n      }),\n      ...(namePrefix && {\n        name: getMetaKey(namePrefix, k)\n      }),\n      content: typeof v === \"string\" ? v : v == null ? void 0 : v.toString()\n    });\n  }));\n}\nfunction MultiMeta({\n  propertyPrefix,\n  namePrefix,\n  contents\n}) {\n  if (typeof contents === \"undefined\" || contents === null) {\n    return null;\n  }\n  return MetaFilter(contents.map(content => {\n    if (typeof content === \"string\" || typeof content === \"number\" || content instanceof URL) {\n      return Meta({\n        ...(propertyPrefix ? {\n          property: propertyPrefix\n        } : {\n          name: namePrefix\n        }),\n        content\n      });\n    } else {\n      return ExtendMeta({\n        namePrefix,\n        propertyPrefix,\n        content\n      });\n    }\n  }));\n}","map":{"version":3,"names":["Meta","MetaFilter","MultiMeta","name","property","content","media","_react","default","createElement","undefined","toString","items","acc","item","Array","isArray","push","filter","_nonnullable","nonNullable","camelToSnake","camelCaseStr","replace","match","toLowerCase","getMetaKey","prefix","key","startsWith","ExtendMeta","namePrefix","propertyPrefix","Object","entries","map","k","v","contents","URL"],"sources":["../../../../src/lib/metadata/generate/meta.tsx"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}