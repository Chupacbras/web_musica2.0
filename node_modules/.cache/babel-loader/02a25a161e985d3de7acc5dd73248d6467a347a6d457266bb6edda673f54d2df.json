{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  resolveThemeColor: null,\n  resolveViewport: null,\n  resolveAlternates: null,\n  resolveRobots: null,\n  resolveVerification: null,\n  resolveAppleWebApp: null,\n  resolveAppLinks: null,\n  resolveItunes: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  resolveThemeColor: function () {\n    return resolveThemeColor;\n  },\n  resolveViewport: function () {\n    return resolveViewport;\n  },\n  resolveAlternates: function () {\n    return resolveAlternates;\n  },\n  resolveRobots: function () {\n    return resolveRobots;\n  },\n  resolveVerification: function () {\n    return resolveVerification;\n  },\n  resolveAppleWebApp: function () {\n    return resolveAppleWebApp;\n  },\n  resolveAppLinks: function () {\n    return resolveAppLinks;\n  },\n  resolveItunes: function () {\n    return resolveItunes;\n  }\n});\nconst _utils = require(\"../generate/utils\");\nconst _resolveurl = require(\"./resolve-url\");\nconst _constants = require(\"../constants\");\nfunction resolveAlternateUrl(url, metadataBase, pathname) {\n  // If alter native url is an URL instance,\n  // we treat it as a URL base and resolve with current pathname\n  if (url instanceof URL) {\n    url = new URL(pathname, url);\n  }\n  return (0, _resolveurl.resolveAbsoluteUrlWithPathname)(url, metadataBase, pathname);\n}\nconst resolveThemeColor = themeColor => {\n  var _resolveAsArrayOrUndefined;\n  if (!themeColor) return null;\n  const themeColorDescriptors = [];\n  (_resolveAsArrayOrUndefined = (0, _utils.resolveAsArrayOrUndefined)(themeColor)) == null ? void 0 : _resolveAsArrayOrUndefined.forEach(descriptor => {\n    if (typeof descriptor === \"string\") themeColorDescriptors.push({\n      color: descriptor\n    });else if (typeof descriptor === \"object\") themeColorDescriptors.push({\n      color: descriptor.color,\n      media: descriptor.media\n    });\n  });\n  return themeColorDescriptors;\n};\nconst resolveViewport = viewport => {\n  let resolved = null;\n  if (typeof viewport === \"string\") {\n    resolved = viewport;\n  } else if (viewport) {\n    resolved = \"\";\n    for (const viewportKey_ in _constants.ViewPortKeys) {\n      const viewportKey = viewportKey_;\n      if (viewportKey in viewport) {\n        let value = viewport[viewportKey];\n        if (typeof value === \"boolean\") value = value ? \"yes\" : \"no\";\n        if (resolved) resolved += \", \";\n        resolved += `${_constants.ViewPortKeys[viewportKey]}=${value}`;\n      }\n    }\n  }\n  return resolved;\n};\nfunction resolveUrlValuesOfObject(obj, metadataBase, pathname) {\n  if (!obj) return null;\n  const result = {};\n  for (const [key, value] of Object.entries(obj)) {\n    if (typeof value === \"string\" || value instanceof URL) {\n      result[key] = [{\n        url: resolveAlternateUrl(value, metadataBase, pathname)\n      }];\n    } else {\n      result[key] = [];\n      value == null ? void 0 : value.forEach((item, index) => {\n        const url = resolveAlternateUrl(item.url, metadataBase, pathname);\n        result[key][index] = {\n          url,\n          title: item.title\n        };\n      });\n    }\n  }\n  return result;\n}\nfunction resolveCanonicalUrl(urlOrDescriptor, metadataBase, pathname) {\n  if (!urlOrDescriptor) return null;\n  const url = typeof urlOrDescriptor === \"string\" || urlOrDescriptor instanceof URL ? urlOrDescriptor : urlOrDescriptor.url;\n  // Return string url because structureClone can't handle URL instance\n  return {\n    url: resolveAlternateUrl(url, metadataBase, pathname)\n  };\n}\nconst resolveAlternates = (alternates, metadataBase, {\n  pathname\n}) => {\n  if (!alternates) return null;\n  const canonical = resolveCanonicalUrl(alternates.canonical, metadataBase, pathname);\n  const languages = resolveUrlValuesOfObject(alternates.languages, metadataBase, pathname);\n  const media = resolveUrlValuesOfObject(alternates.media, metadataBase, pathname);\n  const types = resolveUrlValuesOfObject(alternates.types, metadataBase, pathname);\n  const result = {\n    canonical,\n    languages,\n    media,\n    types\n  };\n  return result;\n};\nconst robotsKeys = [\"noarchive\", \"nosnippet\", \"noimageindex\", \"nocache\", \"notranslate\", \"indexifembedded\", \"nositelinkssearchbox\", \"unavailable_after\", \"max-video-preview\", \"max-image-preview\", \"max-snippet\"];\nconst resolveRobotsValue = robots => {\n  if (!robots) return null;\n  if (typeof robots === \"string\") return robots;\n  const values = [];\n  if (robots.index) values.push(\"index\");else if (typeof robots.index === \"boolean\") values.push(\"noindex\");\n  if (robots.follow) values.push(\"follow\");else if (typeof robots.follow === \"boolean\") values.push(\"nofollow\");\n  for (const key of robotsKeys) {\n    const value = robots[key];\n    if (typeof value !== \"undefined\" && value !== false) {\n      values.push(typeof value === \"boolean\" ? key : `${key}:${value}`);\n    }\n  }\n  return values.join(\", \");\n};\nconst resolveRobots = robots => {\n  if (!robots) return null;\n  return {\n    basic: resolveRobotsValue(robots),\n    googleBot: typeof robots !== \"string\" ? resolveRobotsValue(robots.googleBot) : null\n  };\n};\nconst VerificationKeys = [\"google\", \"yahoo\", \"yandex\", \"me\", \"other\"];\nconst resolveVerification = verification => {\n  if (!verification) return null;\n  const res = {};\n  for (const key of VerificationKeys) {\n    const value = verification[key];\n    if (value) {\n      if (key === \"other\") {\n        res.other = {};\n        for (const otherKey in verification.other) {\n          const otherValue = (0, _utils.resolveAsArrayOrUndefined)(verification.other[otherKey]);\n          if (otherValue) res.other[otherKey] = otherValue;\n        }\n      } else res[key] = (0, _utils.resolveAsArrayOrUndefined)(value);\n    }\n  }\n  return res;\n};\nconst resolveAppleWebApp = appWebApp => {\n  var _resolveAsArrayOrUndefined;\n  if (!appWebApp) return null;\n  if (appWebApp === true) {\n    return {\n      capable: true\n    };\n  }\n  const startupImages = appWebApp.startupImage ? (_resolveAsArrayOrUndefined = (0, _utils.resolveAsArrayOrUndefined)(appWebApp.startupImage)) == null ? void 0 : _resolveAsArrayOrUndefined.map(item => typeof item === \"string\" ? {\n    url: item\n  } : item) : null;\n  return {\n    capable: \"capable\" in appWebApp ? !!appWebApp.capable : true,\n    title: appWebApp.title || null,\n    startupImage: startupImages,\n    statusBarStyle: appWebApp.statusBarStyle || \"default\"\n  };\n};\nconst resolveAppLinks = appLinks => {\n  if (!appLinks) return null;\n  for (const key in appLinks) {\n    // @ts-ignore // TODO: type infer\n    appLinks[key] = (0, _utils.resolveAsArrayOrUndefined)(appLinks[key]);\n  }\n  return appLinks;\n};\nconst resolveItunes = (itunes, metadataBase, {\n  pathname\n}) => {\n  if (!itunes) return null;\n  return {\n    appId: itunes.appId,\n    appArgument: itunes.appArgument ? resolveAlternateUrl(itunes.appArgument, metadataBase, pathname) : undefined\n  };\n};","map":{"version":3,"names":["resolveThemeColor","resolveViewport","resolveAlternates","resolveRobots","resolveVerification","resolveAppleWebApp","resolveAppLinks","resolveItunes","resolveAlternateUrl","url","metadataBase","pathname","URL","_resolveurl","resolveAbsoluteUrlWithPathname","themeColor","_resolveAsArrayOrUndefined","themeColorDescriptors","_utils","resolveAsArrayOrUndefined","forEach","descriptor","push","color","media","viewport","resolved","viewportKey_","_constants","ViewPortKeys","viewportKey","value","resolveUrlValuesOfObject","obj","result","key","Object","entries","item","index","title","resolveCanonicalUrl","urlOrDescriptor","alternates","canonical","languages","types","robotsKeys","resolveRobotsValue","robots","values","follow","join","basic","googleBot","VerificationKeys","verification","res","other","otherKey","otherValue","appWebApp","capable","startupImages","startupImage","map","statusBarStyle","appLinks","itunes","appId","appArgument","undefined"],"sources":["../../../../src/lib/metadata/resolvers/resolve-basics.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}