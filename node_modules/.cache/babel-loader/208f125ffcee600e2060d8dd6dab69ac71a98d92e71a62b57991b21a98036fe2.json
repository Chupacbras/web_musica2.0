{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  DiagnosticCategory: null,\n  getFormattedDiagnostic: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  DiagnosticCategory: function () {\n    return DiagnosticCategory;\n  },\n  getFormattedDiagnostic: function () {\n    return getFormattedDiagnostic;\n  }\n});\nconst _chalk = /*#__PURE__*/_interop_require_default(require(\"next/dist/compiled/chalk\"));\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar DiagnosticCategory;\n(function (DiagnosticCategory) {\n  DiagnosticCategory[DiagnosticCategory[\"Warning\"] = 0] = \"Warning\";\n  DiagnosticCategory[DiagnosticCategory[\"Error\"] = 1] = \"Error\";\n  DiagnosticCategory[DiagnosticCategory[\"Suggestion\"] = 2] = \"Suggestion\";\n  DiagnosticCategory[DiagnosticCategory[\"Message\"] = 3] = \"Message\";\n})(DiagnosticCategory || (DiagnosticCategory = {}));\nfunction getFormattedLinkDiagnosticMessageText(diagnostic) {\n  const message = diagnostic.messageText;\n  if (typeof message === \"string\" && diagnostic.code === 2322) {\n    const match = message.match(/Type '\"(.+)\"' is not assignable to type 'RouteImpl<.+> \\| UrlObject'\\./) || message.match(/Type '\"(.+)\"' is not assignable to type 'UrlObject \\| RouteImpl<.+>'\\./);\n    if (match) {\n      const [, href] = match;\n      return `\"${_chalk.default.bold(href)}\" is not an existing route. If it is intentional, please type it explicitly with \\`as Route\\`.`;\n    } else if (message === \"Type 'string' is not assignable to type 'UrlObject'.\") {\n      var _diagnostic_relatedInformation_, _diagnostic_relatedInformation;\n      const relatedMessage = (_diagnostic_relatedInformation = diagnostic.relatedInformation) == null ? void 0 : (_diagnostic_relatedInformation_ = _diagnostic_relatedInformation[0]) == null ? void 0 : _diagnostic_relatedInformation_.messageText;\n      if (typeof relatedMessage === \"string\" && relatedMessage.match(/The expected type comes from property 'href' which is declared here on type 'IntrinsicAttributes & /)) {\n        return `Invalid \\`href\\` property of \\`Link\\`: the route does not exist. If it is intentional, please type it explicitly with \\`as Route\\`.`;\n      }\n    }\n  } else if (typeof message === \"string\" && diagnostic.code === 2820) {\n    const match = message.match(/Type '\"(.+)\"' is not assignable to type 'RouteImpl<.+> \\| UrlObject'\\. Did you mean '\"(.+)\"'?/) || message.match(/Type '\"(.+)\"' is not assignable to type 'UrlObject \\| RouteImpl<.+>'\\. Did you mean '\"(.+)\"'?/);\n    if (match) {\n      const [, href, suggestion] = match;\n      return `\"${_chalk.default.bold(href)}\" is not an existing route. Did you mean \"${_chalk.default.bold(suggestion)}\" instead? If it is intentional, please type it explicitly with \\`as Route\\`.`;\n    }\n  }\n}\nfunction getFormattedLayoutAndPageDiagnosticMessageText(relativeSourceFilepath, diagnostic) {\n  const message = typeof diagnostic.messageText === \"string\" ? diagnostic : diagnostic.messageText;\n  const messageText = message.messageText;\n  if (typeof messageText === \"string\") {\n    const type = /page\\.[^.]+$/.test(relativeSourceFilepath) ? \"Page\" : /route\\.[^.]+$/.test(relativeSourceFilepath) ? \"Route\" : \"Layout\";\n    // Reference of error codes:\n    // https://github.com/Microsoft/TypeScript/blob/main/src/compiler/diagnosticMessages.json\n    switch (message.code) {\n      case 2344:\n        const filepathAndType = messageText.match(/typeof import\\(\"(.+)\"\\)/);\n        if (filepathAndType) {\n          let main = `${type} \"${_chalk.default.bold(relativeSourceFilepath)}\" does not match the required types of a Next.js ${type}.`;\n          function processNext(indent, next) {\n            if (!next) return;\n            for (const item of next) {\n              switch (item.code) {\n                case 2200:\n                  const mismatchedField = item.messageText.match(/The types of '(.+)'/);\n                  if (mismatchedField) {\n                    main += \"\\n\" + \" \".repeat(indent * 2);\n                    main += `\"${_chalk.default.bold(mismatchedField[1])}\" has the wrong type:`;\n                  }\n                  break;\n                case 2322:\n                  const types = item.messageText.match(/Type '(.+)' is not assignable to type '(.+)'./);\n                  if (types) {\n                    main += \"\\n\" + \" \".repeat(indent * 2);\n                    if (types[2] === \"PageComponent\" || types[2] === \"LayoutComponent\") {\n                      main += `The exported ${type} component isn't correctly typed.`;\n                    } else {\n                      main += `Expected \"${_chalk.default.bold(types[2].replace('\"__invalid_negative_number__\"', \"number (>= 0)\"))}\", got \"${_chalk.default.bold(types[1])}\".`;\n                    }\n                  }\n                  break;\n                case 2326:\n                  const invalidConfig = item.messageText.match(/Types of property '(.+)' are incompatible\\./);\n                  main += \"\\n\" + \" \".repeat(indent * 2);\n                  main += `Invalid configuration${invalidConfig ? ` \"${_chalk.default.bold(invalidConfig[1])}\"` : \"\"}:`;\n                  break;\n                case 2530:\n                  const invalidField = item.messageText.match(/Property '(.+)' is incompatible with index signature/);\n                  if (invalidField) {\n                    main += \"\\n\" + \" \".repeat(indent * 2);\n                    main += `\"${_chalk.default.bold(invalidField[1])}\" is not a valid ${type} export field.`;\n                  }\n                  return;\n                case 2739:\n                  const invalidProp = item.messageText.match(/Type '(.+)' is missing the following properties from type '(.+)'/);\n                  if (invalidProp) {\n                    if (invalidProp[1] === \"LayoutProps\" || invalidProp[1] === \"PageProps\") {\n                      main += \"\\n\" + \" \".repeat(indent * 2);\n                      main += `Prop \"${invalidProp[2]}\" is incompatible with the ${type}.`;\n                    }\n                  }\n                  break;\n                case 2559:\n                  const invalid = item.messageText.match(/Type '(.+)' has/);\n                  if (invalid) {\n                    main += \"\\n\" + \" \".repeat(indent * 2);\n                    main += `Type \"${_chalk.default.bold(invalid[1])}\" isn't allowed.`;\n                  }\n                  break;\n                case 2741:\n                  const incompatPageProp = item.messageText.match(/Property '(.+)' is missing in type 'PageProps'/);\n                  if (incompatPageProp) {\n                    main += \"\\n\" + \" \".repeat(indent * 2);\n                    main += `Prop \"${_chalk.default.bold(incompatPageProp[1])}\" will never be passed. Remove it from the component's props.`;\n                  } else {\n                    const extraLayoutProp = item.messageText.match(/Property '(.+)' is missing in type 'LayoutProps' but required in type '(.+)'/);\n                    if (extraLayoutProp) {\n                      main += \"\\n\" + \" \".repeat(indent * 2);\n                      main += `Prop \"${_chalk.default.bold(extraLayoutProp[1])}\" is not valid for this Layout, remove it to fix.`;\n                    }\n                  }\n                  break;\n                default:\n              }\n              processNext(indent + 1, item.next);\n            }\n          }\n          if (\"next\" in message) processNext(1, message.next);\n          return main;\n        }\n        const invalidExportFnArg = messageText.match(/Type 'OmitWithTag<(.+), .+, \"(.+)\">' does not satisfy the constraint/);\n        if (invalidExportFnArg) {\n          const main = `${type} \"${_chalk.default.bold(relativeSourceFilepath)}\" has an invalid \"${_chalk.default.bold(invalidExportFnArg[2])}\" export:\\n  Type \"${_chalk.default.bold(invalidExportFnArg[1])}\" is not valid.`;\n          return main;\n        }\n        function processNextItems(indent, next) {\n          if (!next) return \"\";\n          let result = \"\";\n          for (const item of next) {\n            switch (item.code) {\n              case 2322:\n                const types = item.messageText.match(/Type '(.+)' is not assignable to type '(.+)'./);\n                if (types) {\n                  result += \"\\n\" + \" \".repeat(indent * 2);\n                  result += `Expected \"${_chalk.default.bold(types[2])}\", got \"${_chalk.default.bold(types[1])}\".`;\n                }\n                break;\n              default:\n            }\n            result += processNextItems(indent + 1, item.next);\n          }\n          return result;\n        }\n        const invalidParamFn = messageText.match(/Type '{ __tag__: (.+); __param_position__: \"(.*)\"; __param_type__: (.+); }' does not satisfy/);\n        if (invalidParamFn) {\n          let main = `${type} \"${_chalk.default.bold(relativeSourceFilepath)}\" has an invalid ${invalidParamFn[1]} export:\\n  Type \"${_chalk.default.bold(invalidParamFn[3])}\" is not a valid type for the function's ${invalidParamFn[2]} argument.`;\n          if (\"next\" in message) main += processNextItems(1, message.next);\n          return main;\n        }\n        const invalidExportFnReturn = messageText.match(/Type '{ __tag__: \"(.+)\"; __return_type__: (.+); }' does not satisfy/);\n        if (invalidExportFnReturn) {\n          let main = `${type} \"${_chalk.default.bold(relativeSourceFilepath)}\" has an invalid export:\\n  \"${_chalk.default.bold(invalidExportFnReturn[2])}\" is not a valid ${invalidExportFnReturn[1]} return type:`;\n          if (\"next\" in message) main += processNextItems(1, message.next);\n          return main;\n        }\n        break;\n      case 2345:\n        const filepathAndInvalidExport = messageText.match(/'typeof import\\(\"(.+)\"\\)'.+Impossible<\"(.+)\">/);\n        if (filepathAndInvalidExport) {\n          const main = `${type} \"${_chalk.default.bold(relativeSourceFilepath)}\" exports an invalid \"${_chalk.default.bold(filepathAndInvalidExport[2])}\" field. ${type} should only export a default React component and configuration options. Learn more: https://nextjs.org/docs/messages/invalid-segment-export`;\n          return main;\n        }\n        break;\n      case 2559:\n        const invalid = messageText.match(/Type '(.+)' has no properties in common with type '(.+)'/);\n        if (invalid) {\n          const main = `${type} \"${_chalk.default.bold(relativeSourceFilepath)}\" contains an invalid type \"${_chalk.default.bold(invalid[1])}\" as ${invalid[2]}.`;\n          return main;\n        }\n        break;\n      default:\n    }\n  }\n}\nfunction getAppEntrySourceFilePath(baseDir, diagnostic) {\n  var _diagnostic_file_text_trim_match, _diagnostic_file;\n  const sourceFilepath = ((_diagnostic_file = diagnostic.file) == null ? void 0 : (_diagnostic_file_text_trim_match = _diagnostic_file.text.trim().match(/^\\/\\/ File: (.+)\\n/)) == null ? void 0 : _diagnostic_file_text_trim_match[1]) || \"\";\n  return _path.default.relative(baseDir, sourceFilepath);\n}\nfunction getFormattedDiagnostic(ts, baseDir, distDir, diagnostic, isAppDirEnabled) {\n  var _diagnostic_file;\n  // If the error comes from .next/types/, we handle it specially.\n  const isLayoutOrPageError = isAppDirEnabled && ((_diagnostic_file = diagnostic.file) == null ? void 0 : _diagnostic_file.fileName.startsWith(_path.default.join(baseDir, distDir, \"types\")));\n  let message = \"\";\n  const appPath = isLayoutOrPageError ? getAppEntrySourceFilePath(baseDir, diagnostic) : null;\n  const linkReason = getFormattedLinkDiagnosticMessageText(diagnostic);\n  const appReason = !linkReason && isLayoutOrPageError && appPath ? getFormattedLayoutAndPageDiagnosticMessageText(appPath, diagnostic) : null;\n  const reason = linkReason || appReason || ts.flattenDiagnosticMessageText(diagnostic.messageText, \"\\n\");\n  const category = diagnostic.category;\n  switch (category) {\n    // Warning\n    case 0:\n      {\n        message += _chalk.default.yellow.bold(\"Type warning\") + \": \";\n        break;\n      }\n    // Error\n    case 1:\n      {\n        message += _chalk.default.red.bold(\"Type error\") + \": \";\n        break;\n      }\n    // 2 = Suggestion, 3 = Message\n    case 2:\n    case 3:\n    default:\n      {\n        message += _chalk.default.cyan.bold(category === 2 ? \"Suggestion\" : \"Info\") + \": \";\n        break;\n      }\n  }\n  message += reason + \"\\n\";\n  if (!isLayoutOrPageError && diagnostic.file) {\n    const {\n      codeFrameColumns\n    } = require(\"next/dist/compiled/babel/code-frame\");\n    const pos = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);\n    const line = pos.line + 1;\n    const character = pos.character + 1;\n    let fileName = _path.default.posix.normalize(_path.default.relative(baseDir, diagnostic.file.fileName).replace(/\\\\/g, \"/\"));\n    if (!fileName.startsWith(\".\")) {\n      fileName = \"./\" + fileName;\n    }\n    message = _chalk.default.cyan(fileName) + \":\" + _chalk.default.yellow(line.toString()) + \":\" + _chalk.default.yellow(character.toString()) + \"\\n\" + message;\n    message += \"\\n\" + codeFrameColumns(diagnostic.file.getFullText(diagnostic.file.getSourceFile()), {\n      start: {\n        line: line,\n        column: character\n      }\n    }, {\n      forceColor: true\n    });\n  } else if (isLayoutOrPageError && appPath) {\n    message = _chalk.default.cyan(appPath) + \"\\n\" + message;\n  }\n  return message;\n}","map":{"version":3,"names":["getFormattedDiagnostic","DiagnosticCategory","getFormattedLinkDiagnosticMessageText","diagnostic","message","messageText","code","match","href","_chalk","default","bold","_diagnostic_relatedInformation_","_diagnostic_relatedInformation","relatedMessage","relatedInformation","suggestion","getFormattedLayoutAndPageDiagnosticMessageText","relativeSourceFilepath","type","test","filepathAndType","main","processNext","indent","next","item","mismatchedField","repeat","types","replace","invalidConfig","invalidField","invalidProp","invalid","incompatPageProp","extraLayoutProp","invalidExportFnArg","processNextItems","result","invalidParamFn","invalidExportFnReturn","filepathAndInvalidExport","getAppEntrySourceFilePath","baseDir","_diagnostic_file_text_trim_match","_diagnostic_file","sourceFilepath","file","text","trim","_path","relative","ts","distDir","isAppDirEnabled","isLayoutOrPageError","fileName","startsWith","join","appPath","linkReason","appReason","reason","flattenDiagnosticMessageText","category","yellow","red","cyan","codeFrameColumns","require","pos","getLineAndCharacterOfPosition","start","line","character","posix","normalize","toString","getFullText","getSourceFile","column","forceColor"],"sources":["../../../src/lib/typescript/diagnosticFormatter.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}