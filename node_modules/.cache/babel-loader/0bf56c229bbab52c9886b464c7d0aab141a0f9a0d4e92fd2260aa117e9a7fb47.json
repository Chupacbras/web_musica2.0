{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  RESTART_EXIT_CODE: null,\n  initializeServerWorker: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  RESTART_EXIT_CODE: function () {\n    return RESTART_EXIT_CODE;\n  },\n  initializeServerWorker: function () {\n    return initializeServerWorker;\n  }\n});\nconst _v8 = /*#__PURE__*/_interop_require_default(require(\"v8\"));\nconst _http = /*#__PURE__*/_interop_require_default(require(\"http\"));\nrequire(\"../require-hook\");\nrequire(\"../node-polyfill-fetch\");\nconst _log = require(\"../../build/output/log\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nprocess.on(\"unhandledRejection\", err => {\n  console.error(err);\n});\nprocess.on(\"uncaughtException\", err => {\n  console.error(err);\n});\nconst RESTART_EXIT_CODE = 77;\nconst MAXIMUM_HEAP_SIZE_ALLOWED = _v8.default.getHeapStatistics().heap_size_limit / 1024 / 1024 * 0.9;\nasync function initializeServerWorker(requestHandler, upgradeHandler, opts) {\n  const server = _http.default.createServer((req, res) => {\n    return requestHandler(req, res).catch(err => {\n      res.statusCode = 500;\n      res.end(\"Internal Server Error\");\n      console.error(err);\n    }).finally(() => {\n      if (process.memoryUsage().heapUsed / 1024 / 1024 > MAXIMUM_HEAP_SIZE_ALLOWED) {\n        (0, _log.warn)(\"The server is running out of memory, restarting to free up memory.\");\n        server.close();\n        process.exit(RESTART_EXIT_CODE);\n      }\n    });\n  });\n  if (opts.keepAliveTimeout) {\n    server.keepAliveTimeout = opts.keepAliveTimeout;\n  }\n  return new Promise(async (resolve, reject) => {\n    server.on(\"error\", err => {\n      console.error(`Invariant: failed to start server worker`, err);\n      process.exit(1);\n    });\n    if (upgradeHandler) {\n      server.on(\"upgrade\", (req, socket, upgrade) => {\n        upgradeHandler(req, socket, upgrade);\n      });\n    }\n    let hostname = opts.hostname || \"localhost\";\n    server.on(\"listening\", async () => {\n      try {\n        const addr = server.address();\n        const host = addr ? typeof addr === \"object\" ? addr.address : addr : undefined;\n        const port = addr && typeof addr === \"object\" ? addr.port : 0;\n        if (!port || !host) {\n          console.error(`Invariant failed to detect render worker host/port`, addr);\n          process.exit(1);\n        }\n        resolve({\n          server,\n          port,\n          hostname: host\n        });\n      } catch (err) {\n        return reject(err);\n      }\n    });\n    server.listen(0, hostname);\n  });\n}","map":{"version":3,"names":["RESTART_EXIT_CODE","initializeServerWorker","process","on","err","console","error","MAXIMUM_HEAP_SIZE_ALLOWED","_v8","default","getHeapStatistics","heap_size_limit","requestHandler","upgradeHandler","opts","server","_http","createServer","req","res","catch","statusCode","end","finally","memoryUsage","heapUsed","_log","warn","close","exit","keepAliveTimeout","Promise","resolve","reject","socket","upgrade","hostname","addr","address","host","undefined","port","listen"],"sources":["../../../src/server/lib/setup-server-worker.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;EAkBaA,iBAAiB,WAAAA,CAAA;WAAjBA,iBAAA;;EAgBSC,sBAAsB,WAAAA,CAAA;WAAtBA,sBAAA;;;0DAlCP;4DACuC;QAG/C;QACA;qBAEc;;;;;;AAGrBC,OAAA,CAAQC,EAAE,CAAC,sBAAuBC,GAAA;EAChCC,OAAA,CAAQC,KAAK,CAACF,GAAA;AAChB;AAEAF,OAAA,CAAQC,EAAE,CAAC,qBAAsBC,GAAA;EAC/BC,OAAA,CAAQC,KAAK,CAACF,GAAA;AAChB;AAEO,MAAMJ,iBAAA,GAAoB;AAEjC,MAAMO,yBAAA,GACJC,GAAC,CAAAC,OAAE,CAACC,iBAAiB,GAAGC,eAAe,GAAG,OAAO,OAAQ;AAapD,eAAeV,uBACpBW,cAAoC,EACpCC,cAAoC,EACpCC,IASC;EAMD,MAAMC,MAAA,GAASC,KAAA,CAAAP,OAAI,CAACQ,YAAY,CAAC,CAACC,GAAA,EAAKC,GAAA;IACrC,OAAOP,cAAA,CAAeM,GAAA,EAAKC,GAAA,EACxBC,KAAK,CAAEhB,GAAA;MACNe,GAAA,CAAIE,UAAU,GAAG;MACjBF,GAAA,CAAIG,GAAG,CAAC;MACRjB,OAAA,CAAQC,KAAK,CAACF,GAAA;IAChB,GACCmB,OAAO,CAAC;MACP,IACErB,OAAA,CAAQsB,WAAW,GAAGC,QAAQ,GAAG,OAAO,OACxClB,yBAAA,EACA;QACA,IAAAmB,IAAA,CAAAC,IAAI,EACF;QAEFZ,MAAA,CAAOa,KAAK;QACZ1B,OAAA,CAAQ2B,IAAI,CAAC7B,iBAAA;MACf;IACF;EACJ;EAEA,IAAIc,IAAA,CAAKgB,gBAAgB,EAAE;IACzBf,MAAA,CAAOe,gBAAgB,GAAGhB,IAAA,CAAKgB,gBAAgB;EACjD;EAEA,OAAO,IAAIC,OAAA,CAAQ,OAAOC,OAAA,EAASC,MAAA;IACjClB,MAAA,CAAOZ,EAAE,CAAC,SAAUC,GAAA;MAClBC,OAAA,CAAQC,KAAK,CAAE,0CAAyC,EAAEF,GAAA;MAC1DF,OAAA,CAAQ2B,IAAI,CAAC;IACf;IAEA,IAAIhB,cAAA,EAAgB;MAClBE,MAAA,CAAOZ,EAAE,CAAC,WAAW,CAACe,GAAA,EAAKgB,MAAA,EAAQC,OAAA;QACjCtB,cAAA,CAAeK,GAAA,EAAKgB,MAAA,EAAQC,OAAA;MAC9B;IACF;IACA,IAAIC,QAAA,GAAWtB,IAAA,CAAKsB,QAAQ,IAAI;IAEhCrB,MAAA,CAAOZ,EAAE,CAAC,aAAa;MACrB,IAAI;QACF,MAAMkC,IAAA,GAAOtB,MAAA,CAAOuB,OAAO;QAC3B,MAAMC,IAAA,GAAOF,IAAA,GACT,OAAOA,IAAA,KAAS,WACdA,IAAA,CAAKC,OAAO,GACZD,IAAA,GACFG,SAAA;QACJ,MAAMC,IAAA,GAAOJ,IAAA,IAAQ,OAAOA,IAAA,KAAS,WAAWA,IAAA,CAAKI,IAAI,GAAG;QAE5D,IAAI,CAACA,IAAA,IAAQ,CAACF,IAAA,EAAM;UAClBlC,OAAA,CAAQC,KAAK,CACV,oDAAmD,EACpD+B,IAAA;UAEFnC,OAAA,CAAQ2B,IAAI,CAAC;QACf;QAEAG,OAAA,CAAQ;UACNjB,MAAA;UACA0B,IAAA;UACAL,QAAA,EAAUG;QACZ;MACF,EAAE,OAAOnC,GAAA,EAAK;QACZ,OAAO6B,MAAA,CAAO7B,GAAA;MAChB;IACF;IACAW,MAAA,CAAO2B,MAAM,CAAC,GAAGN,QAAA;EACnB;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}