{"ast":null,"code":"/**\n * For server-side CSS imports, we need to ignore the actual module content but\n * still trigger the hot-reloading diff mechanism. So here we put the content\n * inside a comment.\n */\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _default;\n  }\n});\nconst _crypto = /*#__PURE__*/_interop_require_default(require(\"crypto\"));\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst NextServerCSSLoader = function (content) {\n  this.cacheable && this.cacheable();\n  const options = this.getOptions();\n  let isCSSModule = options.cssModules;\n  // Only add the checksum during development.\n  if (process.env.NODE_ENV !== \"production\") {\n    // This check is only for backwards compatibility.\n    // TODO: Remove this in the next major version (next 14)\n    if (isCSSModule === undefined) {\n      this.emitWarning(new Error(\"No 'cssModules' option was found for the next-flight-css-loader plugin.\"));\n      isCSSModule = this.resourcePath.match(/\\.module\\.(css|sass|scss)$/) !== null;\n    }\n    const checksum = _crypto.default.createHash(\"sha1\").update(typeof content === \"string\" ? Buffer.from(content) : content).digest().toString(\"hex\").substring(0, 12);\n    if (isCSSModule) {\n      return `\\\n${content}\nmodule.exports.__checksum = ${JSON.stringify(checksum)}\n`;\n    }\n    // Server CSS imports are always available for HMR, so we attach\n    // `module.hot.accept()` to the generated module.\n    const hmrCode = \"if (module.hot) { module.hot.accept() }\";\n    return `\\\nexport default ${JSON.stringify(checksum)}\n${hmrCode}\n`;\n  }\n  return content;\n};\nconst _default = NextServerCSSLoader;","map":{"version":3,"names":["_default","NextServerCSSLoader","content","cacheable","options","getOptions","isCSSModule","cssModules","process","env","NODE_ENV","undefined","emitWarning","Error","resourcePath","match","checksum","_crypto","default","createHash","update","Buffer","from","digest","toString","substring","JSON","stringify","hmrCode"],"sources":["../../../../src/build/webpack/loaders/next-flight-css-loader.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;GAIC;;;;;+BAuDD;;;WAAAA,QAAA;;;8DArDmB;;;;;;AAOnB,MAAMC,mBAAA,GACJ,SAAAA,CAAUC,OAAO;EACf,IAAI,CAACC,SAAS,IAAI,IAAI,CAACA,SAAS;EAChC,MAAMC,OAAA,GAAU,IAAI,CAACC,UAAU;EAC/B,IAAIC,WAAA,GAAcF,OAAA,CAAQG,UAAU;EAEpC;EACA,IAAIC,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;IACzC;IACA;IACA,IAAIJ,WAAA,KAAgBK,SAAA,EAAW;MAC7B,IAAI,CAACC,WAAW,CACd,IAAIC,KAAA,CACF;MAGJP,WAAA,GACE,IAAI,CAACQ,YAAY,CAACC,KAAK,CAAC,kCAAkC;IAC9D;IACA,MAAMC,QAAA,GAAWC,OAAA,CAAAC,OAAM,CACpBC,UAAU,CAAC,QACXC,MAAM,CAAC,OAAOlB,OAAA,KAAY,WAAWmB,MAAA,CAAOC,IAAI,CAACpB,OAAA,IAAWA,OAAA,EAC5DqB,MAAM,GACNC,QAAQ,CAAC,OACTC,SAAS,CAAC,GAAG;IAEhB,IAAInB,WAAA,EAAa;MACf,OAAQ;AAChB,EAAEJ,OAAQ;8BACoBwB,IAAA,CAAKC,SAAS,CAACX,QAAA,CAAU;AACvD,CAAC;IACK;IAEA;IACA;IACA,MAAMY,OAAA,GAAU;IAEhB,OAAQ;iBACGF,IAAA,CAAKC,SAAS,CAACX,QAAA,CAAU;AAC1C,EAAEY,OAAQ;AACV,CAAC;EACG;EAEA,OAAO1B,OAAA;AACT;MAEFF,QAAA,GAAeC,mBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}