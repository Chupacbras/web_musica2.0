{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"NextFontManifestPlugin\", {\n  enumerable: true,\n  get: function () {\n    return NextFontManifestPlugin;\n  }\n});\nconst _webpack = require(\"next/dist/compiled/webpack/webpack\");\nconst _getroutefromentrypoint = /*#__PURE__*/_interop_require_default(require(\"../../../server/get-route-from-entrypoint\"));\nconst _constants = require(\"../../../shared/lib/constants\");\nconst _utils = require(\"../utils\");\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst PLUGIN_NAME = \"NextFontManifestPlugin\";\n/**\n * When calling font functions with next/font, you can specify if you'd like the font to be preloaded (true by default).\n * e.g.: const inter = Inter({ subsets: ['latin'], preload: true })\n *\n * In that case, next-font-loader will emit the font file as [name].p.[ext] instead of [name].[ext]\n * This function returns those files from an array that can include both preloaded and non-preloaded files.\n */\nfunction getPreloadedFontFiles(fontFiles) {\n  return fontFiles.filter(file => /\\.p\\.(woff|woff2|eot|ttf|otf)$/.test(file));\n}\n/**\n * Similarly to getPreloadedFontFiles, but returns true if some of the files includes -s in the name.\n * This means that a font is using size adjust in its fallback font.\n * This was added to enable adding data-size-adjust=\"true\" to the dom, used by the Google Aurora team to collect statistics.\n */\nfunction getPageIsUsingSizeAdjust(fontFiles) {\n  return fontFiles.some(file => file.includes(\"-s\"));\n}\nclass NextFontManifestPlugin {\n  constructor(options) {\n    this.appDir = options.appDir;\n  }\n  apply(compiler) {\n    compiler.hooks.make.tap(PLUGIN_NAME, compilation => {\n      // In this stage the font files are emitted and we can collect all files emitted by each chunkGroup (entry).\n      compilation.hooks.processAssets.tap({\n        name: PLUGIN_NAME,\n        stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS\n      }, assets => {\n        const nextFontManifest = {\n          pages: {},\n          app: {},\n          appUsingSizeAdjust: false,\n          pagesUsingSizeAdjust: false\n        };\n        if (this.appDir) {\n          const appDirBase = _path.default.dirname(this.appDir) + _path.default.sep;\n          // After all modules are created, we collect the modules that was created by next-font-loader.\n          (0, _utils.traverseModules)(compilation, (mod, _chunk, chunkGroup) => {\n            var _mod_request;\n            if (mod == null ? void 0 : (_mod_request = mod.request) == null ? void 0 : _mod_request.includes(\"/next-font-loader/index.js?\")) {\n              var _mod_buildInfo;\n              if (!((_mod_buildInfo = mod.buildInfo) == null ? void 0 : _mod_buildInfo.assets)) return;\n              const chunkEntryName = (appDirBase + chunkGroup.name).replace(/[\\\\/]/g, _path.default.sep);\n              const modAssets = Object.keys(mod.buildInfo.assets);\n              const fontFiles = modAssets.filter(file => /\\.(woff|woff2|eot|ttf|otf)$/.test(file));\n              // Look if size-adjust fallback font is being used\n              if (!nextFontManifest.appUsingSizeAdjust) {\n                nextFontManifest.appUsingSizeAdjust = getPageIsUsingSizeAdjust(fontFiles);\n              }\n              const preloadedFontFiles = getPreloadedFontFiles(fontFiles);\n              // Add an entry of the module's font files in the manifest.\n              // We'll add an entry even if no files should preload.\n              // When an entry is present but empty, instead of preloading the font files, a preconnect tag is added.\n              if (fontFiles.length > 0) {\n                if (!nextFontManifest.app[chunkEntryName]) {\n                  nextFontManifest.app[chunkEntryName] = [];\n                }\n                nextFontManifest.app[chunkEntryName].push(...preloadedFontFiles);\n              }\n            }\n          }, chunkGroup => {\n            var _chunkGroup_name;\n            // Only loop through entrypoints that are under app/.\n            return !!((_chunkGroup_name = chunkGroup.name) == null ? void 0 : _chunkGroup_name.startsWith(\"app/\"));\n          });\n        }\n        // Look at all the entrypoints created for pages/.\n        for (const entrypoint of compilation.entrypoints.values()) {\n          const pagePath = (0, _getroutefromentrypoint.default)(entrypoint.name);\n          if (!pagePath) {\n            continue;\n          }\n          // Get font files from the chunks included in the entrypoint.\n          const fontFiles = entrypoint.chunks.flatMap(chunk => [...chunk.auxiliaryFiles]).filter(file => /\\.(woff|woff2|eot|ttf|otf)$/.test(file));\n          // Look if size-adjust fallback font is being used\n          if (!nextFontManifest.pagesUsingSizeAdjust) {\n            nextFontManifest.pagesUsingSizeAdjust = getPageIsUsingSizeAdjust(fontFiles);\n          }\n          const preloadedFontFiles = getPreloadedFontFiles(fontFiles);\n          // Add an entry of the route's font files in the manifest.\n          // We'll add an entry even if no files should preload.\n          // When an entry is present but empty, instead of preloading the font files, a preconnect tag is added.\n          if (fontFiles.length > 0) {\n            nextFontManifest.pages[pagePath] = preloadedFontFiles;\n          }\n        }\n        const manifest = JSON.stringify(nextFontManifest, null);\n        // Create manifest for edge\n        assets[`server/${_constants.NEXT_FONT_MANIFEST}.js`] = new _webpack.sources.RawSource(`self.__NEXT_FONT_MANIFEST=${JSON.stringify(manifest)}`);\n        // Create manifest for server\n        assets[`server/${_constants.NEXT_FONT_MANIFEST}.json`] = new _webpack.sources.RawSource(manifest);\n      });\n    });\n    return;\n  }\n}","map":{"version":3,"names":["NextFontManifestPlugin","PLUGIN_NAME","getPreloadedFontFiles","fontFiles","filter","file","test","getPageIsUsingSizeAdjust","some","includes","constructor","options","appDir","apply","compiler","hooks","make","tap","compilation","processAssets","name","stage","_webpack","webpack","Compilation","PROCESS_ASSETS_STAGE_ADDITIONS","assets","nextFontManifest","pages","app","appUsingSizeAdjust","pagesUsingSizeAdjust","appDirBase","_path","default","dirname","sep","_utils","traverseModules","mod","_chunk","chunkGroup","_mod_request","request","_mod_buildInfo","buildInfo","chunkEntryName","replace","modAssets","Object","keys","preloadedFontFiles","length","push","_chunkGroup_name","startsWith","entrypoint","entrypoints","values","pagePath","_getroutefromentrypoint","chunks","flatMap","chunk","auxiliaryFiles","manifest","JSON","stringify","_constants","NEXT_FONT_MANIFEST","sources","RawSource"],"sources":["../../../../src/build/webpack/plugins/next-font-manifest-plugin.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}