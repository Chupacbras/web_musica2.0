{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"parseAndValidateFlightRouterState\", {\n  enumerable: true,\n  get: function () {\n    return parseAndValidateFlightRouterState;\n  }\n});\nconst _types = require(\"./types\");\nfunction parseAndValidateFlightRouterState(stateHeader) {\n  if (typeof stateHeader === \"undefined\") {\n    return undefined;\n  }\n  if (Array.isArray(stateHeader)) {\n    throw new Error(\"Multiple router state headers were sent. This is not allowed.\");\n  }\n  // We limit the size of the router state header to ~40kb. This is to prevent\n  // a malicious user from sending a very large header and slowing down the\n  // resolving of the router state.\n  // This is around 2,000 nested or parallel route segment states:\n  // '{\"children\":[\"\",{}]}'.length === 20.\n  if (stateHeader.length > 20 * 2000) {\n    throw new Error(\"The router state header was too large.\");\n  }\n  try {\n    return _types.flightRouterStateSchema.parse(JSON.parse(decodeURIComponent(stateHeader)));\n  } catch {\n    throw new Error(\"The router state header was sent but could not be parsed.\");\n  }\n}","map":{"version":3,"names":["parseAndValidateFlightRouterState","stateHeader","undefined","Array","isArray","Error","length","_types","flightRouterStateSchema","parse","JSON","decodeURIComponent"],"sources":["../../../src/server/app-render/parse-and-validate-flight-router-state.tsx"],"sourcesContent":[null],"mappings":";;;;;+BAGgB;;;WAAAA,iCAAA;;;uBAFwB;AAEjC,SAASA,kCACdC,WAA0C;EAE1C,IAAI,OAAOA,WAAA,KAAgB,aAAa;IACtC,OAAOC,SAAA;EACT;EACA,IAAIC,KAAA,CAAMC,OAAO,CAACH,WAAA,GAAc;IAC9B,MAAM,IAAII,KAAA,CACR;EAEJ;EAEA;EACA;EACA;EACA;EACA;EACA,IAAIJ,WAAA,CAAYK,MAAM,GAAG,KAAK,MAAM;IAClC,MAAM,IAAID,KAAA,CAAM;EAClB;EAEA,IAAI;IACF,OAAOE,MAAA,CAAAC,uBAAuB,CAACC,KAAK,CAClCC,IAAA,CAAKD,KAAK,CAACE,kBAAA,CAAmBV,WAAA;EAElC,EAAE,MAAM;IACN,MAAM,IAAII,KAAA,CAAM;EAClB;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}