{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// @ts-ignore\n// eslint-disable-next-line import/no-extraneous-dependencies\nlet fontFromBuffer;\ntry {\n  const mod = require('../fontkit').default;\n  fontFromBuffer = mod.default || mod;\n} catch {}\nconst util_1 = require(\"util\");\nconst pick_font_file_for_fallback_generation_1 = require(\"./pick-font-file-for-fallback-generation\");\nconst get_fallback_metrics_from_font_file_1 = require(\"./get-fallback-metrics-from-font-file\");\nconst validate_local_font_function_call_1 = require(\"./validate-local-font-function-call\");\nconst nextFontLocalFontLoader = async ({\n  functionName,\n  variableName,\n  data,\n  emitFontFile,\n  resolve,\n  loaderContext\n}) => {\n  const {\n    src,\n    display,\n    fallback,\n    preload,\n    variable,\n    adjustFontFallback,\n    declarations,\n    weight: defaultWeight,\n    style: defaultStyle\n  } = (0, validate_local_font_function_call_1.validateLocalFontFunctionCall)(functionName, data[0]);\n  // Load all font files and emit them to the .next output directory\n  // Also generate a @font-face CSS for each font file\n  const fontFiles = await Promise.all(src.map(async ({\n    path,\n    style,\n    weight,\n    ext,\n    format\n  }) => {\n    const resolved = await resolve(path);\n    const fileBuffer = await (0, util_1.promisify)(loaderContext.fs.readFile)(resolved);\n    const fontUrl = emitFontFile(fileBuffer, ext, preload, typeof adjustFontFallback === 'undefined' || !!adjustFontFallback);\n    // Try to load font metadata from the font file using fontkit.\n    // The data is used to calculate the fallback font override values.\n    let fontMetadata;\n    try {\n      fontMetadata = fontFromBuffer === null || fontFromBuffer === void 0 ? void 0 : fontFromBuffer(fileBuffer);\n    } catch (e) {\n      console.error(`Failed to load font file: ${resolved}\\n${e}`);\n    }\n    // Get all values that should be added to the @font-face declaration\n    const fontFaceProperties = [...(declarations ? declarations.map(({\n      prop,\n      value\n    }) => [prop, value]) : []), ['font-family', variableName], ['src', `url(${fontUrl}) format('${format}')`], ['font-display', display], ...((weight !== null && weight !== void 0 ? weight : defaultWeight) ? [['font-weight', weight !== null && weight !== void 0 ? weight : defaultWeight]] : []), ...((style !== null && style !== void 0 ? style : defaultStyle) ? [['font-style', style !== null && style !== void 0 ? style : defaultStyle]] : [])];\n    // Generate the @font-face CSS from the font-face properties\n    const css = `@font-face {\\n${fontFaceProperties.map(([property, value]) => `${property}: ${value};`).join('\\n')}\\n}\\n`;\n    return {\n      css,\n      fontMetadata,\n      weight,\n      style\n    };\n  }));\n  // Calculate the fallback font override values using the font file metadata\n  let adjustFontFallbackMetrics;\n  if (adjustFontFallback !== false) {\n    const fallbackFontFile = (0, pick_font_file_for_fallback_generation_1.pickFontFileForFallbackGeneration)(fontFiles);\n    if (fallbackFontFile.fontMetadata) {\n      adjustFontFallbackMetrics = (0, get_fallback_metrics_from_font_file_1.getFallbackMetricsFromFontFile)(fallbackFontFile.fontMetadata, adjustFontFallback === 'Times New Roman' ? 'serif' : 'sans-serif');\n    }\n  }\n  return {\n    css: fontFiles.map(({\n      css\n    }) => css).join('\\n'),\n    fallbackFonts: fallback,\n    weight: src.length === 1 ? src[0].weight : undefined,\n    style: src.length === 1 ? src[0].style : undefined,\n    variable,\n    adjustFontFallback: adjustFontFallbackMetrics\n  };\n};\nexports.default = nextFontLocalFontLoader;","map":{"version":3,"names":["Object","defineProperty","exports","value","fontFromBuffer","mod","require","default","util_1","pick_font_file_for_fallback_generation_1","get_fallback_metrics_from_font_file_1","validate_local_font_function_call_1","nextFontLocalFontLoader","functionName","variableName","data","emitFontFile","resolve","loaderContext","src","display","fallback","preload","variable","adjustFontFallback","declarations","weight","defaultWeight","style","defaultStyle","validateLocalFontFunctionCall","fontFiles","Promise","all","map","path","ext","format","resolved","fileBuffer","promisify","fs","readFile","fontUrl","fontMetadata","e","console","error","fontFaceProperties","prop","css","property","join","adjustFontFallbackMetrics","fallbackFontFile","pickFontFileForFallbackGeneration","getFallbackMetricsFromFontFile","fallbackFonts","length","undefined"],"sources":["/Users/albertformatger/Documents/GitHub/web_musica/node_modules/next/dist/compiled/@next/font/dist/local/loader.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// @ts-ignore\n// eslint-disable-next-line import/no-extraneous-dependencies\nlet fontFromBuffer;\ntry {\n    const mod = require('../fontkit').default;\n    fontFromBuffer = mod.default || mod;\n}\ncatch { }\nconst util_1 = require(\"util\");\nconst pick_font_file_for_fallback_generation_1 = require(\"./pick-font-file-for-fallback-generation\");\nconst get_fallback_metrics_from_font_file_1 = require(\"./get-fallback-metrics-from-font-file\");\nconst validate_local_font_function_call_1 = require(\"./validate-local-font-function-call\");\nconst nextFontLocalFontLoader = async ({ functionName, variableName, data, emitFontFile, resolve, loaderContext, }) => {\n    const { src, display, fallback, preload, variable, adjustFontFallback, declarations, weight: defaultWeight, style: defaultStyle, } = (0, validate_local_font_function_call_1.validateLocalFontFunctionCall)(functionName, data[0]);\n    // Load all font files and emit them to the .next output directory\n    // Also generate a @font-face CSS for each font file\n    const fontFiles = await Promise.all(src.map(async ({ path, style, weight, ext, format }) => {\n        const resolved = await resolve(path);\n        const fileBuffer = await (0, util_1.promisify)(loaderContext.fs.readFile)(resolved);\n        const fontUrl = emitFontFile(fileBuffer, ext, preload, typeof adjustFontFallback === 'undefined' || !!adjustFontFallback);\n        // Try to load font metadata from the font file using fontkit.\n        // The data is used to calculate the fallback font override values.\n        let fontMetadata;\n        try {\n            fontMetadata = fontFromBuffer === null || fontFromBuffer === void 0 ? void 0 : fontFromBuffer(fileBuffer);\n        }\n        catch (e) {\n            console.error(`Failed to load font file: ${resolved}\\n${e}`);\n        }\n        // Get all values that should be added to the @font-face declaration\n        const fontFaceProperties = [\n            ...(declarations\n                ? declarations.map(({ prop, value }) => [prop, value])\n                : []),\n            ['font-family', variableName],\n            ['src', `url(${fontUrl}) format('${format}')`],\n            ['font-display', display],\n            ...((weight !== null && weight !== void 0 ? weight : defaultWeight)\n                ? [['font-weight', weight !== null && weight !== void 0 ? weight : defaultWeight]]\n                : []),\n            ...((style !== null && style !== void 0 ? style : defaultStyle)\n                ? [['font-style', style !== null && style !== void 0 ? style : defaultStyle]]\n                : []),\n        ];\n        // Generate the @font-face CSS from the font-face properties\n        const css = `@font-face {\\n${fontFaceProperties\n            .map(([property, value]) => `${property}: ${value};`)\n            .join('\\n')}\\n}\\n`;\n        return {\n            css,\n            fontMetadata,\n            weight,\n            style,\n        };\n    }));\n    // Calculate the fallback font override values using the font file metadata\n    let adjustFontFallbackMetrics;\n    if (adjustFontFallback !== false) {\n        const fallbackFontFile = (0, pick_font_file_for_fallback_generation_1.pickFontFileForFallbackGeneration)(fontFiles);\n        if (fallbackFontFile.fontMetadata) {\n            adjustFontFallbackMetrics = (0, get_fallback_metrics_from_font_file_1.getFallbackMetricsFromFontFile)(fallbackFontFile.fontMetadata, adjustFontFallback === 'Times New Roman' ? 'serif' : 'sans-serif');\n        }\n    }\n    return {\n        css: fontFiles.map(({ css }) => css).join('\\n'),\n        fallbackFonts: fallback,\n        weight: src.length === 1 ? src[0].weight : undefined,\n        style: src.length === 1 ? src[0].style : undefined,\n        variable,\n        adjustFontFallback: adjustFontFallbackMetrics,\n    };\n};\nexports.default = nextFontLocalFontLoader;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}