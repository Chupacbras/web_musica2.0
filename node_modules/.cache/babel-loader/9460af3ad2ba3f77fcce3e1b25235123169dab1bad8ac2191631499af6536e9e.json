{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"handleAction\", {\n  enumerable: true,\n  get: function () {\n    return handleAction;\n  }\n});\nconst _approuterheaders = require(\"../../client/components/app-router-headers\");\nconst _notfound = require(\"../../client/components/not-found\");\nconst _redirect = require(\"../../client/components/redirect\");\nconst _renderresult = /*#__PURE__*/_interop_require_default(require(\"../render-result\"));\nconst _flightrenderresult = require(\"./flight-render-result\");\nconst _utils = require(\"../lib/server-ipc/utils\");\nconst _requestcookies = require(\"../web/spec-extension/adapters/request-cookies\");\nconst _constants = require(\"../../lib/constants\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction nodeToWebReadableStream(nodeReadable) {\n  if (process.env.NEXT_RUNTIME !== \"edge\") {\n    const {\n      Readable\n    } = require(\"stream\");\n    if (\"toWeb\" in Readable && typeof Readable.toWeb === \"function\") {\n      return Readable.toWeb(nodeReadable);\n    }\n    return new ReadableStream({\n      start(controller) {\n        nodeReadable.on(\"data\", chunk => {\n          controller.enqueue(chunk);\n        });\n        nodeReadable.on(\"end\", () => {\n          controller.close();\n        });\n        nodeReadable.on(\"error\", error => {\n          controller.error(error);\n        });\n      }\n    });\n  } else {\n    throw new Error(\"Invalid runtime\");\n  }\n}\nfunction formDataFromSearchQueryString(query) {\n  const searchParams = new URLSearchParams(query);\n  const formData = new FormData();\n  for (const [key, value] of searchParams) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction nodeHeadersToRecord(headers) {\n  const record = {};\n  for (const [key, value] of Object.entries(headers)) {\n    if (value !== undefined) {\n      record[key] = Array.isArray(value) ? value.join(\", \") : `${value}`;\n    }\n  }\n  return record;\n}\nfunction getForwardedHeaders(req, res) {\n  // Get request headers and cookies\n  const requestHeaders = req.headers;\n  const requestCookies = requestHeaders[\"cookie\"] ?? \"\";\n  // Get response headers and Set-Cookie header\n  const responseHeaders = res.getHeaders();\n  const rawSetCookies = responseHeaders[\"set-cookie\"];\n  const setCookies = (Array.isArray(rawSetCookies) ? rawSetCookies : [rawSetCookies]).map(setCookie => {\n    // remove the suffixes like 'HttpOnly' and 'SameSite'\n    const [cookie] = `${setCookie}`.split(\";\");\n    return cookie;\n  });\n  // Merge request and response headers\n  const mergedHeaders = (0, _utils.filterReqHeaders)({\n    ...nodeHeadersToRecord(requestHeaders),\n    ...nodeHeadersToRecord(responseHeaders)\n  }, _utils.actionsForbiddenHeaders);\n  // Merge cookies\n  const mergedCookies = requestCookies.split(\"; \").concat(setCookies).join(\"; \");\n  // Update the 'cookie' header with the merged cookies\n  mergedHeaders[\"cookie\"] = mergedCookies;\n  // Remove headers that should not be forwarded\n  delete mergedHeaders[\"transfer-encoding\"];\n  return new Headers(mergedHeaders);\n}\nasync function addRevalidationHeader(res, {\n  staticGenerationStore,\n  requestStore\n}) {\n  var _staticGenerationStore_revalidatedTags;\n  await Promise.all(staticGenerationStore.pendingRevalidates || []);\n  // If a tag was revalidated, the client router needs to invalidate all the\n  // client router cache as they may be stale. And if a path was revalidated, the\n  // client needs to invalidate all subtrees below that path.\n  // To keep the header size small, we use a tuple of\n  // [[revalidatedPaths], isTagRevalidated ? 1 : 0, isCookieRevalidated ? 1 : 0]\n  // instead of a JSON object.\n  // TODO-APP: Currently the prefetch cache doesn't have subtree information,\n  // so we need to invalidate the entire cache if a path was revalidated.\n  // TODO-APP: Currently paths are treated as tags, so the second element of the tuple\n  // is always empty.\n  const isTagRevalidated = ((_staticGenerationStore_revalidatedTags = staticGenerationStore.revalidatedTags) == null ? void 0 : _staticGenerationStore_revalidatedTags.length) ? 1 : 0;\n  const isCookieRevalidated = (0, _requestcookies.getModifiedCookieValues)(requestStore.mutableCookies).length ? 1 : 0;\n  res.setHeader(\"x-action-revalidated\", JSON.stringify([[], isTagRevalidated, isCookieRevalidated]));\n}\nasync function createRedirectRenderResult(req, res, redirectUrl, staticGenerationStore) {\n  res.setHeader(\"x-action-redirect\", redirectUrl);\n  // if we're redirecting to a relative path, we'll try to stream the response\n  if (redirectUrl.startsWith(\"/\")) {\n    var _staticGenerationStore_incrementalCache;\n    const forwardedHeaders = getForwardedHeaders(req, res);\n    forwardedHeaders.set(_approuterheaders.RSC, \"1\");\n    const host = req.headers[\"host\"];\n    const proto = ((_staticGenerationStore_incrementalCache = staticGenerationStore.incrementalCache) == null ? void 0 : _staticGenerationStore_incrementalCache.requestProtocol) || \"https\";\n    const fetchUrl = new URL(`${proto}://${host}${redirectUrl}`);\n    if (staticGenerationStore.revalidatedTags) {\n      var _staticGenerationStore_incrementalCache_prerenderManifest_preview, _staticGenerationStore_incrementalCache_prerenderManifest, _staticGenerationStore_incrementalCache1;\n      forwardedHeaders.set(_constants.NEXT_CACHE_REVALIDATED_TAGS_HEADER, staticGenerationStore.revalidatedTags.join(\",\"));\n      forwardedHeaders.set(_constants.NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER, ((_staticGenerationStore_incrementalCache1 = staticGenerationStore.incrementalCache) == null ? void 0 : (_staticGenerationStore_incrementalCache_prerenderManifest = _staticGenerationStore_incrementalCache1.prerenderManifest) == null ? void 0 : (_staticGenerationStore_incrementalCache_prerenderManifest_preview = _staticGenerationStore_incrementalCache_prerenderManifest.preview) == null ? void 0 : _staticGenerationStore_incrementalCache_prerenderManifest_preview.previewModeId) || \"\");\n    }\n    // Ensures that when the path was revalidated we don't return a partial response on redirects\n    // if (staticGenerationStore.pathWasRevalidated) {\n    forwardedHeaders.delete(\"next-router-state-tree\");\n    // }\n    try {\n      const headResponse = await fetch(fetchUrl, {\n        method: \"HEAD\",\n        headers: forwardedHeaders,\n        next: {\n          // @ts-ignore\n          internal: 1\n        }\n      });\n      if (headResponse.headers.get(\"content-type\") === _approuterheaders.RSC_CONTENT_TYPE_HEADER) {\n        const response = await fetch(fetchUrl, {\n          method: \"GET\",\n          headers: forwardedHeaders,\n          next: {\n            // @ts-ignore\n            internal: 1\n          }\n        });\n        // copy the headers from the redirect response to the response we're sending\n        for (const [key, value] of response.headers) {\n          if (!_utils.actionsForbiddenHeaders.includes(key)) {\n            res.setHeader(key, value);\n          }\n        }\n        return new _flightrenderresult.FlightRenderResult(response.body);\n      }\n    } catch (err) {\n      // we couldn't stream the redirect response, so we'll just do a normal redirect\n      console.error(`failed to get redirect response`, err);\n    }\n  }\n  return new _renderresult.default(JSON.stringify({}));\n}\nasync function handleAction({\n  req,\n  res,\n  ComponentMod,\n  page,\n  serverActionsManifest,\n  generateFlight,\n  staticGenerationStore,\n  requestStore,\n  serverActionsBodySizeLimit\n}) {\n  let actionId = req.headers[_approuterheaders.ACTION.toLowerCase()];\n  const contentType = req.headers[\"content-type\"];\n  const isURLEncodedAction = req.method === \"POST\" && contentType === \"application/x-www-form-urlencoded\";\n  const isMultipartAction = req.method === \"POST\" && (contentType == null ? void 0 : contentType.startsWith(\"multipart/form-data\"));\n  const isFetchAction = actionId !== undefined && typeof actionId === \"string\" && req.method === \"POST\";\n  if (isFetchAction || isURLEncodedAction || isMultipartAction) {\n    // ensure we avoid caching server actions unexpectedly\n    res.setHeader(\"Cache-Control\", \"no-cache, no-store, max-age=0, must-revalidate\");\n    let bound = [];\n    const workerName = \"app\" + page;\n    const serverModuleMap = new Proxy({}, {\n      get: (_, id) => {\n        return {\n          id: serverActionsManifest[process.env.NEXT_RUNTIME === \"edge\" ? \"edge\" : \"node\"][id].workers[workerName],\n          name: id,\n          chunks: []\n        };\n      }\n    });\n    const {\n      actionAsyncStorage\n    } = ComponentMod;\n    let actionResult;\n    try {\n      await actionAsyncStorage.run({\n        isAction: true\n      }, async () => {\n        if (process.env.NEXT_RUNTIME === \"edge\") {\n          // Use react-server-dom-webpack/server.edge\n          const {\n            decodeReply,\n            decodeAction\n          } = ComponentMod;\n          const webRequest = req;\n          if (!webRequest.body) {\n            throw new Error(\"invariant: Missing request body.\");\n          }\n          if (isMultipartAction) {\n            // TODO-APP: Add streaming support\n            const formData = await webRequest.request.formData();\n            if (isFetchAction) {\n              bound = await decodeReply(formData, serverModuleMap);\n            } else {\n              const action = await decodeAction(formData, serverModuleMap);\n              await action();\n              // Skip the fetch path\n              return;\n            }\n          } else {\n            let actionData = \"\";\n            const reader = webRequest.body.getReader();\n            while (true) {\n              const {\n                done,\n                value\n              } = await reader.read();\n              if (done) {\n                break;\n              }\n              actionData += new TextDecoder().decode(value);\n            }\n            if (isURLEncodedAction) {\n              const formData = formDataFromSearchQueryString(actionData);\n              bound = await decodeReply(formData, serverModuleMap);\n            } else {\n              bound = await decodeReply(actionData, serverModuleMap);\n            }\n          }\n        } else {\n          // Use react-server-dom-webpack/server.node which supports streaming\n          const {\n            decodeReply,\n            decodeReplyFromBusboy,\n            decodeAction\n          } = require(`react-server-dom-webpack/server.node`);\n          if (isMultipartAction) {\n            if (isFetchAction) {\n              const busboy = require(\"busboy\");\n              const bb = busboy({\n                headers: req.headers\n              });\n              req.pipe(bb);\n              bound = await decodeReplyFromBusboy(bb, serverModuleMap);\n            } else {\n              // React doesn't yet publish a busboy version of decodeAction\n              // so we polyfill the parsing of FormData.\n              const UndiciRequest = require(\"next/dist/compiled/undici\").Request;\n              const fakeRequest = new UndiciRequest(\"http://localhost\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": req.headers[\"content-type\"]\n                },\n                body: nodeToWebReadableStream(req),\n                duplex: \"half\"\n              });\n              const formData = await fakeRequest.formData();\n              const action = await decodeAction(formData, serverModuleMap);\n              await action();\n              // Skip the fetch path\n              return;\n            }\n          } else {\n            const {\n              parseBody\n            } = require(\"../api-utils/node\");\n            let actionData;\n            try {\n              actionData = (await parseBody(req, serverActionsBodySizeLimit ?? \"1mb\")) || \"\";\n            } catch (e) {\n              if (e && e.statusCode === 413) {\n                // Exceeded the size limit\n                e.message = e.message + \"\\nTo configure the body size limit for Server Actions, see: https://nextjs.org/docs/app/api-reference/server-actions#size-limitation\";\n              }\n              throw e;\n            }\n            if (isURLEncodedAction) {\n              const formData = formDataFromSearchQueryString(actionData);\n              bound = await decodeReply(formData, serverModuleMap);\n            } else {\n              bound = await decodeReply(actionData, serverModuleMap);\n            }\n          }\n        }\n        // actions.js\n        // app/page.js\n        //   action worker1\n        //     appRender1\n        // app/foo/page.js\n        //   action worker2\n        //     appRender\n        // / -> fire action -> POST / -> appRender1 -> modId for the action file\n        // /foo -> fire action -> POST /foo -> appRender2 -> modId for the action file\n        const actionModId = serverActionsManifest[process.env.NEXT_RUNTIME === \"edge\" ? \"edge\" : \"node\"][actionId].workers[workerName];\n        const actionHandler = ComponentMod.__next_app__.require(actionModId)[actionId];\n        const returnVal = await actionHandler.apply(null, bound);\n        // For form actions, we need to continue rendering the page.\n        if (isFetchAction) {\n          await addRevalidationHeader(res, {\n            staticGenerationStore,\n            requestStore\n          });\n          actionResult = await generateFlight({\n            actionResult: Promise.resolve(returnVal),\n            // if the page was not revalidated, we can skip the rendering the flight tree\n            skipFlight: !staticGenerationStore.pathWasRevalidated\n          });\n        }\n      });\n      return actionResult;\n    } catch (err) {\n      if ((0, _redirect.isRedirectError)(err)) {\n        const redirectUrl = (0, _redirect.getURLFromRedirectError)(err);\n        // if it's a fetch action, we don't want to mess with the status code\n        // and we'll handle it on the client router\n        await addRevalidationHeader(res, {\n          staticGenerationStore,\n          requestStore\n        });\n        if (isFetchAction) {\n          return createRedirectRenderResult(req, res, redirectUrl, staticGenerationStore);\n        }\n        if (err.mutableCookies) {\n          const headers = new Headers();\n          // If there were mutable cookies set, we need to set them on the\n          // response.\n          if ((0, _requestcookies.appendMutableCookies)(headers, err.mutableCookies)) {\n            res.setHeader(\"set-cookie\", Array.from(headers.values()));\n          }\n        }\n        res.setHeader(\"Location\", redirectUrl);\n        res.statusCode = 303;\n        return new _renderresult.default(\"\");\n      } else if ((0, _notfound.isNotFoundError)(err)) {\n        res.statusCode = 404;\n        await addRevalidationHeader(res, {\n          staticGenerationStore,\n          requestStore\n        });\n        if (isFetchAction) {\n          const promise = Promise.reject(err);\n          try {\n            await promise;\n          } catch {}\n          return generateFlight({\n            skipFlight: false,\n            actionResult: promise,\n            asNotFound: true\n          });\n        }\n        return \"not-found\";\n      }\n      if (isFetchAction) {\n        res.statusCode = 500;\n        await Promise.all(staticGenerationStore.pendingRevalidates || []);\n        const promise = Promise.reject(err);\n        try {\n          await promise;\n        } catch {}\n        return generateFlight({\n          actionResult: promise,\n          // if the page was not revalidated, we can skip the rendering the flight tree\n          skipFlight: !staticGenerationStore.pathWasRevalidated\n        });\n      }\n      throw err;\n    }\n  }\n}","map":{"version":3,"names":["handleAction","nodeToWebReadableStream","nodeReadable","process","env","NEXT_RUNTIME","Readable","require","toWeb","ReadableStream","start","controller","on","chunk","enqueue","close","error","Error","formDataFromSearchQueryString","query","searchParams","URLSearchParams","formData","FormData","key","value","append","nodeHeadersToRecord","headers","record","Object","entries","undefined","Array","isArray","join","getForwardedHeaders","req","res","requestHeaders","requestCookies","responseHeaders","getHeaders","rawSetCookies","setCookies","map","setCookie","cookie","split","mergedHeaders","_utils","filterReqHeaders","actionsForbiddenHeaders","mergedCookies","concat","Headers","addRevalidationHeader","staticGenerationStore","requestStore","_staticGenerationStore_revalidatedTags","Promise","all","pendingRevalidates","isTagRevalidated","revalidatedTags","length","isCookieRevalidated","_requestcookies","getModifiedCookieValues","mutableCookies","setHeader","JSON","stringify","createRedirectRenderResult","redirectUrl","startsWith","_staticGenerationStore_incrementalCache","forwardedHeaders","set","_approuterheaders","RSC","host","proto","incrementalCache","requestProtocol","fetchUrl","URL","_staticGenerationStore_incrementalCache_prerenderManifest_preview","_staticGenerationStore_incrementalCache_prerenderManifest","_staticGenerationStore_incrementalCache1","_constants","NEXT_CACHE_REVALIDATED_TAGS_HEADER","NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER","prerenderManifest","preview","previewModeId","delete","headResponse","fetch","method","next","internal","get","RSC_CONTENT_TYPE_HEADER","response","includes","_flightrenderresult","FlightRenderResult","body","err","console","_renderresult","default","ComponentMod","page","serverActionsManifest","generateFlight","serverActionsBodySizeLimit","actionId","ACTION","toLowerCase","contentType","isURLEncodedAction","isMultipartAction","isFetchAction","bound","workerName","serverModuleMap","Proxy","_","id","workers","name","chunks","actionAsyncStorage","actionResult","run","isAction","decodeReply","decodeAction","webRequest","request","action","actionData","reader","getReader","done","read","TextDecoder","decode","decodeReplyFromBusboy","busboy","bb","pipe","UndiciRequest","Request","fakeRequest","duplex","parseBody","e","statusCode","message","actionModId","actionHandler","__next_app__","returnVal","apply","resolve","skipFlight","pathWasRevalidated","_redirect","isRedirectError","getURLFromRedirectError","appendMutableCookies","from","values","_notfound","isNotFoundError","promise","reject","asNotFound"],"sources":["../../../src/server/app-render/action-handler.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}