{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  printAndExit: null,\n  getDebugPort: null,\n  getNodeOptionsWithoutInspect: null,\n  getPort: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  printAndExit: function () {\n    return printAndExit;\n  },\n  getDebugPort: function () {\n    return getDebugPort;\n  },\n  getNodeOptionsWithoutInspect: function () {\n    return getNodeOptionsWithoutInspect;\n  },\n  getPort: function () {\n    return getPort;\n  }\n});\nfunction printAndExit(message, code = 1) {\n  if (code === 0) {\n    console.log(message);\n  } else {\n    console.error(message);\n  }\n  process.exit(code);\n}\nconst getDebugPort = () => {\n  var _process_execArgv_find, _process_env_NODE_OPTIONS_match, _process_env_NODE_OPTIONS_match1, _process_env_NODE_OPTIONS;\n  const debugPortStr = ((_process_execArgv_find = process.execArgv.find(localArg => localArg.startsWith(\"--inspect\") || localArg.startsWith(\"--inspect-brk\"))) == null ? void 0 : _process_execArgv_find.split(\"=\")[1]) ?? ((_process_env_NODE_OPTIONS = process.env.NODE_OPTIONS) == null ? void 0 : (_process_env_NODE_OPTIONS_match1 = _process_env_NODE_OPTIONS.match) == null ? void 0 : (_process_env_NODE_OPTIONS_match = _process_env_NODE_OPTIONS_match1.call(_process_env_NODE_OPTIONS, /--inspect(-brk)?(=(\\S+))?( |$)/)) == null ? void 0 : _process_env_NODE_OPTIONS_match[3]);\n  return debugPortStr ? parseInt(debugPortStr, 10) : 9229;\n};\nconst NODE_INSPECT_RE = /--inspect(-brk)?(=\\S+)?( |$)/;\nfunction getNodeOptionsWithoutInspect() {\n  return (process.env.NODE_OPTIONS || \"\").replace(NODE_INSPECT_RE, \"\");\n}\nfunction getPort(args) {\n  if (typeof args[\"--port\"] === \"number\") {\n    return args[\"--port\"];\n  }\n  const parsed = process.env.PORT && parseInt(process.env.PORT, 10);\n  if (typeof parsed === \"number\" && !Number.isNaN(parsed)) {\n    return parsed;\n  }\n  return 3000;\n}","map":{"version":3,"names":["printAndExit","getDebugPort","getNodeOptionsWithoutInspect","getPort","message","code","console","log","error","process","exit","_process_execArgv_find","_process_env_NODE_OPTIONS_match","_process_env_NODE_OPTIONS_match1","_process_env_NODE_OPTIONS","debugPortStr","execArgv","find","localArg","startsWith","split","env","NODE_OPTIONS","match","call","parseInt","NODE_INSPECT_RE","replace","args","parsed","PORT","Number","isNaN"],"sources":["../../../src/server/lib/utils.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;EAEgBA,YAAY,WAAAA,CAAA;WAAZA,YAAA;;EAUHC,YAAY,WAAAA,CAAA;WAAZA,YAAA;;EAcGC,4BAA4B,WAAAA,CAAA;WAA5BA,4BAAA;;EAIAC,OAAO,WAAAA,CAAA;WAAPA,OAAA;;;AA5BT,SAASH,aAAaI,OAAe,EAAEC,IAAA,GAAO,CAAC;EACpD,IAAIA,IAAA,KAAS,GAAG;IACdC,OAAA,CAAQC,GAAG,CAACH,OAAA;EACd,OAAO;IACLE,OAAA,CAAQE,KAAK,CAACJ,OAAA;EAChB;EAEAK,OAAA,CAAQC,IAAI,CAACL,IAAA;AACf;AAEO,MAAMJ,YAAA,GAAeA,CAAA;MAExBU,sBAAA,EAOAC,+BAAA,EAAAC,gCAAA,EAAAC,yBAAA;EARF,MAAMC,YAAA,GACJ,EAAAJ,sBAAA,GAAAF,OAAA,CAAQO,QAAQ,CACbC,IAAI,CACFC,QAAA,IACCA,QAAA,CAASC,UAAU,CAAC,gBACpBD,QAAA,CAASC,UAAU,CAAC,sCAJ1BR,sBAAA,CAMIS,KAAK,CAAC,IAAI,CAAC,EAAE,OACjBN,yBAAA,GAAAL,OAAA,CAAQY,GAAG,CAACC,YAAY,sBAAxBT,gCAAA,GAAAC,yBAAA,CAA0BS,KAAK,sBAA/BX,+BAAA,GAAAC,gCAAA,CAAAW,IAAA,CAAAV,yBAAA,EAAkC,sDAAlCF,+BAAqE,CAAC,EAAE;EAC1E,OAAOG,YAAA,GAAeU,QAAA,CAASV,YAAA,EAAc,MAAM;AACrD;AAEA,MAAMW,eAAA,GAAkB;AACjB,SAASxB,6BAAA;EACd,OAAO,CAACO,OAAA,CAAQY,GAAG,CAACC,YAAY,IAAI,EAAC,EAAGK,OAAO,CAACD,eAAA,EAAiB;AACnE;AAEO,SAASvB,QAAQyB,IAA0B;EAChD,IAAI,OAAOA,IAAI,CAAC,SAAS,KAAK,UAAU;IACtC,OAAOA,IAAI,CAAC,SAAS;EACvB;EAEA,MAAMC,MAAA,GAASpB,OAAA,CAAQY,GAAG,CAACS,IAAI,IAAIL,QAAA,CAAShB,OAAA,CAAQY,GAAG,CAACS,IAAI,EAAE;EAC9D,IAAI,OAAOD,MAAA,KAAW,YAAY,CAACE,MAAA,CAAOC,KAAK,CAACH,MAAA,GAAS;IACvD,OAAOA,MAAA;EACT;EAEA,OAAO;AACT"},"metadata":{},"sourceType":"script","externalDependencies":[]}