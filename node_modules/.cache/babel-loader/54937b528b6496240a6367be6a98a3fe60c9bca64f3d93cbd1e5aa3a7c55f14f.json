{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return loadJsConfig;\n  }\n});\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nconst _fileexists = require(\"../lib/file-exists\");\nconst _log = /*#__PURE__*/_interop_require_wildcard(require(\"./output/log\"));\nconst _getTypeScriptConfiguration = require(\"../lib/typescript/getTypeScriptConfiguration\");\nconst _fs = require(\"fs\");\nconst _iserror = /*#__PURE__*/_interop_require_default(require(\"../lib/is-error\"));\nconst _hasnecessarydependencies = require(\"../lib/has-necessary-dependencies\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nlet TSCONFIG_WARNED = false;\nfunction parseJsonFile(filePath) {\n  const JSON5 = require(\"next/dist/compiled/json5\");\n  const contents = (0, _fs.readFileSync)(filePath, \"utf8\");\n  // Special case an empty file\n  if (contents.trim() === \"\") {\n    return {};\n  }\n  try {\n    return JSON5.parse(contents);\n  } catch (err) {\n    if (!(0, _iserror.default)(err)) throw err;\n    const {\n      codeFrameColumns\n    } = require(\"next/dist/compiled/babel/code-frame\");\n    const codeFrame = codeFrameColumns(String(contents), {\n      start: {\n        line: err.lineNumber || 0,\n        column: err.columnNumber || 0\n      }\n    }, {\n      message: err.message,\n      highlightCode: true\n    });\n    throw new Error(`Failed to parse \"${filePath}\":\\n${codeFrame}`);\n  }\n}\nasync function loadJsConfig(dir, config) {\n  let typeScriptPath;\n  try {\n    const deps = await (0, _hasnecessarydependencies.hasNecessaryDependencies)(dir, [{\n      pkg: \"typescript\",\n      file: \"typescript/lib/typescript.js\",\n      exportsRestrict: true\n    }]);\n    typeScriptPath = deps.resolved.get(\"typescript\");\n  } catch {}\n  const tsConfigPath = _path.default.join(dir, config.typescript.tsconfigPath);\n  const useTypeScript = Boolean(typeScriptPath && (await (0, _fileexists.fileExists)(tsConfigPath)));\n  let implicitBaseurl;\n  let jsConfig;\n  // jsconfig is a subset of tsconfig\n  if (useTypeScript) {\n    if (config.typescript.tsconfigPath !== \"tsconfig.json\" && TSCONFIG_WARNED === false) {\n      TSCONFIG_WARNED = true;\n      _log.info(`Using tsconfig file: ${config.typescript.tsconfigPath}`);\n    }\n    const ts = await Promise.resolve(require(typeScriptPath));\n    const tsConfig = await (0, _getTypeScriptConfiguration.getTypeScriptConfiguration)(ts, tsConfigPath, true);\n    jsConfig = {\n      compilerOptions: tsConfig.options\n    };\n    implicitBaseurl = _path.default.dirname(tsConfigPath);\n  }\n  const jsConfigPath = _path.default.join(dir, \"jsconfig.json\");\n  if (!useTypeScript && (await (0, _fileexists.fileExists)(jsConfigPath))) {\n    jsConfig = parseJsonFile(jsConfigPath);\n    implicitBaseurl = _path.default.dirname(jsConfigPath);\n  }\n  let resolvedBaseUrl;\n  if (jsConfig) {\n    var _jsConfig_compilerOptions;\n    if ((_jsConfig_compilerOptions = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions.baseUrl) {\n      resolvedBaseUrl = _path.default.resolve(dir, jsConfig.compilerOptions.baseUrl);\n    } else {\n      resolvedBaseUrl = implicitBaseurl;\n    }\n  }\n  return {\n    useTypeScript,\n    jsConfig,\n    resolvedBaseUrl\n  };\n}","map":{"version":3,"names":["loadJsConfig","TSCONFIG_WARNED","parseJsonFile","filePath","JSON5","require","contents","_fs","readFileSync","trim","parse","err","_iserror","default","codeFrameColumns","codeFrame","String","start","line","lineNumber","column","columnNumber","message","highlightCode","Error","dir","config","typeScriptPath","deps","_hasnecessarydependencies","hasNecessaryDependencies","pkg","file","exportsRestrict","resolved","get","tsConfigPath","_path","join","typescript","tsconfigPath","useTypeScript","Boolean","_fileexists","fileExists","implicitBaseurl","jsConfig","_log","info","ts","Promise","resolve","tsConfig","_getTypeScriptConfiguration","getTypeScriptConfiguration","compilerOptions","options","dirname","jsConfigPath","resolvedBaseUrl","_jsConfig_compilerOptions","baseUrl"],"sources":["../../src/build/load-jsconfig.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}