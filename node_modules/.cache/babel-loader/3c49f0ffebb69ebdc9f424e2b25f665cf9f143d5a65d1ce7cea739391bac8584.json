{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"getCacheDirectory\", {\n  enumerable: true,\n  get: function () {\n    return getCacheDirectory;\n  }\n});\nconst _os = /*#__PURE__*/_interop_require_default(require(\"os\"));\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nconst _fileexists = require(\"../file-exists\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nasync function getCacheDirectory(fileDirectory, envPath) {\n  let result;\n  if (envPath) {\n    result = envPath;\n  } else {\n    let systemCacheDirectory;\n    if (process.platform === \"linux\") {\n      systemCacheDirectory = process.env.XDG_CACHE_HOME || _path.default.join(_os.default.homedir(), \".cache\");\n    } else if (process.platform === \"darwin\") {\n      systemCacheDirectory = _path.default.join(_os.default.homedir(), \"Library\", \"Caches\");\n    } else if (process.platform === \"win32\") {\n      systemCacheDirectory = process.env.LOCALAPPDATA || _path.default.join(_os.default.homedir(), \"AppData\", \"Local\");\n    } else {\n      /// Attempt to use generic tmp location for un-handled platform\n      if (!systemCacheDirectory) {\n        for (const dir of [_path.default.join(_os.default.homedir(), \".cache\"), _path.default.join(_os.default.tmpdir())]) {\n          if (await (0, _fileexists.fileExists)(dir)) {\n            systemCacheDirectory = dir;\n            break;\n          }\n        }\n      }\n      if (!systemCacheDirectory) {\n        console.error(new Error(\"Unsupported platform: \" + process.platform));\n        process.exit(0);\n      }\n    }\n    result = _path.default.join(systemCacheDirectory, fileDirectory);\n  }\n  if (!_path.default.isAbsolute(result)) {\n    // It is important to resolve to the absolute path:\n    //   - for unzipping to work correctly;\n    //   - so that registry directory matches between installation and execution.\n    // INIT_CWD points to the root of `npm/yarn install` and is probably what\n    // the user meant when typing the relative path.\n    result = _path.default.resolve(process.env[\"INIT_CWD\"] || process.cwd(), result);\n  }\n  return result;\n}","map":{"version":3,"names":["getCacheDirectory","fileDirectory","envPath","result","systemCacheDirectory","process","platform","env","XDG_CACHE_HOME","_path","default","join","_os","homedir","LOCALAPPDATA","dir","tmpdir","_fileexists","fileExists","console","error","Error","exit","isAbsolute","resolve","cwd"],"sources":["../../../src/lib/helpers/get-cache-directory.ts"],"sourcesContent":[null],"mappings":";;;;;+BAMsB;;;WAAAA,iBAAA;;;0DANP;4DACE;4BACU;;;;;;AAIpB,eAAeA,kBACpBC,aAAqB,EACrBC,OAAgB;EAEhB,IAAIC,MAAA;EAEJ,IAAID,OAAA,EAAS;IACXC,MAAA,GAASD,OAAA;EACX,OAAO;IACL,IAAIE,oBAAA;IACJ,IAAIC,OAAA,CAAQC,QAAQ,KAAK,SAAS;MAChCF,oBAAA,GACEC,OAAA,CAAQE,GAAG,CAACC,cAAc,IAAIC,KAAA,CAAAC,OAAI,CAACC,IAAI,CAACC,GAAA,CAAAF,OAAE,CAACG,OAAO,IAAI;IAC1D,OAAO,IAAIR,OAAA,CAAQC,QAAQ,KAAK,UAAU;MACxCF,oBAAA,GAAuBK,KAAA,CAAAC,OAAI,CAACC,IAAI,CAACC,GAAA,CAAAF,OAAE,CAACG,OAAO,IAAI,WAAW;IAC5D,OAAO,IAAIR,OAAA,CAAQC,QAAQ,KAAK,SAAS;MACvCF,oBAAA,GACEC,OAAA,CAAQE,GAAG,CAACO,YAAY,IAAIL,KAAA,CAAAC,OAAI,CAACC,IAAI,CAACC,GAAA,CAAAF,OAAE,CAACG,OAAO,IAAI,WAAW;IACnE,OAAO;MACL;MACA,IAAI,CAACT,oBAAA,EAAsB;QACzB,KAAK,MAAMW,GAAA,IAAO,CAChBN,KAAA,CAAAC,OAAI,CAACC,IAAI,CAACC,GAAA,CAAAF,OAAE,CAACG,OAAO,IAAI,WACxBJ,KAAA,CAAAC,OAAI,CAACC,IAAI,CAACC,GAAA,CAAAF,OAAE,CAACM,MAAM,IACpB,EAAE;UACD,IAAI,MAAM,IAAAC,WAAA,CAAAC,UAAU,EAACH,GAAA,GAAM;YACzBX,oBAAA,GAAuBW,GAAA;YACvB;UACF;QACF;MACF;MAEA,IAAI,CAACX,oBAAA,EAAsB;QACzBe,OAAA,CAAQC,KAAK,CAAC,IAAIC,KAAA,CAAM,2BAA2BhB,OAAA,CAAQC,QAAQ;QACnED,OAAA,CAAQiB,IAAI,CAAC;MACf;IACF;IACAnB,MAAA,GAASM,KAAA,CAAAC,OAAI,CAACC,IAAI,CAACP,oBAAA,EAAsBH,aAAA;EAC3C;EAEA,IAAI,CAACQ,KAAA,CAAAC,OAAI,CAACa,UAAU,CAACpB,MAAA,GAAS;IAC5B;IACA;IACA;IACA;IACA;IACAA,MAAA,GAASM,KAAA,CAAAC,OAAI,CAACc,OAAO,CAACnB,OAAA,CAAQE,GAAG,CAAC,WAAW,IAAIF,OAAA,CAAQoB,GAAG,IAAItB,MAAA;EAClE;EACA,OAAOA,MAAA;AACT"},"metadata":{},"sourceType":"script","externalDependencies":[]}