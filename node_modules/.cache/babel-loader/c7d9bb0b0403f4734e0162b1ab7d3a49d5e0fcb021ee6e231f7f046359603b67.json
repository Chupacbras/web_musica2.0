{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findFontFilesInCss = void 0;\n/**\n * Find all font files in the CSS response and determine which files should be preloaded.\n * In Google Fonts responses, the @font-face's subset is above it in a comment.\n * Walk through the CSS from top to bottom, keeping track of the current subset.\n */\nfunction findFontFilesInCss(css, subsetsToPreload) {\n  var _a, _b;\n  // Find font files to download\n  const fontFiles = [];\n  // Keep track of the current subset\n  let currentSubset = '';\n  for (const line of css.split('\\n')) {\n    const newSubset = (_a = /\\/\\* (.+?) \\*\\//.exec(line)) === null || _a === void 0 ? void 0 : _a[1];\n    if (newSubset) {\n      // Found new subset in a comment above the next @font-face declaration\n      currentSubset = newSubset;\n    } else {\n      const googleFontFileUrl = (_b = /src: url\\((.+?)\\)/.exec(line)) === null || _b === void 0 ? void 0 : _b[1];\n      if (googleFontFileUrl && !fontFiles.some(foundFile => foundFile.googleFontFileUrl === googleFontFileUrl)) {\n        // Found the font file in the @font-face declaration.\n        fontFiles.push({\n          googleFontFileUrl,\n          preloadFontFile: !!(subsetsToPreload === null || subsetsToPreload === void 0 ? void 0 : subsetsToPreload.includes(currentSubset))\n        });\n      }\n    }\n  }\n  return fontFiles;\n}\nexports.findFontFilesInCss = findFontFilesInCss;","map":{"version":3,"names":["Object","defineProperty","exports","value","findFontFilesInCss","css","subsetsToPreload","_a","_b","fontFiles","currentSubset","line","split","newSubset","exec","googleFontFileUrl","some","foundFile","push","preloadFontFile","includes"],"sources":["/Users/albertformatger/Documents/GitHub/web_musica/node_modules/next/dist/compiled/@next/font/dist/google/find-font-files-in-css.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findFontFilesInCss = void 0;\n/**\n * Find all font files in the CSS response and determine which files should be preloaded.\n * In Google Fonts responses, the @font-face's subset is above it in a comment.\n * Walk through the CSS from top to bottom, keeping track of the current subset.\n */\nfunction findFontFilesInCss(css, subsetsToPreload) {\n    var _a, _b;\n    // Find font files to download\n    const fontFiles = [];\n    // Keep track of the current subset\n    let currentSubset = '';\n    for (const line of css.split('\\n')) {\n        const newSubset = (_a = /\\/\\* (.+?) \\*\\//.exec(line)) === null || _a === void 0 ? void 0 : _a[1];\n        if (newSubset) {\n            // Found new subset in a comment above the next @font-face declaration\n            currentSubset = newSubset;\n        }\n        else {\n            const googleFontFileUrl = (_b = /src: url\\((.+?)\\)/.exec(line)) === null || _b === void 0 ? void 0 : _b[1];\n            if (googleFontFileUrl &&\n                !fontFiles.some((foundFile) => foundFile.googleFontFileUrl === googleFontFileUrl)) {\n                // Found the font file in the @font-face declaration.\n                fontFiles.push({\n                    googleFontFileUrl,\n                    preloadFontFile: !!(subsetsToPreload === null || subsetsToPreload === void 0 ? void 0 : subsetsToPreload.includes(currentSubset)),\n                });\n            }\n        }\n    }\n    return fontFiles;\n}\nexports.findFontFilesInCss = findFontFilesInCss;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAG,KAAK,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA,SAASA,kBAAkBA,CAACC,GAAG,EAAEC,gBAAgB,EAAE;EAC/C,IAAIC,EAAE,EAAEC,EAAE;EACV;EACA,MAAMC,SAAS,GAAG,EAAE;EACpB;EACA,IAAIC,aAAa,GAAG,EAAE;EACtB,KAAK,MAAMC,IAAI,IAAIN,GAAG,CAACO,KAAK,CAAC,IAAI,CAAC,EAAE;IAChC,MAAMC,SAAS,GAAG,CAACN,EAAE,GAAG,iBAAiB,CAACO,IAAI,CAACH,IAAI,CAAC,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC,CAAC,CAAC;IAChG,IAAIM,SAAS,EAAE;MACX;MACAH,aAAa,GAAGG,SAAS;IAC7B,CAAC,MACI;MACD,MAAME,iBAAiB,GAAG,CAACP,EAAE,GAAG,mBAAmB,CAACM,IAAI,CAACH,IAAI,CAAC,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC,CAAC,CAAC;MAC1G,IAAIO,iBAAiB,IACjB,CAACN,SAAS,CAACO,IAAI,CAAEC,SAAS,IAAKA,SAAS,CAACF,iBAAiB,KAAKA,iBAAiB,CAAC,EAAE;QACnF;QACAN,SAAS,CAACS,IAAI,CAAC;UACXH,iBAAiB;UACjBI,eAAe,EAAE,CAAC,EAAEb,gBAAgB,KAAK,IAAI,IAAIA,gBAAgB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,gBAAgB,CAACc,QAAQ,CAACV,aAAa,CAAC;QACpI,CAAC,CAAC;MACN;IACJ;EACJ;EACA,OAAOD,SAAS;AACpB;AACAP,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}