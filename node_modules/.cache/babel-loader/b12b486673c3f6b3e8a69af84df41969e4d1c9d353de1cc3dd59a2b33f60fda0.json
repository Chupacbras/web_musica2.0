{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pickFontFileForFallbackGeneration = void 0;\nconst next_font_error_1 = require(\"../next-font-error\");\nconst NORMAL_WEIGHT = 400;\nconst BOLD_WEIGHT = 700;\n/**\n * Convert the weight string to a number so it can be used for comparison.\n * Weights can be defined as a number, 'normal' or 'bold'. https://developer.mozilla.org/docs/Web/CSS/@font-face/font-weight\n */\nfunction getWeightNumber(weight) {\n  return weight === 'normal' ? NORMAL_WEIGHT : weight === 'bold' ? BOLD_WEIGHT : Number(weight);\n}\n/**\n * Get the distance from normal (400) weight for the provided weight.\n * If it's not a variable font we can just return the distance.\n * If it's a variable font we need to compare its weight range to 400.\n */\nfunction getDistanceFromNormalWeight(weight) {\n  if (!weight) return 0;\n  // If it's a variable font the weight is defined with two numbers \"100 900\", rather than just one \"400\"\n  const [firstWeight, secondWeight] = weight.trim().split(/ +/).map(getWeightNumber);\n  if (Number.isNaN(firstWeight) || Number.isNaN(secondWeight)) {\n    (0, next_font_error_1.nextFontError)(`Invalid weight value in src array: \\`${weight}\\`.\\nExpected \\`normal\\`, \\`bold\\` or a number.`);\n  }\n  // If the weight doesn't have have a second value, it's not a variable font\n  // If that's the case, just return the distance from normal weight\n  if (!secondWeight) {\n    return firstWeight - NORMAL_WEIGHT;\n  }\n  // Normal weight is within variable font range\n  if (firstWeight <= NORMAL_WEIGHT && secondWeight >= NORMAL_WEIGHT) {\n    return 0;\n  }\n  // Normal weight is outside variable font range\n  // Return the distance of normal weight to the variable font range\n  const firstWeightDistance = firstWeight - NORMAL_WEIGHT;\n  const secondWeightDistance = secondWeight - NORMAL_WEIGHT;\n  if (Math.abs(firstWeightDistance) < Math.abs(secondWeightDistance)) {\n    return firstWeightDistance;\n  }\n  return secondWeightDistance;\n}\n/**\n * If multiple font files are provided for a font family, we need to pick one to use for the automatic fallback generation.\n * This function returns the font file that is most likely to be used for the bulk of the text on a page.\n *\n * There are some assumptions here about the text on a page when picking the font file:\n * - Most of the text will have normal weight, use the one closest to 400\n * - Most of the text will have normal style, prefer normal over italic\n * - If two font files have the same distance from normal weight, the thinner one will most likely be the bulk of the text\n */\nfunction pickFontFileForFallbackGeneration(fontFiles) {\n  return fontFiles.reduce((usedFontFile, currentFontFile) => {\n    if (!usedFontFile) return currentFontFile;\n    const usedFontDistance = getDistanceFromNormalWeight(usedFontFile.weight);\n    const currentFontDistance = getDistanceFromNormalWeight(currentFontFile.weight);\n    // Prefer normal style if they have the same weight\n    if (usedFontDistance === currentFontDistance && (typeof currentFontFile.style === 'undefined' || currentFontFile.style === 'normal')) {\n      return currentFontFile;\n    }\n    const absUsedDistance = Math.abs(usedFontDistance);\n    const absCurrentDistance = Math.abs(currentFontDistance);\n    // Use closest absolute distance to normal weight\n    if (absCurrentDistance < absUsedDistance) return currentFontFile;\n    // Prefer the thinner font if both have the same absolute distance from normal weight\n    if (absUsedDistance === absCurrentDistance && currentFontDistance < usedFontDistance) {\n      return currentFontFile;\n    }\n    return usedFontFile;\n  });\n}\nexports.pickFontFileForFallbackGeneration = pickFontFileForFallbackGeneration;","map":{"version":3,"names":["Object","defineProperty","exports","value","pickFontFileForFallbackGeneration","next_font_error_1","require","NORMAL_WEIGHT","BOLD_WEIGHT","getWeightNumber","weight","Number","getDistanceFromNormalWeight","firstWeight","secondWeight","trim","split","map","isNaN","nextFontError","firstWeightDistance","secondWeightDistance","Math","abs","fontFiles","reduce","usedFontFile","currentFontFile","usedFontDistance","currentFontDistance","style","absUsedDistance","absCurrentDistance"],"sources":["/Users/albertformatger/Documents/GitHub/web_musica/node_modules/next/dist/compiled/@next/font/dist/local/pick-font-file-for-fallback-generation.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pickFontFileForFallbackGeneration = void 0;\nconst next_font_error_1 = require(\"../next-font-error\");\nconst NORMAL_WEIGHT = 400;\nconst BOLD_WEIGHT = 700;\n/**\n * Convert the weight string to a number so it can be used for comparison.\n * Weights can be defined as a number, 'normal' or 'bold'. https://developer.mozilla.org/docs/Web/CSS/@font-face/font-weight\n */\nfunction getWeightNumber(weight) {\n    return weight === 'normal'\n        ? NORMAL_WEIGHT\n        : weight === 'bold'\n            ? BOLD_WEIGHT\n            : Number(weight);\n}\n/**\n * Get the distance from normal (400) weight for the provided weight.\n * If it's not a variable font we can just return the distance.\n * If it's a variable font we need to compare its weight range to 400.\n */\nfunction getDistanceFromNormalWeight(weight) {\n    if (!weight)\n        return 0;\n    // If it's a variable font the weight is defined with two numbers \"100 900\", rather than just one \"400\"\n    const [firstWeight, secondWeight] = weight\n        .trim()\n        .split(/ +/)\n        .map(getWeightNumber);\n    if (Number.isNaN(firstWeight) || Number.isNaN(secondWeight)) {\n        (0, next_font_error_1.nextFontError)(`Invalid weight value in src array: \\`${weight}\\`.\\nExpected \\`normal\\`, \\`bold\\` or a number.`);\n    }\n    // If the weight doesn't have have a second value, it's not a variable font\n    // If that's the case, just return the distance from normal weight\n    if (!secondWeight) {\n        return firstWeight - NORMAL_WEIGHT;\n    }\n    // Normal weight is within variable font range\n    if (firstWeight <= NORMAL_WEIGHT && secondWeight >= NORMAL_WEIGHT) {\n        return 0;\n    }\n    // Normal weight is outside variable font range\n    // Return the distance of normal weight to the variable font range\n    const firstWeightDistance = firstWeight - NORMAL_WEIGHT;\n    const secondWeightDistance = secondWeight - NORMAL_WEIGHT;\n    if (Math.abs(firstWeightDistance) < Math.abs(secondWeightDistance)) {\n        return firstWeightDistance;\n    }\n    return secondWeightDistance;\n}\n/**\n * If multiple font files are provided for a font family, we need to pick one to use for the automatic fallback generation.\n * This function returns the font file that is most likely to be used for the bulk of the text on a page.\n *\n * There are some assumptions here about the text on a page when picking the font file:\n * - Most of the text will have normal weight, use the one closest to 400\n * - Most of the text will have normal style, prefer normal over italic\n * - If two font files have the same distance from normal weight, the thinner one will most likely be the bulk of the text\n */\nfunction pickFontFileForFallbackGeneration(fontFiles) {\n    return fontFiles.reduce((usedFontFile, currentFontFile) => {\n        if (!usedFontFile)\n            return currentFontFile;\n        const usedFontDistance = getDistanceFromNormalWeight(usedFontFile.weight);\n        const currentFontDistance = getDistanceFromNormalWeight(currentFontFile.weight);\n        // Prefer normal style if they have the same weight\n        if (usedFontDistance === currentFontDistance &&\n            (typeof currentFontFile.style === 'undefined' ||\n                currentFontFile.style === 'normal')) {\n            return currentFontFile;\n        }\n        const absUsedDistance = Math.abs(usedFontDistance);\n        const absCurrentDistance = Math.abs(currentFontDistance);\n        // Use closest absolute distance to normal weight\n        if (absCurrentDistance < absUsedDistance)\n            return currentFontFile;\n        // Prefer the thinner font if both have the same absolute distance from normal weight\n        if (absUsedDistance === absCurrentDistance &&\n            currentFontDistance < usedFontDistance) {\n            return currentFontFile;\n        }\n        return usedFontFile;\n    });\n}\nexports.pickFontFileForFallbackGeneration = pickFontFileForFallbackGeneration;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iCAAiC,GAAG,KAAK,CAAC;AAClD,MAAMC,iBAAiB,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACvD,MAAMC,aAAa,GAAG,GAAG;AACzB,MAAMC,WAAW,GAAG,GAAG;AACvB;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACC,MAAM,EAAE;EAC7B,OAAOA,MAAM,KAAK,QAAQ,GACpBH,aAAa,GACbG,MAAM,KAAK,MAAM,GACbF,WAAW,GACXG,MAAM,CAACD,MAAM,CAAC;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,2BAA2BA,CAACF,MAAM,EAAE;EACzC,IAAI,CAACA,MAAM,EACP,OAAO,CAAC;EACZ;EACA,MAAM,CAACG,WAAW,EAAEC,YAAY,CAAC,GAAGJ,MAAM,CACrCK,IAAI,CAAC,CAAC,CACNC,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAACR,eAAe,CAAC;EACzB,IAAIE,MAAM,CAACO,KAAK,CAACL,WAAW,CAAC,IAAIF,MAAM,CAACO,KAAK,CAACJ,YAAY,CAAC,EAAE;IACzD,CAAC,CAAC,EAAET,iBAAiB,CAACc,aAAa,EAAG,wCAAuCT,MAAO,iDAAgD,CAAC;EACzI;EACA;EACA;EACA,IAAI,CAACI,YAAY,EAAE;IACf,OAAOD,WAAW,GAAGN,aAAa;EACtC;EACA;EACA,IAAIM,WAAW,IAAIN,aAAa,IAAIO,YAAY,IAAIP,aAAa,EAAE;IAC/D,OAAO,CAAC;EACZ;EACA;EACA;EACA,MAAMa,mBAAmB,GAAGP,WAAW,GAAGN,aAAa;EACvD,MAAMc,oBAAoB,GAAGP,YAAY,GAAGP,aAAa;EACzD,IAAIe,IAAI,CAACC,GAAG,CAACH,mBAAmB,CAAC,GAAGE,IAAI,CAACC,GAAG,CAACF,oBAAoB,CAAC,EAAE;IAChE,OAAOD,mBAAmB;EAC9B;EACA,OAAOC,oBAAoB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASjB,iCAAiCA,CAACoB,SAAS,EAAE;EAClD,OAAOA,SAAS,CAACC,MAAM,CAAC,CAACC,YAAY,EAAEC,eAAe,KAAK;IACvD,IAAI,CAACD,YAAY,EACb,OAAOC,eAAe;IAC1B,MAAMC,gBAAgB,GAAGhB,2BAA2B,CAACc,YAAY,CAAChB,MAAM,CAAC;IACzE,MAAMmB,mBAAmB,GAAGjB,2BAA2B,CAACe,eAAe,CAACjB,MAAM,CAAC;IAC/E;IACA,IAAIkB,gBAAgB,KAAKC,mBAAmB,KACvC,OAAOF,eAAe,CAACG,KAAK,KAAK,WAAW,IACzCH,eAAe,CAACG,KAAK,KAAK,QAAQ,CAAC,EAAE;MACzC,OAAOH,eAAe;IAC1B;IACA,MAAMI,eAAe,GAAGT,IAAI,CAACC,GAAG,CAACK,gBAAgB,CAAC;IAClD,MAAMI,kBAAkB,GAAGV,IAAI,CAACC,GAAG,CAACM,mBAAmB,CAAC;IACxD;IACA,IAAIG,kBAAkB,GAAGD,eAAe,EACpC,OAAOJ,eAAe;IAC1B;IACA,IAAII,eAAe,KAAKC,kBAAkB,IACtCH,mBAAmB,GAAGD,gBAAgB,EAAE;MACxC,OAAOD,eAAe;IAC1B;IACA,OAAOD,YAAY;EACvB,CAAC,CAAC;AACN;AACAxB,OAAO,CAACE,iCAAiC,GAAGA,iCAAiC"},"metadata":{},"sourceType":"script","externalDependencies":[]}