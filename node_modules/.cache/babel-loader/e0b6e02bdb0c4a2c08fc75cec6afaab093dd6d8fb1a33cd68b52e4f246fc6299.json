{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"getCssModuleLoader\", {\n  enumerable: true,\n  get: function () {\n    return getCssModuleLoader;\n  }\n});\nconst _client = require(\"./client\");\nconst _fileresolve = require(\"./file-resolve\");\nconst _getCssModuleLocalIdent = require(\"./getCssModuleLocalIdent\");\nfunction getCssModuleLoader(ctx, postcss, preProcessors = []) {\n  const loaders = [];\n  if (ctx.isClient) {\n    // Add appropriate development more or production mode style\n    // loader\n    loaders.push((0, _client.getClientStyleLoader)({\n      hasAppDir: ctx.hasAppDir,\n      isAppDir: ctx.isAppDir,\n      isDevelopment: ctx.isDevelopment,\n      assetPrefix: ctx.assetPrefix\n    }));\n  }\n  // Resolve CSS `@import`s and `url()`s\n  loaders.push({\n    loader: require.resolve(\"../../../../loaders/css-loader/src\"),\n    options: {\n      postcss,\n      importLoaders: 1 + preProcessors.length,\n      // Use CJS mode for backwards compatibility:\n      esModule: false,\n      url: (url, resourcePath) => (0, _fileresolve.cssFileResolve)(url, resourcePath, ctx.experimental.urlImports),\n      import: (url, _, resourcePath) => (0, _fileresolve.cssFileResolve)(url, resourcePath, ctx.experimental.urlImports),\n      modules: {\n        // Do not transform class names (CJS mode backwards compatibility):\n        exportLocalsConvention: \"asIs\",\n        // Server-side (Node.js) rendering support:\n        exportOnlyLocals: ctx.isServer,\n        // Disallow global style exports so we can code-split CSS and\n        // not worry about loading order.\n        mode: \"pure\",\n        // Generate a friendly production-ready name so it's\n        // reasonably understandable. The same name is used for\n        // development.\n        // TODO: Consider making production reduce this to a single\n        // character?\n        getLocalIdent: _getCssModuleLocalIdent.getCssModuleLocalIdent\n      }\n    }\n  });\n  // Compile CSS\n  loaders.push({\n    loader: require.resolve(\"../../../../loaders/postcss-loader/src\"),\n    options: {\n      postcss\n    }\n  });\n  loaders.push(\n  // Webpack loaders run like a stack, so we need to reverse the natural\n  // order of preprocessors.\n  ...preProcessors.slice().reverse());\n  return loaders;\n}","map":{"version":3,"names":["getCssModuleLoader","ctx","postcss","preProcessors","loaders","isClient","push","_client","getClientStyleLoader","hasAppDir","isAppDir","isDevelopment","assetPrefix","loader","require","resolve","options","importLoaders","length","esModule","url","resourcePath","_fileresolve","cssFileResolve","experimental","urlImports","import","_","modules","exportLocalsConvention","exportOnlyLocals","isServer","mode","getLocalIdent","_getCssModuleLocalIdent","getCssModuleLocalIdent","slice","reverse"],"sources":["../../../../../../../src/build/webpack/config/blocks/css/loaders/modules.ts"],"sourcesContent":[null],"mappings":";;;;;+BAMgB;;;WAAAA,kBAAA;;;wBAJqB;6BACN;wCACQ;AAEhC,SAASA,mBACdC,GAAyB,EACzBC,OAAY,EACZC,aAAA,GAAmD,EAAE;EAErD,MAAMC,OAAA,GAAoC,EAAE;EAE5C,IAAIH,GAAA,CAAII,QAAQ,EAAE;IAChB;IACA;IACAD,OAAA,CAAQE,IAAI,CACV,IAAAC,OAAA,CAAAC,oBAAoB,EAAC;MACnBC,SAAA,EAAWR,GAAA,CAAIQ,SAAS;MACxBC,QAAA,EAAUT,GAAA,CAAIS,QAAQ;MACtBC,aAAA,EAAeV,GAAA,CAAIU,aAAa;MAChCC,WAAA,EAAaX,GAAA,CAAIW;IACnB;EAEJ;EAEA;EACAR,OAAA,CAAQE,IAAI,CAAC;IACXO,MAAA,EAAQC,OAAA,CAAQC,OAAO,CAAC;IACxBC,OAAA,EAAS;MACPd,OAAA;MACAe,aAAA,EAAe,IAAId,aAAA,CAAce,MAAM;MACvC;MACAC,QAAA,EAAU;MACVC,GAAA,EAAKA,CAACA,GAAA,EAAaC,YAAA,KACjB,IAAAC,YAAA,CAAAC,cAAc,EAACH,GAAA,EAAKC,YAAA,EAAcpB,GAAA,CAAIuB,YAAY,CAACC,UAAU;MAC/DC,MAAA,EAAQA,CAACN,GAAA,EAAaO,CAAA,EAAQN,YAAA,KAC5B,IAAAC,YAAA,CAAAC,cAAc,EAACH,GAAA,EAAKC,YAAA,EAAcpB,GAAA,CAAIuB,YAAY,CAACC,UAAU;MAC/DG,OAAA,EAAS;QACP;QACAC,sBAAA,EAAwB;QACxB;QACAC,gBAAA,EAAkB7B,GAAA,CAAI8B,QAAQ;QAC9B;QACA;QACAC,IAAA,EAAM;QACN;QACA;QACA;QACA;QACA;QACAC,aAAA,EAAeC,uBAAA,CAAAC;MACjB;IACF;EACF;EAEA;EACA/B,OAAA,CAAQE,IAAI,CAAC;IACXO,MAAA,EAAQC,OAAA,CAAQC,OAAO,CAAC;IACxBC,OAAA,EAAS;MACPd;IACF;EACF;EAEAE,OAAA,CAAQE,IAAI;EACV;EACA;KACGH,aAAA,CAAciC,KAAK,GAAGC,OAAO;EAGlC,OAAOjC,OAAA;AACT"},"metadata":{},"sourceType":"script","externalDependencies":[]}