{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"getTypeScriptConfiguration\", {\n  enumerable: true,\n  get: function () {\n    return getTypeScriptConfiguration;\n  }\n});\nconst _chalk = /*#__PURE__*/_interop_require_default(require(\"next/dist/compiled/chalk\"));\nconst _os = /*#__PURE__*/_interop_require_default(require(\"os\"));\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nconst _fatalerror = require(\"../fatal-error\");\nconst _iserror = /*#__PURE__*/_interop_require_default(require(\"../is-error\"));\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nasync function getTypeScriptConfiguration(ts, tsConfigPath, metaOnly) {\n  try {\n    var _result_errors;\n    const formatDiagnosticsHost = {\n      getCanonicalFileName: fileName => fileName,\n      getCurrentDirectory: ts.sys.getCurrentDirectory,\n      getNewLine: () => _os.default.EOL\n    };\n    const {\n      config,\n      error\n    } = ts.readConfigFile(tsConfigPath, ts.sys.readFile);\n    if (error) {\n      throw new _fatalerror.FatalError(ts.formatDiagnostic(error, formatDiagnosticsHost));\n    }\n    let configToParse = config;\n    const result = ts.parseJsonConfigFileContent(configToParse,\n    // When only interested in meta info,\n    // avoid enumerating all files (for performance reasons)\n    metaOnly ? {\n      ...ts.sys,\n      readDirectory(_path, extensions, _excludes, _includes, _depth) {\n        return [extensions ? `file${extensions[0]}` : `file.ts`];\n      }\n    } : ts.sys, _path.default.dirname(tsConfigPath));\n    if (result.errors) {\n      result.errors = result.errors.filter(({\n        code\n      }) =>\n      // No inputs were found in config file\n      code !== 18003);\n    }\n    if ((_result_errors = result.errors) == null ? void 0 : _result_errors.length) {\n      throw new _fatalerror.FatalError(ts.formatDiagnostic(result.errors[0], formatDiagnosticsHost));\n    }\n    return result;\n  } catch (err) {\n    if ((0, _iserror.default)(err) && err.name === \"SyntaxError\") {\n      const reason = \"\\n\" + (err.message ?? \"\");\n      throw new _fatalerror.FatalError(_chalk.default.red.bold(\"Could not parse\", _chalk.default.cyan(\"tsconfig.json\") + \".\" + \" Please make sure it contains syntactically correct JSON.\") + reason);\n    }\n    throw err;\n  }\n}","map":{"version":3,"names":["getTypeScriptConfiguration","ts","tsConfigPath","metaOnly","_result_errors","formatDiagnosticsHost","getCanonicalFileName","fileName","getCurrentDirectory","sys","getNewLine","_os","default","EOL","config","error","readConfigFile","readFile","_fatalerror","FatalError","formatDiagnostic","configToParse","result","parseJsonConfigFileContent","readDirectory","_path","extensions","_excludes","_includes","_depth","dirname","errors","filter","code","length","err","_iserror","name","reason","message","_chalk","red","bold","cyan"],"sources":["../../../src/lib/typescript/getTypeScriptConfiguration.ts"],"sourcesContent":[null],"mappings":";;;;;+BAOsB;;;WAAAA,0BAAA;;;6DAPJ;0DACH;4DACE;4BAEU;+DACP;;;;;;AAEb,eAAeA,2BACpBC,EAA+B,EAC/BC,YAAoB,EACpBC,QAAkB;EAElB,IAAI;QAqCEC,cAAA;IApCJ,MAAMC,qBAAA,GAAoE;MACxEC,oBAAA,EAAuBC,QAAA,IAAqBA,QAAA;MAC5CC,mBAAA,EAAqBP,EAAA,CAAGQ,GAAG,CAACD,mBAAmB;MAC/CE,UAAA,EAAYA,CAAA,KAAMC,GAAA,CAAAC,OAAE,CAACC;IACvB;IAEA,MAAM;MAAEC,MAAM;MAAEC;IAAK,CAAE,GAAGd,EAAA,CAAGe,cAAc,CAACd,YAAA,EAAcD,EAAA,CAAGQ,GAAG,CAACQ,QAAQ;IACzE,IAAIF,KAAA,EAAO;MACT,MAAM,IAAIG,WAAA,CAAAC,UAAU,CAAClB,EAAA,CAAGmB,gBAAgB,CAACL,KAAA,EAAOV,qBAAA;IAClD;IAEA,IAAIgB,aAAA,GAAqBP,MAAA;IAEzB,MAAMQ,MAAA,GAASrB,EAAA,CAAGsB,0BAA0B,CAC1CF,aAAA;IACA;IACA;IACAlB,QAAA,GACI;MACE,GAAGF,EAAA,CAAGQ,GAAG;MACTe,cAAcC,KAAK,EAAEC,UAAU,EAAEC,SAAS,EAAEC,SAAS,EAAEC,MAAM;QAC3D,OAAO,CAACH,UAAA,GAAc,OAAMA,UAAU,CAAC,EAAG,EAAC,GAAI,SAAQ,CAAC;MAC1D;IACF,IACAzB,EAAA,CAAGQ,GAAG,EACVgB,KAAA,CAAAb,OAAI,CAACkB,OAAO,CAAC5B,YAAA;IAGf,IAAIoB,MAAA,CAAOS,MAAM,EAAE;MACjBT,MAAA,CAAOS,MAAM,GAAGT,MAAA,CAAOS,MAAM,CAACC,MAAM,CAClC,CAAC;QAAEC;MAAI,CAAE;MACP;MACAA,IAAA,KAAS;IAEf;IAEA,KAAI7B,cAAA,GAAAkB,MAAA,CAAOS,MAAM,qBAAb3B,cAAA,CAAe8B,MAAM,EAAE;MACzB,MAAM,IAAIhB,WAAA,CAAAC,UAAU,CAClBlB,EAAA,CAAGmB,gBAAgB,CAACE,MAAA,CAAOS,MAAM,CAAC,EAAE,EAAE1B,qBAAA;IAE1C;IAEA,OAAOiB,MAAA;EACT,EAAE,OAAOa,GAAA,EAAK;IACZ,IAAI,IAAAC,QAAA,CAAAxB,OAAO,EAACuB,GAAA,KAAQA,GAAA,CAAIE,IAAI,KAAK,eAAe;MAC9C,MAAMC,MAAA,GAAS,QAAQH,GAAA,CAAII,OAAO,IAAI,EAAC;MACvC,MAAM,IAAIrB,WAAA,CAAAC,UAAU,CAClBqB,MAAA,CAAA5B,OAAK,CAAC6B,GAAG,CAACC,IAAI,CACZ,mBACAF,MAAA,CAAA5B,OAAK,CAAC+B,IAAI,CAAC,mBACT,MACA,+DACAL,MAAA;IAER;IACA,MAAMH,GAAA;EACR;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}