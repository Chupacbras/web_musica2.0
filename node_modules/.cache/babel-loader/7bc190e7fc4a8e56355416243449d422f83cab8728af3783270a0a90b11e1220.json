{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Merche\\\\Documents\\\\GitHub\\\\web_musica\\\\src\\\\Video_slider.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoSlider = ({\n  videos\n}) => {\n  _s();\n  const [videoIndex, setVideoIndex] = useState(0);\n\n  // Calcula el ancho de cada video basado en la cantidad de videos que tienes\n  const videoWidth = 640; // Ancho del video\n  const totalVideos = videos.length;\n  const containerWidth = videoWidth * totalVideos;\n  const opts = {\n    height: '200',\n    width: '300',\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  const handleDrag = (_, info) => {\n    // Calcula dinámicamente el índice del video basado en la posición actual del slider\n    const newIndex = Math.round(info.point.x / videoWidth);\n    // Asegúrate de que el nuevo índice esté dentro del rango de videos\n    if (newIndex >= 0 && newIndex < totalVideos) {\n      setVideoIndex(newIndex);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    className: \"slider-container-video\",\n    children: /*#__PURE__*/_jsxDEV(motion.div, {\n      className: \"slider-video\",\n      drag: \"x\",\n      dragConstraints: {\n        right: 0\n      },\n      onDrag: handleDrag,\n      style: {\n        width: containerWidth\n      },\n      children: videos.map((video, index) => /*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"item-video\",\n        style: {\n          width: videoWidth\n        },\n        children: videoIndex === index && /*#__PURE__*/_jsxDEV(YouTube, {\n          videoId: video,\n          opts: opts\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 50\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(VideoSlider, \"pzCJM+dPx8iXlluKQx+Qd2HErIY=\");\n_c = VideoSlider;\nexport default VideoSlider;\nvar _c;\n$RefreshReg$(_c, \"VideoSlider\");","map":{"version":3,"names":["VideoSlider","videos","_s","videoIndex","setVideoIndex","useState","videoWidth","totalVideos","length","containerWidth","opts","height","width","playerVars","autoplay","handleDrag","_","info","newIndex","Math","round","point","x","_jsxDEV","motion","div","className","children","drag","dragConstraints","right","onDrag","style","map","video","index","YouTube","videoId","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Merche/Documents/GitHub/web_musica/src/Video_slider.js"],"sourcesContent":["const VideoSlider = ({ videos }) => {\r\n    const [videoIndex, setVideoIndex] = useState(0);\r\n\r\n    // Calcula el ancho de cada video basado en la cantidad de videos que tienes\r\n    const videoWidth = 640; // Ancho del video\r\n    const totalVideos = videos.length;\r\n    const containerWidth = videoWidth * totalVideos;\r\n\r\n    const opts = {\r\n        height: '200',\r\n        width: '300',\r\n        playerVars: {\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n    const handleDrag = (_, info) => {\r\n        // Calcula dinámicamente el índice del video basado en la posición actual del slider\r\n        const newIndex = Math.round(info.point.x / videoWidth);\r\n        // Asegúrate de que el nuevo índice esté dentro del rango de videos\r\n        if (newIndex >= 0 && newIndex < totalVideos) {\r\n            setVideoIndex(newIndex);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <motion.div className='slider-container-video'>\r\n            <motion.div className='slider-video' drag='x' dragConstraints={{ right: 0 }} onDrag={handleDrag} style={{ width: containerWidth }}>\r\n                {videos.map((video, index) => (\r\n                    <motion.div className='item-video' key={index} style={{ width: videoWidth }}>\r\n                        {videoIndex === index && <YouTube videoId={video} opts={opts} />}\r\n                    </motion.div>\r\n                ))}\r\n            </motion.div>\r\n        </motion.div>\r\n    );\r\n};\r\n\r\nexport default VideoSlider;"],"mappings":";;;AAAA,MAAMA,WAAW,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGC,QAAQ,CAAC,CAAC,CAAC;;EAE/C;EACA,MAAMC,UAAU,GAAG,GAAG,CAAC,CAAC;EACxB,MAAMC,WAAW,GAAGN,MAAM,CAACO,MAAM;EACjC,MAAMC,cAAc,GAAGH,UAAU,GAAGC,WAAW;EAE/C,MAAMG,IAAI,GAAG;IACTC,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE,KAAK;IACZC,UAAU,EAAE;MACRC,QAAQ,EAAE;IACd;EACJ,CAAC;EAED,MAAMC,UAAU,GAAGA,CAACC,CAAC,EAAEC,IAAI,KAAK;IAC5B;IACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAACI,KAAK,CAACC,CAAC,GAAGhB,UAAU,CAAC;IACtD;IACA,IAAIY,QAAQ,IAAI,CAAC,IAAIA,QAAQ,GAAGX,WAAW,EAAE;MACzCH,aAAa,CAACc,QAAQ,CAAC;IAC3B;EACJ,CAAC;EAED,oBACIK,OAAA,CAACC,MAAM,CAACC,GAAG;IAACC,SAAS,EAAC,wBAAwB;IAAAC,QAAA,eAC1CJ,OAAA,CAACC,MAAM,CAACC,GAAG;MAACC,SAAS,EAAC,cAAc;MAACE,IAAI,EAAC,GAAG;MAACC,eAAe,EAAE;QAAEC,KAAK,EAAE;MAAE,CAAE;MAACC,MAAM,EAAEhB,UAAW;MAACiB,KAAK,EAAE;QAAEpB,KAAK,EAAEH;MAAe,CAAE;MAAAkB,QAAA,EAC7H1B,MAAM,CAACgC,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACrBZ,OAAA,CAACC,MAAM,CAACC,GAAG;QAACC,SAAS,EAAC,YAAY;QAAaM,KAAK,EAAE;UAAEpB,KAAK,EAAEN;QAAW,CAAE;QAAAqB,QAAA,EACvExB,UAAU,KAAKgC,KAAK,iBAAIZ,OAAA,CAACa,OAAO;UAACC,OAAO,EAAEH,KAAM;UAACxB,IAAI,EAAEA;QAAK;UAAA4B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC,GAD5BN,KAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEjC,CACf;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAErB,CAAC;AAACvC,EAAA,CApCIF,WAAW;AAAA0C,EAAA,GAAX1C,WAAW;AAsCjB,eAAeA,WAAW;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}