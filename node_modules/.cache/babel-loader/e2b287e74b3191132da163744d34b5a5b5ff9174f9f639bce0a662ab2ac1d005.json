{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  EntryTypes: null,\n  getEntryKey: null,\n  ADDED: null,\n  BUILDING: null,\n  BUILT: null,\n  getEntries: null,\n  getInvalidator: null,\n  onDemandEntryHandler: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  EntryTypes: function () {\n    return EntryTypes;\n  },\n  getEntryKey: function () {\n    return getEntryKey;\n  },\n  ADDED: function () {\n    return ADDED;\n  },\n  BUILDING: function () {\n    return BUILDING;\n  },\n  BUILT: function () {\n    return BUILT;\n  },\n  getEntries: function () {\n    return getEntries;\n  },\n  getInvalidator: function () {\n    return getInvalidator;\n  },\n  onDemandEntryHandler: function () {\n    return onDemandEntryHandler;\n  }\n});\nconst _debug = /*#__PURE__*/_interop_require_default(require(\"next/dist/compiled/debug\"));\nconst _events = require(\"events\");\nconst _findpagefile = require(\"../lib/find-page-file\");\nconst _entries = require(\"../../build/entries\");\nconst _path = require(\"path\");\nconst _normalizepathsep = require(\"../../shared/lib/page-path/normalize-path-sep\");\nconst _normalizepagepath = require(\"../../shared/lib/page-path/normalize-page-path\");\nconst _ensureleadingslash = require(\"../../shared/lib/page-path/ensure-leading-slash\");\nconst _removepagepathtail = require(\"../../shared/lib/page-path/remove-page-path-tail\");\nconst _output = require(\"../../build/output\");\nconst _getroutefromentrypoint = /*#__PURE__*/_interop_require_default(require(\"../get-route-from-entrypoint\"));\nconst _utils = require(\"../../build/utils\");\nconst _utils1 = require(\"../../shared/lib/utils\");\nconst _constants = require(\"../../shared/lib/constants\");\nconst _hotreloadertypes = require(\"./hot-reloader-types\");\nconst _apppageroutedefinition = require(\"../future/route-definitions/app-page-route-definition\");\nconst _scheduleonnexttick = require(\"../lib/schedule-on-next-tick\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst debug = (0, _debug.default)(\"next:on-demand-entry-handler\");\n/**\n * Returns object keys with type inferred from the object key\n */\nconst keys = Object.keys;\nconst COMPILER_KEYS = keys(_constants.COMPILER_INDEXES);\nfunction treePathToEntrypoint(segmentPath, parentPath) {\n  const [parallelRouteKey, segment] = segmentPath;\n  // TODO-APP: modify this path to cover parallelRouteKey convention\n  const path = (parentPath ? parentPath + \"/\" : \"\") + (parallelRouteKey !== \"children\" && !segment.startsWith(\"@\") ? `@${parallelRouteKey}/` : \"\") + (segment === \"\" ? \"page\" : segment);\n  // Last segment\n  if (segmentPath.length === 2) {\n    return path;\n  }\n  const childSegmentPath = segmentPath.slice(2);\n  return treePathToEntrypoint(childSegmentPath, path);\n}\nfunction convertDynamicParamTypeToSyntax(dynamicParamTypeShort, param) {\n  switch (dynamicParamTypeShort) {\n    case \"c\":\n      return `[...${param}]`;\n    case \"oc\":\n      return `[[...${param}]]`;\n    case \"d\":\n      return `[${param}]`;\n    default:\n      throw new Error(\"Unknown dynamic param type\");\n  }\n}\nfunction getEntryKey(compilerType, pageBundleType, page) {\n  // TODO: handle the /children slot better\n  // this is a quick hack to handle when children is provided as children/page instead of /page\n  const pageKey = page.replace(/(@[^/]+)\\/children/g, \"$1\");\n  return `${compilerType}@${pageBundleType}@${pageKey}`;\n}\nfunction getPageBundleType(pageBundlePath) {\n  // Handle special case for /_error\n  if (pageBundlePath === \"/_error\") return \"pages\";\n  if ((0, _utils.isMiddlewareFilename)(pageBundlePath)) return \"root\";\n  return pageBundlePath.startsWith(\"pages/\") ? \"pages\" : pageBundlePath.startsWith(\"app/\") ? \"app\" : \"root\";\n}\nfunction getEntrypointsFromTree(tree, isFirst, parentPath = []) {\n  const [segment, parallelRoutes] = tree;\n  const currentSegment = Array.isArray(segment) ? convertDynamicParamTypeToSyntax(segment[2], segment[0]) : segment;\n  const isPageSegment = currentSegment.startsWith(\"__PAGE__\");\n  const currentPath = [...parentPath, isPageSegment ? \"\" : currentSegment];\n  if (!isFirst && isPageSegment) {\n    // TODO get rid of '' at the start of tree\n    return [treePathToEntrypoint(currentPath.slice(1))];\n  }\n  return Object.keys(parallelRoutes).reduce((paths, key) => {\n    const childTree = parallelRoutes[key];\n    const childPages = getEntrypointsFromTree(childTree, false, [...currentPath, key]);\n    return [...paths, ...childPages];\n  }, []);\n}\nconst ADDED = Symbol(\"added\");\nconst BUILDING = Symbol(\"building\");\nconst BUILT = Symbol(\"built\");\nvar EntryTypes;\n(function (EntryTypes) {\n  EntryTypes[EntryTypes[\"ENTRY\"] = 0] = \"ENTRY\";\n  EntryTypes[EntryTypes[\"CHILD_ENTRY\"] = 1] = \"CHILD_ENTRY\";\n})(EntryTypes || (EntryTypes = {}));\nconst entriesMap = new Map();\n// remove /server from end of output for server compiler\nconst normalizeOutputPath = dir => dir.replace(/[/\\\\]server$/, \"\");\nconst getEntries = dir => {\n  dir = normalizeOutputPath(dir);\n  const entries = entriesMap.get(dir) || {};\n  entriesMap.set(dir, entries);\n  return entries;\n};\nconst invalidators = new Map();\nconst getInvalidator = dir => {\n  dir = normalizeOutputPath(dir);\n  return invalidators.get(dir);\n};\nconst doneCallbacks = new _events.EventEmitter();\nconst lastClientAccessPages = [\"\"];\nconst lastServerAccessPagesForAppDir = [\"\"];\n// Make sure only one invalidation happens at a time\n// Otherwise, webpack hash gets changed and it'll force the client to reload.\nclass Invalidator {\n  constructor(multiCompiler) {\n    this.building = new Set();\n    this.rebuildAgain = new Set();\n    this.multiCompiler = multiCompiler;\n  }\n  shouldRebuildAll() {\n    return this.rebuildAgain.size > 0;\n  }\n  invalidate(compilerKeys = COMPILER_KEYS) {\n    for (const key of compilerKeys) {\n      var _this_multiCompiler_compilers_COMPILER_INDEXES_key_watching;\n      // If there's a current build is processing, we won't abort it by invalidating.\n      // (If aborted, it'll cause a client side hard reload)\n      // But let it to invalidate just after the completion.\n      // So, it can re-build the queued pages at once.\n      if (this.building.has(key)) {\n        this.rebuildAgain.add(key);\n        continue;\n      }\n      this.building.add(key);\n      (_this_multiCompiler_compilers_COMPILER_INDEXES_key_watching = this.multiCompiler.compilers[_constants.COMPILER_INDEXES[key]].watching) == null ? void 0 : _this_multiCompiler_compilers_COMPILER_INDEXES_key_watching.invalidate();\n    }\n  }\n  startBuilding(compilerKey) {\n    this.building.add(compilerKey);\n  }\n  doneBuilding(compilerKeys = []) {\n    const rebuild = [];\n    for (const key of compilerKeys) {\n      this.building.delete(key);\n      if (this.rebuildAgain.has(key)) {\n        rebuild.push(key);\n        this.rebuildAgain.delete(key);\n      }\n    }\n    this.invalidate(rebuild);\n  }\n  willRebuild(compilerKey) {\n    return this.rebuildAgain.has(compilerKey);\n  }\n}\nfunction disposeInactiveEntries(entries, maxInactiveAge) {\n  Object.keys(entries).forEach(entryKey => {\n    const entryData = entries[entryKey];\n    const {\n      lastActiveTime,\n      status,\n      dispose,\n      bundlePath\n    } = entryData;\n    // TODO-APP: implement disposing of CHILD_ENTRY\n    if (entryData.type === 1) {\n      return;\n    }\n    // For the root middleware and the instrumentation hook files,\n    // we don't dispose them periodically as it's needed for every request.\n    if ((0, _utils.isMiddlewareFilename)(bundlePath) || (0, _utils.isInstrumentationHookFilename)(bundlePath)) {\n      return;\n    }\n    if (dispose)\n      // Skip pages already scheduled for disposing\n      return;\n    // This means this entry is currently building or just added\n    // We don't need to dispose those entries.\n    if (status !== BUILT) return;\n    // We should not build the last accessed page even we didn't get any pings\n    // Sometimes, it's possible our XHR ping to wait before completing other requests.\n    // In that case, we should not dispose the current viewing page\n    if (lastClientAccessPages.includes(entryKey) || lastServerAccessPagesForAppDir.includes(entryKey)) return;\n    if (lastActiveTime && Date.now() - lastActiveTime > maxInactiveAge) {\n      entries[entryKey].dispose = true;\n    }\n  });\n}\n// Normalize both app paths and page paths\nfunction tryToNormalizePagePath(page) {\n  try {\n    return (0, _normalizepagepath.normalizePagePath)(page);\n  } catch (err) {\n    console.error(err);\n    throw new _utils1.PageNotFoundError(page);\n  }\n}\n/**\n * Attempts to find a page file path from the given pages absolute directory,\n * a page and allowed extensions. If the page can't be found it will throw an\n * error. It defaults the `/_error` page to Next.js internal error page.\n *\n * @param rootDir Absolute path to the project root.\n * @param pagesDir Absolute path to the pages folder with trailing `/pages`.\n * @param normalizedPagePath The page normalized (it will be denormalized).\n * @param pageExtensions Array of page extensions.\n */\nasync function findPagePathData(rootDir, page, extensions, pagesDir, appDir) {\n  const normalizedPagePath = tryToNormalizePagePath(page);\n  let pagePath = null;\n  const isInstrumentation = (0, _utils.isInstrumentationHookFile)(normalizedPagePath);\n  if ((0, _utils.isMiddlewareFile)(normalizedPagePath) || isInstrumentation) {\n    pagePath = await (0, _findpagefile.findPageFile)(rootDir, normalizedPagePath, extensions, false);\n    if (!pagePath) {\n      throw new _utils1.PageNotFoundError(normalizedPagePath);\n    }\n    const pageUrl = (0, _ensureleadingslash.ensureLeadingSlash)((0, _removepagepathtail.removePagePathTail)((0, _normalizepathsep.normalizePathSep)(pagePath), {\n      extensions\n    }));\n    let bundlePath = normalizedPagePath;\n    let pageKey = _path.posix.normalize(pageUrl);\n    if (isInstrumentation) {\n      bundlePath = bundlePath.replace(\"/src\", \"\");\n      pageKey = page.replace(\"/src\", \"\");\n    }\n    return {\n      filename: (0, _path.join)(rootDir, pagePath),\n      bundlePath: bundlePath.slice(1),\n      page: pageKey\n    };\n  }\n  // Check appDir first falling back to pagesDir\n  if (appDir) {\n    pagePath = await (0, _findpagefile.findPageFile)(appDir, normalizedPagePath, extensions, true);\n    if (pagePath) {\n      const pageUrl = (0, _ensureleadingslash.ensureLeadingSlash)((0, _removepagepathtail.removePagePathTail)((0, _normalizepathsep.normalizePathSep)(pagePath), {\n        keepIndex: true,\n        extensions\n      }));\n      return {\n        filename: (0, _path.join)(appDir, pagePath),\n        bundlePath: _path.posix.join(\"app\", pageUrl),\n        page: _path.posix.normalize(pageUrl)\n      };\n    }\n  }\n  if (!pagePath && pagesDir) {\n    pagePath = await (0, _findpagefile.findPageFile)(pagesDir, normalizedPagePath, extensions, false);\n  }\n  if (pagePath !== null && pagesDir) {\n    const pageUrl = (0, _ensureleadingslash.ensureLeadingSlash)((0, _removepagepathtail.removePagePathTail)((0, _normalizepathsep.normalizePathSep)(pagePath), {\n      extensions\n    }));\n    return {\n      filename: (0, _path.join)(pagesDir, pagePath),\n      bundlePath: _path.posix.join(\"pages\", (0, _normalizepagepath.normalizePagePath)(pageUrl)),\n      page: _path.posix.normalize(pageUrl)\n    };\n  }\n  if (page === \"/not-found\" && appDir) {\n    return {\n      filename: require.resolve(\"next/dist/client/components/not-found-error\"),\n      bundlePath: \"app/not-found\",\n      page: \"/not-found\"\n    };\n  }\n  if (page === \"/_error\") {\n    return {\n      filename: require.resolve(\"next/dist/pages/_error\"),\n      bundlePath: page,\n      page: (0, _normalizepathsep.normalizePathSep)(page)\n    };\n  } else {\n    throw new _utils1.PageNotFoundError(normalizedPagePath);\n  }\n}\nfunction onDemandEntryHandler({\n  hotReloader,\n  maxInactiveAge,\n  multiCompiler,\n  nextConfig,\n  pagesBufferLength,\n  pagesDir,\n  rootDir,\n  appDir\n}) {\n  let curInvalidator = getInvalidator(multiCompiler.outputPath);\n  const curEntries = getEntries(multiCompiler.outputPath);\n  if (!curInvalidator) {\n    curInvalidator = new Invalidator(multiCompiler);\n    invalidators.set(multiCompiler.outputPath, curInvalidator);\n  }\n  const startBuilding = compilation => {\n    const compilationName = compilation.name;\n    curInvalidator.startBuilding(compilationName);\n  };\n  for (const compiler of multiCompiler.compilers) {\n    compiler.hooks.make.tap(\"NextJsOnDemandEntries\", startBuilding);\n  }\n  function getPagePathsFromEntrypoints(type, entrypoints, root) {\n    const pagePaths = [];\n    for (const entrypoint of entrypoints.values()) {\n      const page = (0, _getroutefromentrypoint.default)(entrypoint.name, root);\n      if (page) {\n        var _entrypoint_name;\n        const pageBundleType = ((_entrypoint_name = entrypoint.name) == null ? void 0 : _entrypoint_name.startsWith(\"app/\")) ? \"app\" : \"pages\";\n        pagePaths.push(getEntryKey(type, pageBundleType, page));\n      } else if (root && entrypoint.name === \"root\" || (0, _utils.isMiddlewareFilename)(entrypoint.name) || (0, _utils.isInstrumentationHookFilename)(entrypoint.name)) {\n        pagePaths.push(getEntryKey(type, \"root\", `/${entrypoint.name}`));\n      }\n    }\n    return pagePaths;\n  }\n  for (const compiler of multiCompiler.compilers) {\n    compiler.hooks.done.tap(\"NextJsOnDemandEntries\", () => {\n      var _getInvalidator;\n      return (_getInvalidator = getInvalidator(compiler.outputPath)) == null ? void 0 : _getInvalidator.doneBuilding([compiler.name]);\n    });\n  }\n  multiCompiler.hooks.done.tap(\"NextJsOnDemandEntries\", multiStats => {\n    var _getInvalidator;\n    const [clientStats, serverStats, edgeServerStats] = multiStats.stats;\n    const root = !!appDir;\n    const entryNames = [...getPagePathsFromEntrypoints(_constants.COMPILER_NAMES.client, clientStats.compilation.entrypoints, root), ...getPagePathsFromEntrypoints(_constants.COMPILER_NAMES.server, serverStats.compilation.entrypoints, root), ...(edgeServerStats ? getPagePathsFromEntrypoints(_constants.COMPILER_NAMES.edgeServer, edgeServerStats.compilation.entrypoints, root) : [])];\n    for (const name of entryNames) {\n      const entry = curEntries[name];\n      if (!entry) {\n        continue;\n      }\n      if (entry.status !== BUILDING) {\n        continue;\n      }\n      entry.status = BUILT;\n      doneCallbacks.emit(name);\n    }\n    (_getInvalidator = getInvalidator(multiCompiler.outputPath)) == null ? void 0 : _getInvalidator.doneBuilding([...COMPILER_KEYS]);\n  });\n  const pingIntervalTime = Math.max(1000, Math.min(5000, maxInactiveAge));\n  setInterval(function () {\n    disposeInactiveEntries(curEntries, maxInactiveAge);\n  }, pingIntervalTime + 1000).unref();\n  function handleAppDirPing(tree) {\n    const pages = getEntrypointsFromTree(tree, true);\n    for (const page of pages) {\n      for (const compilerType of [_constants.COMPILER_NAMES.client, _constants.COMPILER_NAMES.server, _constants.COMPILER_NAMES.edgeServer]) {\n        const entryKey = getEntryKey(compilerType, \"app\", `/${page}`);\n        const entryInfo = curEntries[entryKey];\n        // If there's no entry, it may have been invalidated and needs to be re-built.\n        if (!entryInfo) {\n          continue;\n        }\n        // We don't need to maintain active state of anything other than BUILT entries\n        if (entryInfo.status !== BUILT) continue;\n        // If there's an entryInfo\n        if (!lastServerAccessPagesForAppDir.includes(entryKey)) {\n          lastServerAccessPagesForAppDir.unshift(entryKey);\n          // Maintain the buffer max length\n          // TODO: verify that the current pageKey is not at the end of the array as multiple entrypoints can exist\n          if (lastServerAccessPagesForAppDir.length > pagesBufferLength) {\n            lastServerAccessPagesForAppDir.pop();\n          }\n        }\n        entryInfo.lastActiveTime = Date.now();\n        entryInfo.dispose = false;\n      }\n    }\n  }\n  function handlePing(pg) {\n    const page = (0, _normalizepathsep.normalizePathSep)(pg);\n    for (const compilerType of [_constants.COMPILER_NAMES.client, _constants.COMPILER_NAMES.server, _constants.COMPILER_NAMES.edgeServer]) {\n      const entryKey = getEntryKey(compilerType, \"pages\", page);\n      const entryInfo = curEntries[entryKey];\n      // If there's no entry, it may have been invalidated and needs to be re-built.\n      if (!entryInfo) {\n        // if (page !== lastEntry) client pings, but there's no entry for page\n        if (compilerType === _constants.COMPILER_NAMES.client) {\n          return;\n        }\n        continue;\n      }\n      // We don't need to maintain active state of anything other than BUILT entries\n      if (entryInfo.status !== BUILT) continue;\n      // If there's an entryInfo\n      if (!lastClientAccessPages.includes(entryKey)) {\n        lastClientAccessPages.unshift(entryKey);\n        // Maintain the buffer max length\n        if (lastClientAccessPages.length > pagesBufferLength) {\n          lastClientAccessPages.pop();\n        }\n      }\n      entryInfo.lastActiveTime = Date.now();\n      entryInfo.dispose = false;\n    }\n    return;\n  }\n  async function ensurePageImpl({\n    page,\n    clientOnly,\n    appPaths,\n    match,\n    isApp\n  }) {\n    const stalledTime = 60;\n    const stalledEnsureTimeout = setTimeout(() => {\n      debug(`Ensuring ${page} has taken longer than ${stalledTime}s, if this continues to stall this may be a bug`);\n    }, stalledTime * 1000);\n    try {\n      let definition;\n      if (match == null ? void 0 : match.definition) {\n        definition = match.definition;\n      } else {\n        definition = await findPagePathData(rootDir, page, nextConfig.pageExtensions, pagesDir, appDir);\n      }\n      const isInsideAppDir = !!appDir && definition.filename.startsWith(appDir);\n      if (typeof isApp === \"boolean\" && isApp !== isInsideAppDir) {\n        Error.stackTraceLimit = 15;\n        throw new Error(`Ensure bailed, found path \"${definition.page}\" does not match ensure type (${isApp ? \"app\" : \"pages\"})`);\n      }\n      const pageBundleType = getPageBundleType(definition.bundlePath);\n      const addEntry = compilerType => {\n        const entryKey = getEntryKey(compilerType, pageBundleType, definition.page);\n        if (curEntries[entryKey] &&\n        // there can be an overlap in the entryKey for the instrumentation hook file and a page named the same\n        // this is a quick fix to support this scenario by overwriting the instrumentation hook entry, since we only use it one time\n        // any changes to the instrumentation hook file will require a restart of the dev server anyway\n        !(0, _utils.isInstrumentationHookFilename)(curEntries[entryKey].bundlePath)) {\n          curEntries[entryKey].dispose = false;\n          curEntries[entryKey].lastActiveTime = Date.now();\n          if (curEntries[entryKey].status === BUILT) {\n            return {\n              entryKey,\n              newEntry: false,\n              shouldInvalidate: false\n            };\n          }\n          return {\n            entryKey,\n            newEntry: false,\n            shouldInvalidate: true\n          };\n        }\n        curEntries[entryKey] = {\n          type: 0,\n          appPaths,\n          absolutePagePath: definition.filename,\n          request: definition.filename,\n          bundlePath: definition.bundlePath,\n          dispose: false,\n          lastActiveTime: Date.now(),\n          status: ADDED\n        };\n        return {\n          entryKey: entryKey,\n          newEntry: true,\n          shouldInvalidate: true\n        };\n      };\n      const staticInfo = await (0, _entries.getStaticInfoIncludingLayouts)({\n        page,\n        pageFilePath: definition.filename,\n        isInsideAppDir,\n        pageExtensions: nextConfig.pageExtensions,\n        isDev: true,\n        config: nextConfig,\n        appDir\n      });\n      const added = new Map();\n      const isServerComponent = isInsideAppDir && staticInfo.rsc !== _constants.RSC_MODULE_TYPES.client;\n      (0, _entries.runDependingOnPageType)({\n        page: definition.page,\n        pageRuntime: staticInfo.runtime,\n        pageType: pageBundleType,\n        onClient: () => {\n          // Skip adding the client entry for app / Server Components.\n          if (isServerComponent || isInsideAppDir) {\n            return;\n          }\n          added.set(_constants.COMPILER_NAMES.client, addEntry(_constants.COMPILER_NAMES.client));\n        },\n        onServer: () => {\n          added.set(_constants.COMPILER_NAMES.server, addEntry(_constants.COMPILER_NAMES.server));\n          const edgeServerEntry = getEntryKey(_constants.COMPILER_NAMES.edgeServer, pageBundleType, definition.page);\n          if (curEntries[edgeServerEntry] && !(0, _utils.isInstrumentationHookFile)(definition.page)) {\n            // Runtime switched from edge to server\n            delete curEntries[edgeServerEntry];\n          }\n        },\n        onEdgeServer: () => {\n          added.set(_constants.COMPILER_NAMES.edgeServer, addEntry(_constants.COMPILER_NAMES.edgeServer));\n          const serverEntry = getEntryKey(_constants.COMPILER_NAMES.server, pageBundleType, definition.page);\n          if (curEntries[serverEntry] && !(0, _utils.isInstrumentationHookFile)(definition.page)) {\n            // Runtime switched from server to edge\n            delete curEntries[serverEntry];\n          }\n        }\n      });\n      const addedValues = [...added.values()];\n      const entriesThatShouldBeInvalidated = [...added.entries()].filter(([, entry]) => entry.shouldInvalidate);\n      const hasNewEntry = addedValues.some(entry => entry.newEntry);\n      if (hasNewEntry) {\n        (0, _output.reportTrigger)(!clientOnly && hasNewEntry ? `${definition.page}` : definition.page);\n      }\n      if (entriesThatShouldBeInvalidated.length > 0) {\n        const invalidatePromise = Promise.all(entriesThatShouldBeInvalidated.map(([compilerKey, {\n          entryKey\n        }]) => {\n          return new Promise((resolve, reject) => {\n            doneCallbacks.once(entryKey, err => {\n              if (err) {\n                return reject(err);\n              }\n              // If the invalidation also triggers a rebuild, we need to\n              // wait for that additional build to prevent race conditions.\n              const needsRebuild = curInvalidator.willRebuild(compilerKey);\n              if (needsRebuild) {\n                doneCallbacks.once(entryKey, rebuildErr => {\n                  if (rebuildErr) {\n                    return reject(rebuildErr);\n                  }\n                  resolve();\n                });\n              } else {\n                resolve();\n              }\n            });\n          });\n        }));\n        curInvalidator.invalidate([...added.keys()]);\n        await invalidatePromise;\n      }\n    } finally {\n      clearTimeout(stalledEnsureTimeout);\n    }\n  }\n  // Make sure that we won't have multiple invalidations ongoing concurrently.\n  const curEnsurePage = new Map();\n  return {\n    async ensurePage({\n      page,\n      clientOnly,\n      appPaths = null,\n      match,\n      isApp\n    }) {\n      // If the route is actually an app page route, then we should have access\n      // to the app route match, and therefore, the appPaths from it.\n      if (!appPaths && (match == null ? void 0 : match.definition) && (0, _apppageroutedefinition.isAppPageRouteDefinition)(match.definition)) {\n        appPaths = match.definition.appPaths;\n      }\n      // The cache key here is composed of the elements that affect the\n      // compilation, namely, the page, whether it's client only, and whether\n      // it's an app page. This ensures that we don't have multiple compilations\n      // for the same page happening concurrently.\n      //\n      // We don't include the whole match because it contains match specific\n      // parameters (like route params) that would just bust this cache. Any\n      // details that would possibly bust the cache should be listed here.\n      const key = JSON.stringify({\n        page,\n        clientOnly,\n        appPaths,\n        definition: match == null ? void 0 : match.definition,\n        isApp\n      });\n      // See if we're already building this page.\n      const pending = curEnsurePage.get(key);\n      if (pending) return pending;\n      const {\n        promise,\n        resolve,\n        reject\n      } = Promise.withResolvers();\n      curEnsurePage.set(key, promise);\n      // Schedule the build to occur on the next tick, but don't wait and\n      // instead return the promise immediately.\n      (0, _scheduleonnexttick.scheduleOnNextTick)(async () => {\n        try {\n          await ensurePageImpl({\n            page,\n            clientOnly,\n            appPaths,\n            match,\n            isApp\n          });\n          resolve();\n        } catch (err) {\n          reject(err);\n        } finally {\n          curEnsurePage.delete(key);\n        }\n      });\n      return promise;\n    },\n    onHMR(client, getHmrServerError) {\n      let bufferedHmrServerError = null;\n      client.addEventListener(\"close\", () => {\n        bufferedHmrServerError = null;\n      });\n      client.addEventListener(\"message\", ({\n        data\n      }) => {\n        try {\n          const error = getHmrServerError();\n          // New error occurred: buffered error is flushed and new error occurred\n          if (!bufferedHmrServerError && error) {\n            hotReloader.send({\n              action: _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.SERVER_ERROR,\n              errorJSON: (0, _utils1.stringifyError)(error)\n            });\n            bufferedHmrServerError = null;\n          }\n          const parsedData = JSON.parse(typeof data !== \"string\" ? data.toString() : data);\n          if (parsedData.event === \"ping\") {\n            if (parsedData.appDirRoute) {\n              handleAppDirPing(parsedData.tree);\n            } else {\n              handlePing(parsedData.page);\n            }\n          }\n        } catch {}\n      });\n    }\n  };\n}","map":{"version":3,"names":["getEntryKey","ADDED","BUILDING","BUILT","getEntries","getInvalidator","onDemandEntryHandler","debug","_debug","default","keys","Object","COMPILER_KEYS","_constants","COMPILER_INDEXES","treePathToEntrypoint","segmentPath","parentPath","parallelRouteKey","segment","path","startsWith","length","childSegmentPath","slice","convertDynamicParamTypeToSyntax","dynamicParamTypeShort","param","Error","compilerType","pageBundleType","page","pageKey","replace","getPageBundleType","pageBundlePath","_utils","isMiddlewareFilename","getEntrypointsFromTree","tree","isFirst","parallelRoutes","currentSegment","Array","isArray","isPageSegment","currentPath","reduce","paths","key","childTree","childPages","Symbol","EntryTypes","entriesMap","Map","normalizeOutputPath","dir","entries","get","set","invalidators","doneCallbacks","_events","EventEmitter","lastClientAccessPages","lastServerAccessPagesForAppDir","Invalidator","constructor","multiCompiler","building","Set","rebuildAgain","shouldRebuildAll","size","invalidate","compilerKeys","_this_multiCompiler_compilers_COMPILER_INDEXES_key_watching","has","add","compilers","watching","startBuilding","compilerKey","doneBuilding","rebuild","delete","push","willRebuild","disposeInactiveEntries","maxInactiveAge","forEach","entryKey","entryData","lastActiveTime","status","dispose","bundlePath","type","isInstrumentationHookFilename","includes","Date","now","tryToNormalizePagePath","_normalizepagepath","normalizePagePath","err","console","error","_utils1","PageNotFoundError","findPagePathData","rootDir","extensions","pagesDir","appDir","normalizedPagePath","pagePath","isInstrumentation","isInstrumentationHookFile","isMiddlewareFile","_findpagefile","findPageFile","pageUrl","_ensureleadingslash","ensureLeadingSlash","_removepagepathtail","removePagePathTail","_normalizepathsep","normalizePathSep","_path","posix","normalize","filename","join","keepIndex","require","resolve","hotReloader","nextConfig","pagesBufferLength","curInvalidator","outputPath","curEntries","compilation","compilationName","name","compiler","hooks","make","tap","getPagePathsFromEntrypoints","entrypoints","root","pagePaths","entrypoint","values","_getroutefromentrypoint","_entrypoint_name","done","_getInvalidator","multiStats","clientStats","serverStats","edgeServerStats","stats","entryNames","COMPILER_NAMES","client","server","edgeServer","entry","emit","pingIntervalTime","Math","max","min","setInterval","unref","handleAppDirPing","pages","entryInfo","unshift","pop","handlePing","pg","ensurePageImpl","clientOnly","appPaths","match","isApp","stalledTime","stalledEnsureTimeout","setTimeout","definition","pageExtensions","isInsideAppDir","stackTraceLimit","addEntry","newEntry","shouldInvalidate","absolutePagePath","request","staticInfo","_entries","getStaticInfoIncludingLayouts","pageFilePath","isDev","config","added","isServerComponent","rsc","RSC_MODULE_TYPES","runDependingOnPageType","pageRuntime","runtime","pageType","onClient","onServer","edgeServerEntry","onEdgeServer","serverEntry","addedValues","entriesThatShouldBeInvalidated","filter","hasNewEntry","some","_output","reportTrigger","invalidatePromise","Promise","all","map","reject","once","needsRebuild","rebuildErr","clearTimeout","curEnsurePage","ensurePage","_apppageroutedefinition","isAppPageRouteDefinition","JSON","stringify","pending","promise","withResolvers","_scheduleonnexttick","scheduleOnNextTick","onHMR","getHmrServerError","bufferedHmrServerError","addEventListener","data","send","action","_hotreloadertypes","HMR_ACTIONS_SENT_TO_BROWSER","SERVER_ERROR","errorJSON","stringifyError","parsedData","parse","toString","event","appDirRoute"],"sources":["../../../src/server/dev/on-demand-entry-handler.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}