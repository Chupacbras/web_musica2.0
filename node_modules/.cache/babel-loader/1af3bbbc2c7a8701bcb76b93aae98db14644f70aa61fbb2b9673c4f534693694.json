{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return exportPage;\n  }\n});\nrequire(\"../server/node-polyfill-fetch\");\nrequire(\"../server/node-polyfill-web-streams\");\nrequire(\"../server/node-environment\");\nconst _path = require(\"path\");\nconst _fs = /*#__PURE__*/_interop_require_default(require(\"fs\"));\nconst _loadcomponents = require(\"../server/load-components\");\nconst _isdynamic = require(\"../shared/lib/router/utils/is-dynamic\");\nconst _normalizepagepath = require(\"../shared/lib/page-path/normalize-page-path\");\nconst _require = require(\"../server/require\");\nconst _normalizelocalepath = require(\"../shared/lib/i18n/normalize-locale-path\");\nconst _trace = require(\"../trace\");\nconst _setuphttpagentenv = require(\"../server/setup-http-agent-env\");\nconst _iserror = /*#__PURE__*/_interop_require_default(require(\"../lib/is-error\"));\nconst _requestmeta = require(\"../server/request-meta\");\nconst _apppaths = require(\"../shared/lib/router/utils/app-paths\");\nconst _mockrequest = require(\"../server/lib/mock-request\");\nconst _isapprouteroute = require(\"../lib/is-app-route-route\");\nconst _ciinfo = require(\"../telemetry/ci-info\");\nconst _approute = require(\"./routes/app-route\");\nconst _apppage = require(\"./routes/app-page\");\nconst _pages = require(\"./routes/pages\");\nconst _getparams = require(\"./helpers/get-params\");\nconst _createincrementalcache = require(\"./helpers/create-incremental-cache\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nprocess.env.NEXT_IS_EXPORT_WORKER = \"true\";\nconst envConfig = require(\"../shared/lib/runtime-config.external\");\nglobalThis.__NEXT_DATA__ = {\n  nextExport: true\n};\nasync function exportPageImpl(input) {\n  const {\n    path,\n    pathMap,\n    distDir,\n    pagesDataDir,\n    buildExport = false,\n    serverRuntimeConfig,\n    subFolders = false,\n    optimizeFonts,\n    optimizeCss,\n    disableOptimizedLoading,\n    debugOutput = false,\n    isrMemoryCacheSize,\n    fetchCache,\n    fetchCacheKeyPrefix,\n    incrementalCacheHandlerPath,\n    enableExperimentalReact,\n    ampValidatorPath,\n    trailingSlash\n  } = input;\n  if (input.renderOpts.deploymentId) {\n    process.env.NEXT_DEPLOYMENT_ID = input.renderOpts.deploymentId;\n  }\n  if (enableExperimentalReact) {\n    process.env.__NEXT_EXPERIMENTAL_REACT = \"true\";\n  }\n  const {\n    page,\n    // Check if this is an `app/` page.\n    _isAppDir: isAppDir = false,\n    // Check if this is an `app/` prefix request.\n    _isAppPrefetch: isAppPrefetch = false,\n    // Check if this should error when dynamic usage is detected.\n    _isDynamicError: isDynamicError = false,\n    // Pull the original query out.\n    query: originalQuery = {}\n  } = pathMap;\n  try {\n    var _req_url;\n    let query = {\n      ...originalQuery\n    };\n    const pathname = (0, _apppaths.normalizeAppPath)(page);\n    const isDynamic = (0, _isdynamic.isDynamicRoute)(page);\n    const outDir = isAppDir ? (0, _path.join)(distDir, \"server/app\") : input.outDir;\n    let params;\n    const filePath = (0, _normalizepagepath.normalizePagePath)(path);\n    const ampPath = `${filePath}.amp`;\n    let renderAmpPath = ampPath;\n    let updatedPath = query.__nextSsgPath || path;\n    delete query.__nextSsgPath;\n    let locale = query.__nextLocale || input.renderOpts.locale;\n    delete query.__nextLocale;\n    if (input.renderOpts.locale) {\n      const localePathResult = (0, _normalizelocalepath.normalizeLocalePath)(path, input.renderOpts.locales);\n      if (localePathResult.detectedLocale) {\n        updatedPath = localePathResult.pathname;\n        locale = localePathResult.detectedLocale;\n        if (locale === input.renderOpts.defaultLocale) {\n          renderAmpPath = `${(0, _normalizepagepath.normalizePagePath)(updatedPath)}.amp`;\n        }\n      }\n    }\n    // We need to show a warning if they try to provide query values\n    // for an auto-exported page since they won't be available\n    const hasOrigQueryValues = Object.keys(originalQuery).length > 0;\n    // Check if the page is a specified dynamic route\n    const {\n      pathname: nonLocalizedPath\n    } = (0, _normalizelocalepath.normalizeLocalePath)(path, input.renderOpts.locales);\n    if (isDynamic && page !== nonLocalizedPath) {\n      const normalizedPage = isAppDir ? (0, _apppaths.normalizeAppPath)(page) : page;\n      params = (0, _getparams.getParams)(normalizedPage, updatedPath);\n      if (params) {\n        query = {\n          ...query,\n          ...params\n        };\n      }\n    }\n    const {\n      req,\n      res\n    } = (0, _mockrequest.createRequestResponseMocks)({\n      url: updatedPath\n    });\n    // If this is a status code page, then set the response code.\n    for (const statusCode of [404, 500]) {\n      if ([`/${statusCode}`, `/${statusCode}.html`, `/${statusCode}/index.html`].some(p => p === updatedPath || `/${locale}${p}` === updatedPath)) {\n        res.statusCode = statusCode;\n      }\n    }\n    // Ensure that the URL has a trailing slash if it's configured.\n    if (trailingSlash && !((_req_url = req.url) == null ? void 0 : _req_url.endsWith(\"/\"))) {\n      req.url += \"/\";\n    }\n    if (locale && buildExport && input.renderOpts.domainLocales && input.renderOpts.domainLocales.some(dl => {\n      var _dl_locales;\n      return dl.defaultLocale === locale || ((_dl_locales = dl.locales) == null ? void 0 : _dl_locales.includes(locale || \"\"));\n    })) {\n      (0, _requestmeta.addRequestMeta)(req, \"__nextIsLocaleDomain\", true);\n    }\n    envConfig.setConfig({\n      serverRuntimeConfig,\n      publicRuntimeConfig: input.renderOpts.runtimeConfig\n    });\n    const getHtmlFilename = p => subFolders ? `${p}${_path.sep}index.html` : `${p}.html`;\n    let htmlFilename = getHtmlFilename(filePath);\n    // dynamic routes can provide invalid extensions e.g. /blog/[...slug] returns an\n    // extension of `.slug]`\n    const pageExt = isDynamic || isAppDir ? \"\" : (0, _path.extname)(page);\n    const pathExt = isDynamic || isAppDir ? \"\" : (0, _path.extname)(path);\n    // force output 404.html for backwards compat\n    if (path === \"/404.html\") {\n      htmlFilename = path;\n    } else if (pageExt !== pathExt && pathExt !== \"\") {\n      const isBuiltinPaths = [\"/500\", \"/404\"].some(p => p === path || p === path + \".html\");\n      // If the ssg path has .html extension, and it's not builtin paths, use it directly\n      // Otherwise, use that as the filename instead\n      const isHtmlExtPath = !isBuiltinPaths && path.endsWith(\".html\");\n      htmlFilename = isHtmlExtPath ? getHtmlFilename(path) : path;\n    } else if (path === \"/\") {\n      // If the path is the root, just use index.html\n      htmlFilename = \"index.html\";\n    }\n    const baseDir = (0, _path.join)(outDir, (0, _path.dirname)(htmlFilename));\n    let htmlFilepath = (0, _path.join)(outDir, htmlFilename);\n    await _fs.default.promises.mkdir(baseDir, {\n      recursive: true\n    });\n    // If the fetch cache was enabled, we need to create an incremental\n    // cache instance for this page.\n    const incrementalCache = isAppDir && fetchCache ? (0, _createincrementalcache.createIncrementalCache)(incrementalCacheHandlerPath, isrMemoryCacheSize, fetchCacheKeyPrefix, distDir) : undefined;\n    // Handle App Routes.\n    if (isAppDir && (0, _isapprouteroute.isAppRouteRoute)(page)) {\n      return await (0, _approute.exportAppRoute)(req, res, params, page, incrementalCache, distDir, htmlFilepath);\n    }\n    const components = await (0, _loadcomponents.loadComponents)({\n      distDir,\n      page,\n      isAppPath: isAppDir\n    });\n    const renderOpts = {\n      ...components,\n      ...input.renderOpts,\n      ampPath: renderAmpPath,\n      params,\n      optimizeFonts,\n      optimizeCss,\n      disableOptimizedLoading,\n      fontManifest: optimizeFonts ? (0, _require.requireFontManifest)(distDir) : null,\n      locale,\n      supportsDynamicHTML: false,\n      originalPathname: page\n    };\n    if (_ciinfo.hasNextSupport) {\n      renderOpts.isRevalidate = true;\n    }\n    // Handle App Pages\n    if (isAppDir) {\n      // Set the incremental cache on the renderOpts, that's how app page's\n      // consume it.\n      renderOpts.incrementalCache = incrementalCache;\n      return await (0, _apppage.exportAppPage)(req, res, page, path, pathname, query, renderOpts, htmlFilepath, debugOutput, isDynamicError, isAppPrefetch);\n    }\n    return await (0, _pages.exportPages)(req, res, path, page, query, htmlFilepath, htmlFilename, ampPath, subFolders, outDir, ampValidatorPath, pagesDataDir, buildExport, isDynamic, hasOrigQueryValues, renderOpts, components);\n  } catch (err) {\n    console.error(`\\nError occurred prerendering page \"${path}\". Read more: https://nextjs.org/docs/messages/prerender-error\\n` + ((0, _iserror.default)(err) && err.stack ? err.stack : err));\n    return {\n      error: true\n    };\n  }\n}\nasync function exportPage(input) {\n  // Configure the http agent.\n  (0, _setuphttpagentenv.setHttpClientAndAgentOptions)({\n    httpAgentOptions: input.httpAgentOptions\n  });\n  const exportPageSpan = (0, _trace.trace)(\"export-page-worker\", input.parentSpanId);\n  const start = Date.now();\n  // Export the page.\n  const results = await exportPageSpan.traceAsyncFn(async () => {\n    return await exportPageImpl(input);\n  });\n  // Return it's results.\n  return {\n    ...results,\n    duration: Date.now() - start\n  };\n}","map":{"version":3,"names":["exportPage","process","env","NEXT_IS_EXPORT_WORKER","envConfig","require","globalThis","__NEXT_DATA__","nextExport","exportPageImpl","input","path","pathMap","distDir","pagesDataDir","buildExport","serverRuntimeConfig","subFolders","optimizeFonts","optimizeCss","disableOptimizedLoading","debugOutput","isrMemoryCacheSize","fetchCache","fetchCacheKeyPrefix","incrementalCacheHandlerPath","enableExperimentalReact","ampValidatorPath","trailingSlash","renderOpts","deploymentId","NEXT_DEPLOYMENT_ID","__NEXT_EXPERIMENTAL_REACT","page","_isAppDir","isAppDir","_isAppPrefetch","isAppPrefetch","_isDynamicError","isDynamicError","query","originalQuery","_req_url","pathname","_apppaths","normalizeAppPath","isDynamic","_isdynamic","isDynamicRoute","outDir","_path","join","params","filePath","_normalizepagepath","normalizePagePath","ampPath","renderAmpPath","updatedPath","__nextSsgPath","locale","__nextLocale","localePathResult","_normalizelocalepath","normalizeLocalePath","locales","detectedLocale","defaultLocale","hasOrigQueryValues","Object","keys","length","nonLocalizedPath","normalizedPage","_getparams","getParams","req","res","_mockrequest","createRequestResponseMocks","url","statusCode","some","p","endsWith","domainLocales","dl","_dl_locales","includes","_requestmeta","addRequestMeta","setConfig","publicRuntimeConfig","runtimeConfig","getHtmlFilename","sep","htmlFilename","pageExt","extname","pathExt","isBuiltinPaths","isHtmlExtPath","baseDir","dirname","htmlFilepath","_fs","default","promises","mkdir","recursive","incrementalCache","_createincrementalcache","createIncrementalCache","undefined","_isapprouteroute","isAppRouteRoute","_approute","exportAppRoute","components","_loadcomponents","loadComponents","isAppPath","fontManifest","_require","requireFontManifest","supportsDynamicHTML","originalPathname","_ciinfo","hasNextSupport","isRevalidate","_apppage","exportAppPage","_pages","exportPages","err","console","error","_iserror","stack","_setuphttpagentenv","setHttpClientAndAgentOptions","httpAgentOptions","exportPageSpan","_trace","trace","parentSpanId","start","Date","now","results","traceAsyncFn","duration"],"sources":["../../src/export/worker.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}