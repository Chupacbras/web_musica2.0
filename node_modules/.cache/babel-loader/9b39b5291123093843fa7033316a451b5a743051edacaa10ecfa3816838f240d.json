{"ast":null,"code":"#!/usr/bin/env node\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"nextLint\", {\n  enumerable: true,\n  get: function () {\n    return nextLint;\n  }\n});\nconst _fs = require(\"fs\");\nconst _path = require(\"path\");\nconst _chalk = /*#__PURE__*/_interop_require_default(require(\"next/dist/compiled/chalk\"));\nconst _constants = require(\"../lib/constants\");\nconst _runLintCheck = require(\"../lib/eslint/runLintCheck\");\nconst _utils = require(\"../server/lib/utils\");\nconst _storage = require(\"../telemetry/storage\");\nconst _config = /*#__PURE__*/_interop_require_default(require(\"../server/config\"));\nconst _constants1 = require(\"../shared/lib/constants\");\nconst _events = require(\"../telemetry/events\");\nconst _compileerror = require(\"../lib/compile-error\");\nconst _getprojectdir = require(\"../lib/get-project-dir\");\nconst _findpagesdir = require(\"../lib/find-pages-dir\");\nconst _verifyTypeScriptSetup = require(\"../lib/verifyTypeScriptSetup\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst eslintOptions = (args, defaultCacheLocation) => ({\n  overrideConfigFile: args[\"--config\"] || null,\n  extensions: args[\"--ext\"] ?? [\".js\", \".mjs\", \".cjs\", \".jsx\", \".ts\", \".mts\", \".cts\", \".tsx\"],\n  resolvePluginsRelativeTo: args[\"--resolve-plugins-relative-to\"] || null,\n  rulePaths: args[\"--rulesdir\"] ?? [],\n  fix: args[\"--fix\"] ?? false,\n  fixTypes: args[\"--fix-type\"] ?? null,\n  ignorePath: args[\"--ignore-path\"] || null,\n  ignore: !Boolean(args[\"--no-ignore\"]),\n  allowInlineConfig: !Boolean(args[\"--no-inline-config\"]),\n  reportUnusedDisableDirectives: args[\"--report-unused-disable-directives\"] || null,\n  cache: !Boolean(args[\"--no-cache\"]),\n  cacheLocation: args[\"--cache-location\"] || defaultCacheLocation,\n  cacheStrategy: args[\"--cache-strategy\"] || \"metadata\",\n  errorOnUnmatchedPattern: args[\"--error-on-unmatched-pattern\"] ? Boolean(args[\"--error-on-unmatched-pattern\"]) : false\n});\nconst nextLint = async args => {\n  var _nextConfig_eslint;\n  if (args[\"--help\"]) {\n    (0, _utils.printAndExit)(`\n      Description\n        Run ESLint on every file in specified directories.\n        If not configured, ESLint will be set up for the first time.\n\n      Usage\n        $ next lint <baseDir> [options]\n\n      <baseDir> represents the directory of the Next.js application.\n      If no directory is provided, the current directory will be used.\n\n      Options\n        Basic configuration:\n          -h, --help                     List this help\n          -d, --dir Array                Include directory, or directories, to run ESLint - default: 'pages', 'components', and 'lib'\n          --file Array                   Include file, or files, to run ESLint\n          -c, --config path::String      Use this configuration file, overriding all other config options\n          --ext [String]                 Specify JavaScript file extensions - default: .js, .mjs, .cjs, .jsx, .ts, .mts, .cts, .tsx\n          --resolve-plugins-relative-to path::String  A folder where plugins should be resolved from, CWD by default\n\n        Initial setup:\n          --strict                       Creates an .eslintrc.json file using the Next.js strict configuration (only possible if no .eslintrc.json file is present)\n\n        Specifying rules:\n          --rulesdir [path::String]      Use additional rules from this directory\n\n        Fixing problems:\n          --fix                          Automatically fix problems\n          --fix-type Array               Specify the types of fixes to apply (problem, suggestion, layout)\n\n        Ignoring files:\n          --ignore-path path::String     Specify path of ignore file\n          --no-ignore                    Disable use of ignore files and patterns\n\n        Handling warnings:\n          --quiet                        Report errors only - default: false\n          --max-warnings Int             Number of warnings to trigger nonzero exit code - default: -1\n\n        Output:\n          -o, --output-file path::String  Specify file to write report to\n          -f, --format String            Use a specific output format - default: Next.js custom formatter\n\n        Inline configuration comments:\n          --no-inline-config             Prevent comments from changing config or rules\n          --report-unused-disable-directives  Adds reported errors for unused eslint-disable directives (\"error\" | \"warn\" | \"off\")\n\n        Caching:\n          --no-cache                     Disable caching\n          --cache-location path::String  Path to the cache file or directory - default: .eslintcache\n          --cache-strategy String        Strategy to use for detecting changed files in the cache, either metadata or content - default: metadata\n\n        Miscellaneous:\n          --error-on-unmatched-pattern   Show errors when any file patterns are unmatched - default: false\n          `, 0);\n  }\n  const baseDir = (0, _getprojectdir.getProjectDir)(args._[0]);\n  // Check if the provided directory exists\n  if (!(0, _fs.existsSync)(baseDir)) {\n    (0, _utils.printAndExit)(`> No such directory exists as the project root: ${baseDir}`);\n  }\n  const nextConfig = await (0, _config.default)(_constants1.PHASE_PRODUCTION_BUILD, baseDir);\n  const files = args[\"--file\"] ?? [];\n  const dirs = args[\"--dir\"] ?? ((_nextConfig_eslint = nextConfig.eslint) == null ? void 0 : _nextConfig_eslint.dirs);\n  const filesToLint = [...(dirs ?? []), ...files];\n  const pathsToLint = (filesToLint.length ? filesToLint : _constants.ESLINT_DEFAULT_DIRS).reduce((res, d) => {\n    const currDir = (0, _path.join)(baseDir, d);\n    if (!(0, _fs.existsSync)(currDir)) return res;\n    res.push(currDir);\n    return res;\n  }, []);\n  const reportErrorsOnly = Boolean(args[\"--quiet\"]);\n  const maxWarnings = args[\"--max-warnings\"] ?? -1;\n  const formatter = args[\"--format\"] || null;\n  const strict = Boolean(args[\"--strict\"]);\n  const outputFile = args[\"--output-file\"] || null;\n  const distDir = (0, _path.join)(baseDir, nextConfig.distDir);\n  const defaultCacheLocation = (0, _path.join)(distDir, \"cache\", \"eslint/\");\n  const {\n    pagesDir,\n    appDir\n  } = (0, _findpagesdir.findPagesDir)(baseDir);\n  await (0, _verifyTypeScriptSetup.verifyTypeScriptSetup)({\n    dir: baseDir,\n    distDir: nextConfig.distDir,\n    intentDirs: [pagesDir, appDir].filter(Boolean),\n    typeCheckPreflight: false,\n    tsconfigPath: nextConfig.typescript.tsconfigPath,\n    disableStaticImages: nextConfig.images.disableStaticImages,\n    hasAppDir: !!appDir,\n    hasPagesDir: !!pagesDir\n  });\n  (0, _runLintCheck.runLintCheck)(baseDir, pathsToLint, {\n    lintDuringBuild: false,\n    eslintOptions: eslintOptions(args, defaultCacheLocation),\n    reportErrorsOnly: reportErrorsOnly,\n    maxWarnings,\n    formatter,\n    outputFile,\n    strict\n  }).then(async lintResults => {\n    const lintOutput = typeof lintResults === \"string\" ? lintResults : lintResults == null ? void 0 : lintResults.output;\n    if (typeof lintResults !== \"string\" && (lintResults == null ? void 0 : lintResults.eventInfo)) {\n      const telemetry = new _storage.Telemetry({\n        distDir\n      });\n      telemetry.record((0, _events.eventLintCheckCompleted)({\n        ...lintResults.eventInfo,\n        buildLint: false\n      }));\n      await telemetry.flush();\n    }\n    if (typeof lintResults !== \"string\" && (lintResults == null ? void 0 : lintResults.isError) && lintOutput) {\n      throw new _compileerror.CompileError(lintOutput);\n    }\n    if (lintOutput) {\n      (0, _utils.printAndExit)(lintOutput, 0);\n    } else if (lintResults && !lintOutput) {\n      (0, _utils.printAndExit)(_chalk.default.green(\"âœ” No ESLint warnings or errors\"), 0);\n    }\n  }).catch(err => {\n    (0, _utils.printAndExit)(err.message);\n  });\n};","map":{"version":3,"names":["nextLint","eslintOptions","args","defaultCacheLocation","overrideConfigFile","extensions","resolvePluginsRelativeTo","rulePaths","fix","fixTypes","ignorePath","ignore","Boolean","allowInlineConfig","reportUnusedDisableDirectives","cache","cacheLocation","cacheStrategy","errorOnUnmatchedPattern","_nextConfig_eslint","_utils","printAndExit","baseDir","_getprojectdir","getProjectDir","_","_fs","existsSync","nextConfig","_config","default","_constants1","PHASE_PRODUCTION_BUILD","files","dirs","eslint","filesToLint","pathsToLint","length","_constants","ESLINT_DEFAULT_DIRS","reduce","res","d","currDir","_path","join","push","reportErrorsOnly","maxWarnings","formatter","strict","outputFile","distDir","pagesDir","appDir","_findpagesdir","findPagesDir","_verifyTypeScriptSetup","verifyTypeScriptSetup","dir","intentDirs","filter","typeCheckPreflight","tsconfigPath","typescript","disableStaticImages","images","hasAppDir","hasPagesDir","_runLintCheck","runLintCheck","lintDuringBuild","then","lintResults","lintOutput","output","eventInfo","telemetry","_storage","Telemetry","record","_events","eventLintCheckCompleted","buildLint","flush","isError","_compileerror","CompileError","_chalk","green","catch","err","message"],"sources":["../../src/cli/next-lint.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}