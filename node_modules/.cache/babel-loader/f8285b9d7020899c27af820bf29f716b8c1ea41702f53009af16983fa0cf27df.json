{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"postProcessHTML\", {\n  enumerable: true,\n  get: function () {\n    return postProcessHTML;\n  }\n});\nconst _constants = require(\"../shared/lib/constants\");\nconst _nonnullable = require(\"../lib/non-nullable\");\nconst middlewareRegistry = [];\nfunction registerPostProcessor(name, middleware, condition) {\n  middlewareRegistry.push({\n    name,\n    middleware,\n    condition: condition || null\n  });\n}\nasync function processHTML(html, data, options) {\n  // Don't parse unless there's at least one processor middleware\n  if (!middlewareRegistry[0]) {\n    return html;\n  }\n  const {\n    parse\n  } = require(\"next/dist/compiled/node-html-parser\");\n  const root = parse(html);\n  let document = html;\n  // Calls the middleware, with some instrumentation and logging\n  async function callMiddleWare(middleware) {\n    // let timer = Date.now()\n    const inspectData = middleware.inspect(root, data);\n    document = await middleware.mutate(document, inspectData, data);\n    // timer = Date.now() - timer\n    // if (timer > MIDDLEWARE_TIME_BUDGET) {\n    // TODO: Identify a correct upper limit for the postprocess step\n    // and add a warning to disable the optimization\n    // }\n    return;\n  }\n  for (let i = 0; i < middlewareRegistry.length; i++) {\n    let middleware = middlewareRegistry[i];\n    if (!middleware.condition || middleware.condition(options)) {\n      await callMiddleWare(middlewareRegistry[i].middleware);\n    }\n  }\n  return document;\n}\nclass FontOptimizerMiddleware {\n  inspect(originalDom, options) {\n    if (!options.getFontDefinition) {\n      return;\n    }\n    const fontDefinitions = [];\n    // collecting all the requested font definitions\n    originalDom.querySelectorAll(\"link\").filter(tag => tag.getAttribute(\"rel\") === \"stylesheet\" && tag.hasAttribute(\"data-href\") && _constants.OPTIMIZED_FONT_PROVIDERS.some(({\n      url\n    }) => {\n      const dataHref = tag.getAttribute(\"data-href\");\n      return dataHref ? dataHref.startsWith(url) : false;\n    })).forEach(element => {\n      const url = element.getAttribute(\"data-href\");\n      const nonce = element.getAttribute(\"nonce\");\n      if (url) {\n        fontDefinitions.push([url, nonce]);\n      }\n    });\n    return fontDefinitions;\n  }\n  constructor() {\n    this.mutate = async (markup, fontDefinitions, options) => {\n      let result = markup;\n      let preconnectUrls = new Set();\n      if (!options.getFontDefinition) {\n        return markup;\n      }\n      fontDefinitions.forEach(fontDef => {\n        const [url, nonce] = fontDef;\n        const fallBackLinkTag = `<link rel=\"stylesheet\" href=\"${url}\"/>`;\n        if (result.indexOf(`<style data-href=\"${url}\">`) > -1 || result.indexOf(fallBackLinkTag) > -1) {\n          // The font is already optimized and probably the response is cached\n          return;\n        }\n        const fontContent = options.getFontDefinition ? options.getFontDefinition(url) : null;\n        if (!fontContent) {\n          /**\n          * In case of unreachable font definitions, fallback to default link tag.\n          */\n          result = result.replace(\"</head>\", `${fallBackLinkTag}</head>`);\n        } else {\n          const nonceStr = nonce ? ` nonce=\"${nonce}\"` : \"\";\n          let dataAttr = \"\";\n          if (fontContent.includes(\"ascent-override\")) {\n            dataAttr = ' data-size-adjust=\"true\"';\n          }\n          result = result.replace(\"</head>\", `<style data-href=\"${url}\"${nonceStr}${dataAttr}>${fontContent}</style></head>`);\n          // Remove inert font tag\n          const escapedUrl = url.replace(/&/g, \"&amp;\").replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n          const fontRegex = new RegExp(`<link[^>]*data-href=\"${escapedUrl}\"[^>]*/>`);\n          result = result.replace(fontRegex, \"\");\n          const provider = _constants.OPTIMIZED_FONT_PROVIDERS.find(p => url.startsWith(p.url));\n          if (provider) {\n            preconnectUrls.add(provider.preconnect);\n          }\n        }\n      });\n      let preconnectTag = \"\";\n      preconnectUrls.forEach(url => {\n        preconnectTag += `<link rel=\"preconnect\" href=\"${url}\" crossorigin />`;\n      });\n      result = result.replace('<meta name=\"next-font-preconnect\"/>', preconnectTag);\n      return result;\n    };\n  }\n}\nasync function postProcessHTML(pathname, content, renderOpts, {\n  inAmpMode,\n  hybridAmp\n}) {\n  const postProcessors = [process.env.NEXT_RUNTIME !== \"edge\" && inAmpMode ? async html => {\n    const optimizeAmp = require(\"./optimize-amp\").default;\n    html = await optimizeAmp(html, renderOpts.ampOptimizerConfig);\n    if (!renderOpts.ampSkipValidation && renderOpts.ampValidator) {\n      await renderOpts.ampValidator(html, pathname);\n    }\n    return html;\n  } : null, process.env.NEXT_RUNTIME !== \"edge\" && renderOpts.optimizeFonts ? async html => {\n    const getFontDefinition = url => {\n      if (renderOpts.fontManifest) {\n        const {\n          getFontDefinitionFromManifest\n        } = require(\"./font-utils\");\n        return getFontDefinitionFromManifest(url, renderOpts.fontManifest);\n      }\n      return \"\";\n    };\n    return await processHTML(html, {\n      getFontDefinition\n    }, {\n      optimizeFonts: renderOpts.optimizeFonts\n    });\n  } : null, process.env.NEXT_RUNTIME !== \"edge\" && renderOpts.optimizeCss ? async html => {\n    // eslint-disable-next-line import/no-extraneous-dependencies\n    const Critters = require(\"critters\");\n    const cssOptimizer = new Critters({\n      ssrMode: true,\n      reduceInlineStyles: false,\n      path: renderOpts.distDir,\n      publicPath: `${renderOpts.assetPrefix}/_next/`,\n      preload: \"media\",\n      fonts: false,\n      ...renderOpts.optimizeCss\n    });\n    return await cssOptimizer.process(html);\n  } : null, inAmpMode || hybridAmp ? html => {\n    return html.replace(/&amp;amp=1/g, \"&amp=1\");\n  } : null].filter(_nonnullable.nonNullable);\n  for (const postProcessor of postProcessors) {\n    if (postProcessor) {\n      content = await postProcessor(content);\n    }\n  }\n  return content;\n}\n// Initialization\nregisterPostProcessor(\"Inline-Fonts\", new FontOptimizerMiddleware(),\n// Using process.env because passing Experimental flag through loader is not possible.\n// @ts-ignore\noptions => options.optimizeFonts || process.env.__NEXT_OPTIMIZE_FONTS);","map":{"version":3,"names":["postProcessHTML","middlewareRegistry","registerPostProcessor","name","middleware","condition","push","processHTML","html","data","options","parse","require","root","document","callMiddleWare","inspectData","inspect","mutate","i","length","FontOptimizerMiddleware","originalDom","getFontDefinition","fontDefinitions","querySelectorAll","filter","tag","getAttribute","hasAttribute","_constants","OPTIMIZED_FONT_PROVIDERS","some","url","dataHref","startsWith","forEach","element","nonce","markup","result","preconnectUrls","Set","fontDef","fallBackLinkTag","indexOf","fontContent","replace","nonceStr","dataAttr","includes","escapedUrl","fontRegex","RegExp","provider","find","p","add","preconnect","preconnectTag","pathname","content","renderOpts","inAmpMode","hybridAmp","postProcessors","process","env","NEXT_RUNTIME","optimizeAmp","default","ampOptimizerConfig","ampSkipValidation","ampValidator","optimizeFonts","fontManifest","getFontDefinitionFromManifest","optimizeCss","Critters","cssOptimizer","ssrMode","reduceInlineStyles","path","distDir","publicPath","assetPrefix","preload","fonts","_nonnullable","nonNullable","postProcessor","__NEXT_OPTIMIZE_FONTS"],"sources":["../../src/server/post-process.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}