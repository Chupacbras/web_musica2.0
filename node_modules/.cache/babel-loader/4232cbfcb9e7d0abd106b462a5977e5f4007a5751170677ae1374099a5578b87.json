{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  requestToBodyStream: null,\n  getCloneableBody: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  requestToBodyStream: function () {\n    return requestToBodyStream;\n  },\n  getCloneableBody: function () {\n    return getCloneableBody;\n  }\n});\nconst _stream = require(\"stream\");\nfunction requestToBodyStream(context, KUint8Array, stream) {\n  return new context.ReadableStream({\n    start(controller) {\n      stream.on(\"data\", chunk => controller.enqueue(new KUint8Array([...new Uint8Array(chunk)])));\n      stream.on(\"end\", () => controller.close());\n      stream.on(\"error\", err => controller.error(err));\n    }\n  });\n}\nfunction replaceRequestBody(base, stream) {\n  for (const key in stream) {\n    let v = stream[key];\n    if (typeof v === \"function\") {\n      v = v.bind(base);\n    }\n    base[key] = v;\n  }\n  return base;\n}\nfunction getCloneableBody(readable) {\n  let buffered = null;\n  const endPromise = new Promise((resolve, reject) => {\n    readable.on(\"end\", resolve);\n    readable.on(\"error\", reject);\n  }).catch(error => {\n    return {\n      error\n    };\n  });\n  return {\n    /**\n    * Replaces the original request body if necessary.\n    * This is done because once we read the body from the original request,\n    * we can't read it again.\n    */\n    async finalize() {\n      if (buffered) {\n        const res = await endPromise;\n        if (res && typeof res === \"object\" && res.error) {\n          throw res.error;\n        }\n        replaceRequestBody(readable, buffered);\n        buffered = readable;\n      }\n    },\n    /**\n    * Clones the body stream\n    * to pass into a middleware\n    */\n    cloneBodyStream() {\n      const input = buffered ?? readable;\n      const p1 = new _stream.PassThrough();\n      const p2 = new _stream.PassThrough();\n      input.on(\"data\", chunk => {\n        p1.push(chunk);\n        p2.push(chunk);\n      });\n      input.on(\"end\", () => {\n        p1.push(null);\n        p2.push(null);\n      });\n      buffered = p2;\n      return p1;\n    }\n  };\n}","map":{"version":3,"names":["requestToBodyStream","getCloneableBody","context","KUint8Array","stream","ReadableStream","start","controller","on","chunk","enqueue","Uint8Array","close","err","error","replaceRequestBody","base","key","v","bind","readable","buffered","endPromise","Promise","resolve","reject","catch","finalize","res","cloneBodyStream","input","p1","_stream","PassThrough","p2","push"],"sources":["../../src/server/body-streams.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;EAGgBA,mBAAmB,WAAAA,CAAA;WAAnBA,mBAAA;;EAoCAC,gBAAgB,WAAAA,CAAA;WAAhBA,gBAAA;;;wBAtCsB;AAE/B,SAASD,oBACdE,OAAkD,EAClDC,WAA8B,EAC9BC,MAAgB;EAEhB,OAAO,IAAIF,OAAA,CAAQG,cAAc,CAAC;IAChCC,MAAMC,UAAU;MACdH,MAAA,CAAOI,EAAE,CAAC,QAASC,KAAA,IACjBF,UAAA,CAAWG,OAAO,CAAC,IAAIP,WAAA,CAAY,C,GAAI,IAAIQ,UAAA,CAAWF,KAAA,EAAO;MAE/DL,MAAA,CAAOI,EAAE,CAAC,OAAO,MAAMD,UAAA,CAAWK,KAAK;MACvCR,MAAA,CAAOI,EAAE,CAAC,SAAUK,GAAA,IAAQN,UAAA,CAAWO,KAAK,CAACD,GAAA;IAC/C;EACF;AACF;AAEA,SAASE,mBACPC,IAAO,EACPZ,MAAgB;EAEhB,KAAK,MAAMa,GAAA,IAAOb,MAAA,EAAQ;IACxB,IAAIc,CAAA,GAAId,MAAM,CAACa,GAAA,CAAsB;IACrC,IAAI,OAAOC,CAAA,KAAM,YAAY;MAC3BA,CAAA,GAAIA,CAAA,CAAEC,IAAI,CAACH,IAAA;IACb;IACAA,IAAI,CAACC,GAAA,CAAe,GAAGC,CAAA;EACzB;EAEA,OAAOF,IAAA;AACT;AAOO,SAASf,iBACdmB,QAAW;EAEX,IAAIC,QAAA,GAA4B;EAEhC,MAAMC,UAAA,GAAa,IAAIC,OAAA,CACrB,CAACC,OAAA,EAASC,MAAA;IACRL,QAAA,CAASZ,EAAE,CAAC,OAAOgB,OAAA;IACnBJ,QAAA,CAASZ,EAAE,CAAC,SAASiB,MAAA;EACvB,GACAC,KAAK,CAAEZ,KAAA;IACP,OAAO;MAAEA;IAAM;EACjB;EAEA,OAAO;IACL;;;;;IAKA,MAAMa,SAAA;MACJ,IAAIN,QAAA,EAAU;QACZ,MAAMO,GAAA,GAAM,MAAMN,UAAA;QAElB,IAAIM,GAAA,IAAO,OAAOA,GAAA,KAAQ,YAAYA,GAAA,CAAId,KAAK,EAAE;UAC/C,MAAMc,GAAA,CAAId,KAAK;QACjB;QACAC,kBAAA,CAAmBK,QAAA,EAAUC,QAAA;QAC7BA,QAAA,GAAWD,QAAA;MACb;IACF;IACA;;;;IAIAS,gBAAA;MACE,MAAMC,KAAA,GAAQT,QAAA,IAAYD,QAAA;MAC1B,MAAMW,EAAA,GAAK,IAAIC,OAAA,CAAAC,WAAW;MAC1B,MAAMC,EAAA,GAAK,IAAIF,OAAA,CAAAC,WAAW;MAC1BH,KAAA,CAAMtB,EAAE,CAAC,QAASC,KAAA;QAChBsB,EAAA,CAAGI,IAAI,CAAC1B,KAAA;QACRyB,EAAA,CAAGC,IAAI,CAAC1B,KAAA;MACV;MACAqB,KAAA,CAAMtB,EAAE,CAAC,OAAO;QACduB,EAAA,CAAGI,IAAI,CAAC;QACRD,EAAA,CAAGC,IAAI,CAAC;MACV;MACAd,QAAA,GAAWa,EAAA;MACX,OAAOH,EAAA;IACT;EACF;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}