{"ast":null,"code":"/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return loader;\n  }\n});\nconst _CssSyntaxError = /*#__PURE__*/_interop_require_default(require(\"./CssSyntaxError\"));\nconst _Warning = /*#__PURE__*/_interop_require_default(require(\"../../postcss-loader/src/Warning\"));\nconst _stringifyrequest = require(\"../../../stringify-request\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst moduleRegExp = /\\.module\\.\\w+$/i;\nfunction getModulesOptions(rawOptions, loaderContext) {\n  const {\n    resourcePath\n  } = loaderContext;\n  if (typeof rawOptions.modules === \"undefined\") {\n    const isModules = moduleRegExp.test(resourcePath);\n    if (!isModules) {\n      return false;\n    }\n  } else if (typeof rawOptions.modules === \"boolean\" && rawOptions.modules === false) {\n    return false;\n  }\n  let modulesOptions = {\n    compileType: rawOptions.icss ? \"icss\" : \"module\",\n    auto: true,\n    mode: \"local\",\n    exportGlobals: false,\n    localIdentName: \"[hash:base64]\",\n    localIdentContext: loaderContext.rootContext,\n    localIdentHashPrefix: \"\",\n    // eslint-disable-next-line no-undefined\n    localIdentRegExp: undefined,\n    namedExport: false,\n    exportLocalsConvention: \"asIs\",\n    exportOnlyLocals: false\n  };\n  if (typeof rawOptions.modules === \"boolean\" || typeof rawOptions.modules === \"string\") {\n    modulesOptions.mode = typeof rawOptions.modules === \"string\" ? rawOptions.modules : \"local\";\n  } else {\n    if (rawOptions.modules) {\n      if (typeof rawOptions.modules.auto === \"boolean\") {\n        const isModules = rawOptions.modules.auto && moduleRegExp.test(resourcePath);\n        if (!isModules) {\n          return false;\n        }\n      } else if (rawOptions.modules.auto instanceof RegExp) {\n        const isModules = rawOptions.modules.auto.test(resourcePath);\n        if (!isModules) {\n          return false;\n        }\n      } else if (typeof rawOptions.modules.auto === \"function\") {\n        const isModule = rawOptions.modules.auto(resourcePath);\n        if (!isModule) {\n          return false;\n        }\n      }\n      if (rawOptions.modules.namedExport === true && typeof rawOptions.modules.exportLocalsConvention === \"undefined\") {\n        modulesOptions.exportLocalsConvention = \"camelCaseOnly\";\n      }\n    }\n    modulesOptions = {\n      ...modulesOptions,\n      ...(rawOptions.modules || {})\n    };\n  }\n  if (typeof modulesOptions.mode === \"function\") {\n    modulesOptions.mode = modulesOptions.mode(loaderContext.resourcePath);\n  }\n  if (modulesOptions.namedExport === true) {\n    if (rawOptions.esModule === false) {\n      throw new Error('The \"modules.namedExport\" option requires the \"esModules\" option to be enabled');\n    }\n    if (modulesOptions.exportLocalsConvention !== \"camelCaseOnly\") {\n      throw new Error('The \"modules.namedExport\" option requires the \"modules.exportLocalsConvention\" option to be \"camelCaseOnly\"');\n    }\n  }\n  return modulesOptions;\n}\nfunction normalizeOptions(rawOptions, loaderContext) {\n  if (rawOptions.icss) {\n    loaderContext.emitWarning(new Error('The \"icss\" option is deprecated, use \"modules.compileType: \"icss\"\" instead'));\n  }\n  const modulesOptions = getModulesOptions(rawOptions, loaderContext);\n  return {\n    url: typeof rawOptions.url === \"undefined\" ? true : rawOptions.url,\n    import: typeof rawOptions.import === \"undefined\" ? true : rawOptions.import,\n    modules: modulesOptions,\n    // TODO remove in the next major release\n    icss: typeof rawOptions.icss === \"undefined\" ? false : rawOptions.icss,\n    sourceMap: typeof rawOptions.sourceMap === \"boolean\" ? rawOptions.sourceMap : loaderContext.sourceMap,\n    importLoaders: typeof rawOptions.importLoaders === \"string\" ? parseInt(rawOptions.importLoaders, 10) : rawOptions.importLoaders,\n    esModule: typeof rawOptions.esModule === \"undefined\" ? true : rawOptions.esModule,\n    fontLoader: rawOptions.fontLoader\n  };\n}\nasync function loader(content, map, meta) {\n  const rawOptions = this.getOptions();\n  const plugins = [];\n  const callback = this.async();\n  const loaderSpan = this.currentTraceSpan.traceChild(\"css-loader\");\n  loaderSpan.traceAsyncFn(async () => {\n    let options;\n    try {\n      options = normalizeOptions(rawOptions, this);\n    } catch (error) {\n      throw error;\n    }\n    const {\n      postcss\n    } = await rawOptions.postcss();\n    const {\n      shouldUseModulesPlugins,\n      shouldUseImportPlugin,\n      shouldUseURLPlugin,\n      shouldUseIcssPlugin,\n      getPreRequester,\n      getExportCode,\n      getFilter,\n      getImportCode,\n      getModuleCode,\n      getModulesPlugins,\n      normalizeSourceMap,\n      sort\n    } = require(\"./utils\");\n    const {\n      icssParser,\n      importParser,\n      urlParser\n    } = require(\"./plugins\");\n    const replacements = [];\n    // if it's a font loader next-font-loader will have exports that should be exported as is\n    const exports1 = options.fontLoader ? meta.exports : [];\n    if (shouldUseModulesPlugins(options)) {\n      plugins.push(...getModulesPlugins(options, this, meta));\n    }\n    const importPluginImports = [];\n    const importPluginApi = [];\n    if (shouldUseImportPlugin(options)) {\n      const resolver = this.getResolve({\n        conditionNames: [\"style\"],\n        extensions: [\".css\"],\n        mainFields: [\"css\", \"style\", \"main\", \"...\"],\n        mainFiles: [\"index\", \"...\"],\n        restrictions: [/\\.css$/i]\n      });\n      plugins.push(importParser({\n        imports: importPluginImports,\n        api: importPluginApi,\n        context: this.context,\n        rootContext: this.rootContext,\n        filter: getFilter(options.import, this.resourcePath),\n        resolver,\n        urlHandler: url => (0, _stringifyrequest.stringifyRequest)(this, getPreRequester(this)(options.importLoaders) + url)\n      }));\n    }\n    const urlPluginImports = [];\n    if (shouldUseURLPlugin(options)) {\n      const urlResolver = this.getResolve({\n        conditionNames: [\"asset\"],\n        mainFields: [\"asset\"],\n        mainFiles: [],\n        extensions: []\n      });\n      plugins.push(urlParser({\n        imports: urlPluginImports,\n        replacements,\n        context: this.context,\n        rootContext: this.rootContext,\n        filter: getFilter(options.url, this.resourcePath),\n        resolver: urlResolver,\n        urlHandler: url => (0, _stringifyrequest.stringifyRequest)(this, url)\n      }));\n    }\n    const icssPluginImports = [];\n    const icssPluginApi = [];\n    if (shouldUseIcssPlugin(options)) {\n      const icssResolver = this.getResolve({\n        conditionNames: [\"style\"],\n        extensions: [],\n        mainFields: [\"css\", \"style\", \"main\", \"...\"],\n        mainFiles: [\"index\", \"...\"]\n      });\n      plugins.push(icssParser({\n        imports: icssPluginImports,\n        api: icssPluginApi,\n        replacements,\n        exports: exports1,\n        context: this.context,\n        rootContext: this.rootContext,\n        resolver: icssResolver,\n        urlHandler: url => (0, _stringifyrequest.stringifyRequest)(this, getPreRequester(this)(options.importLoaders) + url)\n      }));\n    }\n    // Reuse CSS AST (PostCSS AST e.g 'postcss-loader') to avoid reparsing\n    if (meta) {\n      const {\n        ast\n      } = meta;\n      if (ast && ast.type === \"postcss\") {\n        // eslint-disable-next-line no-param-reassign\n        content = ast.root;\n        loaderSpan.setAttribute(\"astUsed\", \"true\");\n      }\n    }\n    const {\n      resourcePath\n    } = this;\n    let result;\n    try {\n      result = await postcss(plugins).process(content, {\n        from: resourcePath,\n        to: resourcePath,\n        map: options.sourceMap ? {\n          prev: map ? normalizeSourceMap(map, resourcePath) : null,\n          inline: false,\n          annotation: false\n        } : false\n      });\n    } catch (error) {\n      if (error.file) {\n        this.addDependency(error.file);\n      }\n      throw error.name === \"CssSyntaxError\" ? new _CssSyntaxError.default(error) : error;\n    }\n    for (const warning of result.warnings()) {\n      this.emitWarning(new _Warning.default(warning));\n    }\n    const imports = [...icssPluginImports.sort(sort), ...importPluginImports.sort(sort), ...urlPluginImports.sort(sort)];\n    const api = [...importPluginApi.sort(sort), ...icssPluginApi.sort(sort)];\n    if (options.modules.exportOnlyLocals !== true) {\n      imports.unshift({\n        importName: \"___CSS_LOADER_API_IMPORT___\",\n        url: (0, _stringifyrequest.stringifyRequest)(this, require.resolve(\"./runtime/api\"))\n      });\n    }\n    const importCode = getImportCode(imports, options);\n    const moduleCode = getModuleCode(result, api, replacements, options, this);\n    const exportCode = getExportCode(exports1, replacements, options);\n    return `${importCode}${moduleCode}${exportCode}`;\n  }).then(code => {\n    callback(null, code);\n  }, err => {\n    callback(err);\n  });\n}","map":{"version":3,"names":["loader","moduleRegExp","getModulesOptions","rawOptions","loaderContext","resourcePath","modules","isModules","test","modulesOptions","compileType","icss","auto","mode","exportGlobals","localIdentName","localIdentContext","rootContext","localIdentHashPrefix","localIdentRegExp","undefined","namedExport","exportLocalsConvention","exportOnlyLocals","RegExp","isModule","esModule","Error","normalizeOptions","emitWarning","url","import","sourceMap","importLoaders","parseInt","fontLoader","content","map","meta","getOptions","plugins","callback","async","loaderSpan","currentTraceSpan","traceChild","traceAsyncFn","options","error","postcss","shouldUseModulesPlugins","shouldUseImportPlugin","shouldUseURLPlugin","shouldUseIcssPlugin","getPreRequester","getExportCode","getFilter","getImportCode","getModuleCode","getModulesPlugins","normalizeSourceMap","sort","require","icssParser","importParser","urlParser","replacements","exports1","exports","push","importPluginImports","importPluginApi","resolver","getResolve","conditionNames","extensions","mainFields","mainFiles","restrictions","imports","api","context","filter","urlHandler","_stringifyrequest","stringifyRequest","urlPluginImports","urlResolver","icssPluginImports","icssPluginApi","icssResolver","ast","type","root","setAttribute","result","process","from","to","prev","inline","annotation","file","addDependency","name","_CssSyntaxError","default","warning","warnings","_Warning","unshift","importName","resolve","importCode","moduleCode","exportCode","then","code","err"],"sources":["../../../../../../src/build/webpack/loaders/css-loader/src/index.ts"],"sourcesContent":[null],"mappings":"AAAA;;;AAGA;;;;;+BAkIA;;;WAA8BA,MAAA;;;sEAjIH;+DACP;kCACa;;;;;;AAEjC,MAAMC,YAAA,GAAe;AAErB,SAASC,kBAAkBC,UAAe,EAAEC,aAAkB;EAC5D,MAAM;IAAEC;EAAY,CAAE,GAAGD,aAAA;EAEzB,IAAI,OAAOD,UAAA,CAAWG,OAAO,KAAK,aAAa;IAC7C,MAAMC,SAAA,GAAYN,YAAA,CAAaO,IAAI,CAACH,YAAA;IAEpC,IAAI,CAACE,SAAA,EAAW;MACd,OAAO;IACT;EACF,OAAO,IACL,OAAOJ,UAAA,CAAWG,OAAO,KAAK,aAC9BH,UAAA,CAAWG,OAAO,KAAK,OACvB;IACA,OAAO;EACT;EAEA,IAAIG,cAAA,GAAsB;IACxBC,WAAA,EAAaP,UAAA,CAAWQ,IAAI,GAAG,SAAS;IACxCC,IAAA,EAAM;IACNC,IAAA,EAAM;IACNC,aAAA,EAAe;IACfC,cAAA,EAAgB;IAChBC,iBAAA,EAAmBZ,aAAA,CAAca,WAAW;IAC5CC,oBAAA,EAAsB;IACtB;IACAC,gBAAA,EAAkBC,SAAA;IAClBC,WAAA,EAAa;IACbC,sBAAA,EAAwB;IACxBC,gBAAA,EAAkB;EACpB;EAEA,IACE,OAAOpB,UAAA,CAAWG,OAAO,KAAK,aAC9B,OAAOH,UAAA,CAAWG,OAAO,KAAK,UAC9B;IACAG,cAAA,CAAeI,IAAI,GACjB,OAAOV,UAAA,CAAWG,OAAO,KAAK,WAAWH,UAAA,CAAWG,OAAO,GAAG;EAClE,OAAO;IACL,IAAIH,UAAA,CAAWG,OAAO,EAAE;MACtB,IAAI,OAAOH,UAAA,CAAWG,OAAO,CAACM,IAAI,KAAK,WAAW;QAChD,MAAML,SAAA,GACJJ,UAAA,CAAWG,OAAO,CAACM,IAAI,IAAIX,YAAA,CAAaO,IAAI,CAACH,YAAA;QAE/C,IAAI,CAACE,SAAA,EAAW;UACd,OAAO;QACT;MACF,OAAO,IAAIJ,UAAA,CAAWG,OAAO,CAACM,IAAI,YAAYY,MAAA,EAAQ;QACpD,MAAMjB,SAAA,GAAYJ,UAAA,CAAWG,OAAO,CAACM,IAAI,CAACJ,IAAI,CAACH,YAAA;QAE/C,IAAI,CAACE,SAAA,EAAW;UACd,OAAO;QACT;MACF,OAAO,IAAI,OAAOJ,UAAA,CAAWG,OAAO,CAACM,IAAI,KAAK,YAAY;QACxD,MAAMa,QAAA,GAAWtB,UAAA,CAAWG,OAAO,CAACM,IAAI,CAACP,YAAA;QAEzC,IAAI,CAACoB,QAAA,EAAU;UACb,OAAO;QACT;MACF;MAEA,IACEtB,UAAA,CAAWG,OAAO,CAACe,WAAW,KAAK,QACnC,OAAOlB,UAAA,CAAWG,OAAO,CAACgB,sBAAsB,KAAK,aACrD;QACAb,cAAA,CAAea,sBAAsB,GAAG;MAC1C;IACF;IAEAb,cAAA,GAAiB;MAAE,GAAGA,cAAc;MAAE,IAAIN,UAAA,CAAWG,OAAO,IAAI,CAAC,CAAC;IAAE;EACtE;EAEA,IAAI,OAAOG,cAAA,CAAeI,IAAI,KAAK,YAAY;IAC7CJ,cAAA,CAAeI,IAAI,GAAGJ,cAAA,CAAeI,IAAI,CAACT,aAAA,CAAcC,YAAY;EACtE;EAEA,IAAII,cAAA,CAAeY,WAAW,KAAK,MAAM;IACvC,IAAIlB,UAAA,CAAWuB,QAAQ,KAAK,OAAO;MACjC,MAAM,IAAIC,KAAA,CACR;IAEJ;IAEA,IAAIlB,cAAA,CAAea,sBAAsB,KAAK,iBAAiB;MAC7D,MAAM,IAAIK,KAAA,CACR;IAEJ;EACF;EAEA,OAAOlB,cAAA;AACT;AAEA,SAASmB,iBAAiBzB,UAAe,EAAEC,aAAkB;EAC3D,IAAID,UAAA,CAAWQ,IAAI,EAAE;IACnBP,aAAA,CAAcyB,WAAW,CACvB,IAAIF,KAAA,CACF;EAGN;EAEA,MAAMlB,cAAA,GAAiBP,iBAAA,CAAkBC,UAAA,EAAYC,aAAA;EAErD,OAAO;IACL0B,GAAA,EAAK,OAAO3B,UAAA,CAAW2B,GAAG,KAAK,cAAc,OAAO3B,UAAA,CAAW2B,GAAG;IAClEC,MAAA,EAAQ,OAAO5B,UAAA,CAAW4B,MAAM,KAAK,cAAc,OAAO5B,UAAA,CAAW4B,MAAM;IAC3EzB,OAAA,EAASG,cAAA;IACT;IACAE,IAAA,EAAM,OAAOR,UAAA,CAAWQ,IAAI,KAAK,cAAc,QAAQR,UAAA,CAAWQ,IAAI;IACtEqB,SAAA,EACE,OAAO7B,UAAA,CAAW6B,SAAS,KAAK,YAC5B7B,UAAA,CAAW6B,SAAS,GACpB5B,aAAA,CAAc4B,SAAS;IAC7BC,aAAA,EACE,OAAO9B,UAAA,CAAW8B,aAAa,KAAK,WAChCC,QAAA,CAAS/B,UAAA,CAAW8B,aAAa,EAAE,MACnC9B,UAAA,CAAW8B,aAAa;IAC9BP,QAAA,EACE,OAAOvB,UAAA,CAAWuB,QAAQ,KAAK,cAAc,OAAOvB,UAAA,CAAWuB,QAAQ;IACzES,UAAA,EAAYhC,UAAA,CAAWgC;EACzB;AACF;AAEe,eAAenC,OAE5BoC,OAAe,EACfC,GAAQ,EACRC,IAAS;EAET,MAAMnC,UAAA,GAAa,IAAI,CAACoC,UAAU;EAElC,MAAMC,OAAA,GAAiB,EAAE;EACzB,MAAMC,QAAA,GAAW,IAAI,CAACC,KAAK;EAE3B,MAAMC,UAAA,GAAa,IAAI,CAACC,gBAAgB,CAACC,UAAU,CAAC;EAEpDF,UAAA,CACGG,YAAY,CAAC;IACZ,IAAIC,OAAA;IAEJ,IAAI;MACFA,OAAA,GAAUnB,gBAAA,CAAiBzB,UAAA,EAAY,IAAI;IAC7C,EAAE,OAAO6C,KAAA,EAAO;MACd,MAAMA,KAAA;IACR;IAEA,MAAM;MAAEC;IAAO,CAAE,GAAG,MAAM9C,UAAA,CAAW8C,OAAO;IAE5C,MAAM;MACJC,uBAAuB;MACvBC,qBAAqB;MACrBC,kBAAkB;MAClBC,mBAAmB;MACnBC,eAAe;MACfC,aAAa;MACbC,SAAS;MACTC,aAAa;MACbC,aAAa;MACbC,iBAAiB;MACjBC,kBAAkB;MAClBC;IAAI,CACL,GAAGC,OAAA,CAAQ;IAEZ,MAAM;MAAEC,UAAU;MAAEC,YAAY;MAAEC;IAAS,CAAE,GAAGH,OAAA,CAAQ;IAExD,MAAMI,YAAA,GAAsB,EAAE;IAC9B;IACA,MAAMC,QAAA,GAAUpB,OAAA,CAAQZ,UAAU,GAAGG,IAAA,CAAK8B,OAAO,GAAG,EAAE;IAEtD,IAAIlB,uBAAA,CAAwBH,OAAA,GAAU;MACpCP,OAAA,CAAQ6B,IAAI,IAAIV,iBAAA,CAAkBZ,OAAA,EAAS,IAAI,EAAET,IAAA;IACnD;IAEA,MAAMgC,mBAAA,GAA6B,EAAE;IACrC,MAAMC,eAAA,GAAyB,EAAE;IAEjC,IAAIpB,qBAAA,CAAsBJ,OAAA,GAAU;MAClC,MAAMyB,QAAA,GAAW,IAAI,CAACC,UAAU,CAAC;QAC/BC,cAAA,EAAgB,CAAC,QAAQ;QACzBC,UAAA,EAAY,CAAC,OAAO;QACpBC,UAAA,EAAY,CAAC,OAAO,SAAS,QAAQ,MAAM;QAC3CC,SAAA,EAAW,CAAC,SAAS,MAAM;QAC3BC,YAAA,EAAc,CAAC;MACjB;MAEAtC,OAAA,CAAQ6B,IAAI,CACVL,YAAA,CAAa;QACXe,OAAA,EAAST,mBAAA;QACTU,GAAA,EAAKT,eAAA;QACLU,OAAA,EAAS,IAAI,CAACA,OAAO;QACrBhE,WAAA,EAAa,IAAI,CAACA,WAAW;QAC7BiE,MAAA,EAAQ1B,SAAA,CAAUT,OAAA,CAAQhB,MAAM,EAAE,IAAI,CAAC1B,YAAY;QACnDmE,QAAA;QACAW,UAAA,EAAarD,GAAA,IACX,IAAAsD,iBAAA,CAAAC,gBAAgB,EACd,IAAI,EACJ/B,eAAA,CAAgB,IAAI,EAAEP,OAAA,CAAQd,aAAa,IAAIH,GAAA;MAErD;IAEJ;IAEA,MAAMwD,gBAAA,GAA0B,EAAE;IAElC,IAAIlC,kBAAA,CAAmBL,OAAA,GAAU;MAC/B,MAAMwC,WAAA,GAAc,IAAI,CAACd,UAAU,CAAC;QAClCC,cAAA,EAAgB,CAAC,QAAQ;QACzBE,UAAA,EAAY,CAAC,QAAQ;QACrBC,SAAA,EAAW,EAAE;QACbF,UAAA,EAAY;MACd;MAEAnC,OAAA,CAAQ6B,IAAI,CACVJ,SAAA,CAAU;QACRc,OAAA,EAASO,gBAAA;QACTpB,YAAA;QACAe,OAAA,EAAS,IAAI,CAACA,OAAO;QACrBhE,WAAA,EAAa,IAAI,CAACA,WAAW;QAC7BiE,MAAA,EAAQ1B,SAAA,CAAUT,OAAA,CAAQjB,GAAG,EAAE,IAAI,CAACzB,YAAY;QAChDmE,QAAA,EAAUe,WAAA;QACVJ,UAAA,EAAarD,GAAA,IAAgB,IAAAsD,iBAAA,CAAAC,gBAAgB,EAAC,IAAI,EAAEvD,GAAA;MACtD;IAEJ;IAEA,MAAM0D,iBAAA,GAA2B,EAAE;IACnC,MAAMC,aAAA,GAAuB,EAAE;IAE/B,IAAIpC,mBAAA,CAAoBN,OAAA,GAAU;MAChC,MAAM2C,YAAA,GAAe,IAAI,CAACjB,UAAU,CAAC;QACnCC,cAAA,EAAgB,CAAC,QAAQ;QACzBC,UAAA,EAAY,EAAE;QACdC,UAAA,EAAY,CAAC,OAAO,SAAS,QAAQ,MAAM;QAC3CC,SAAA,EAAW,CAAC,SAAS;MACvB;MAEArC,OAAA,CAAQ6B,IAAI,CACVN,UAAA,CAAW;QACTgB,OAAA,EAASS,iBAAA;QACTR,GAAA,EAAKS,aAAA;QACLvB,YAAA;QACAE,OAAA,EAAAD,QAAA;QACAc,OAAA,EAAS,IAAI,CAACA,OAAO;QACrBhE,WAAA,EAAa,IAAI,CAACA,WAAW;QAC7BuD,QAAA,EAAUkB,YAAA;QACVP,UAAA,EAAarD,GAAA,IACX,IAAAsD,iBAAA,CAAAC,gBAAgB,EACd,IAAI,EACJ/B,eAAA,CAAgB,IAAI,EAAEP,OAAA,CAAQd,aAAa,IAAIH,GAAA;MAErD;IAEJ;IAEA;IACA,IAAIQ,IAAA,EAAM;MACR,MAAM;QAAEqD;MAAG,CAAE,GAAGrD,IAAA;MAEhB,IAAIqD,GAAA,IAAOA,GAAA,CAAIC,IAAI,KAAK,WAAW;QACjC;QACAxD,OAAA,GAAUuD,GAAA,CAAIE,IAAI;QAClBlD,UAAA,CAAWmD,YAAY,CAAC,WAAW;MACrC;IACF;IAEA,MAAM;MAAEzF;IAAY,CAAE,GAAG,IAAI;IAE7B,IAAI0F,MAAA;IAEJ,IAAI;MACFA,MAAA,GAAS,MAAM9C,OAAA,CAAQT,OAAA,EAASwD,OAAO,CAAC5D,OAAA,EAAS;QAC/C6D,IAAA,EAAM5F,YAAA;QACN6F,EAAA,EAAI7F,YAAA;QACJgC,GAAA,EAAKU,OAAA,CAAQf,SAAS,GAClB;UACEmE,IAAA,EAAM9D,GAAA,GAAMuB,kBAAA,CAAmBvB,GAAA,EAAKhC,YAAA,IAAgB;UACpD+F,MAAA,EAAQ;UACRC,UAAA,EAAY;QACd,IACA;MACN;IACF,EAAE,OAAOrD,KAAA,EAAY;MACnB,IAAIA,KAAA,CAAMsD,IAAI,EAAE;QACd,IAAI,CAACC,aAAa,CAACvD,KAAA,CAAMsD,IAAI;MAC/B;MAEA,MAAMtD,KAAA,CAAMwD,IAAI,KAAK,mBACjB,IAAIC,eAAA,CAAAC,OAAc,CAAC1D,KAAA,IACnBA,KAAA;IACN;IAEA,KAAK,MAAM2D,OAAA,IAAWZ,MAAA,CAAOa,QAAQ,IAAI;MACvC,IAAI,CAAC/E,WAAW,CAAC,IAAIgF,QAAA,CAAAH,OAAO,CAACC,OAAA;IAC/B;IAEA,MAAM5B,OAAA,GAAU,C,GACXS,iBAAA,CAAkB3B,IAAI,CAACA,IAAA,G,GACvBS,mBAAA,CAAoBT,IAAI,CAACA,IAAA,G,GACzByB,gBAAA,CAAiBzB,IAAI,CAACA,IAAA,EAC1B;IAED,MAAMmB,GAAA,GAAM,C,GAAIT,eAAA,CAAgBV,IAAI,CAACA,IAAA,G,GAAU4B,aAAA,CAAc5B,IAAI,CAACA,IAAA,EAAM;IAExE,IAAId,OAAA,CAAQzC,OAAO,CAACiB,gBAAgB,KAAK,MAAM;MAC7CwD,OAAA,CAAQ+B,OAAO,CAAC;QACdC,UAAA,EAAY;QACZjF,GAAA,EAAK,IAAAsD,iBAAA,CAAAC,gBAAgB,EAAC,IAAI,EAAEvB,OAAA,CAAQkD,OAAO,CAAC;MAC9C;IACF;IAEA,MAAMC,UAAA,GAAaxD,aAAA,CAAcsB,OAAA,EAAShC,OAAA;IAC1C,MAAMmE,UAAA,GAAaxD,aAAA,CAAcqC,MAAA,EAAQf,GAAA,EAAKd,YAAA,EAAcnB,OAAA,EAAS,IAAI;IACzE,MAAMoE,UAAA,GAAa5D,aAAA,CAAcY,QAAA,EAASD,YAAA,EAAcnB,OAAA;IAExD,OAAQ,GAAEkE,UAAW,GAAEC,UAAW,GAAEC,UAAW,EAAC;EAClD,GACCC,IAAI,CACFC,IAAA;IACC5E,QAAA,CAAS,MAAM4E,IAAA;EACjB,GACCC,GAAA;IACC7E,QAAA,CAAS6E,GAAA;EACX;AAEN"},"metadata":{},"sourceType":"script","externalDependencies":[]}