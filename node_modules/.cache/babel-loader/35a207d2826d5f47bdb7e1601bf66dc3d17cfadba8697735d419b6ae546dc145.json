{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  findConfigPath: null,\n  findConfig: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  findConfigPath: function () {\n    return findConfigPath;\n  },\n  findConfig: function () {\n    return findConfig;\n  }\n});\nconst _findup = /*#__PURE__*/_interop_require_default(require(\"next/dist/compiled/find-up\"));\nconst _fs = /*#__PURE__*/_interop_require_default(require(\"fs\"));\nconst _json5 = /*#__PURE__*/_interop_require_default(require(\"next/dist/compiled/json5\"));\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction findConfigPath(dir, key) {\n  // If we didn't find the configuration in `package.json`, we should look for\n  // known filenames.\n  return (0, _findup.default)([`.${key}rc.json`, `${key}.config.json`, `.${key}rc.js`, `${key}.config.js`, `${key}.config.cjs`], {\n    cwd: dir\n  });\n}\nasync function findConfig(directory, key, _returnFile) {\n  // `package.json` configuration always wins. Let's check that first.\n  const packageJsonPath = await (0, _findup.default)(\"package.json\", {\n    cwd: directory\n  });\n  if (packageJsonPath) {\n    const packageJson = require(packageJsonPath);\n    if (packageJson[key] != null && typeof packageJson[key] === \"object\") {\n      return packageJson[key];\n    }\n  }\n  const filePath = await findConfigPath(directory, key);\n  if (filePath) {\n    if (filePath.endsWith(\".js\") || filePath.endsWith(\".cjs\")) {\n      return require(filePath);\n    }\n    // We load JSON contents with JSON5 to allow users to comment in their\n    // configuration file. This pattern was popularized by TypeScript.\n    const fileContents = _fs.default.readFileSync(filePath, \"utf8\");\n    return _json5.default.parse(fileContents);\n  }\n  return null;\n}","map":{"version":3,"names":["findConfigPath","findConfig","dir","key","_findup","default","cwd","directory","_returnFile","packageJsonPath","packageJson","require","filePath","endsWith","fileContents","_fs","readFileSync","_json5","parse"],"sources":["../../src/lib/find-config.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;EAQgBA,cAAc,WAAAA,CAAA;WAAdA,cAAA;;EAuBMC,UAAU,WAAAA,CAAA;WAAVA,UAAA;;;8DA/BH;0DACJ;6DACG;;;;;;AAMX,SAASD,eACdE,GAAW,EACXC,GAAW;EAEX;EACA;EACA,OAAO,IAAAC,OAAA,CAAAC,OAAM,EACX,CACG,IAAGF,GAAI,SAAQ,EACf,GAAEA,GAAI,cAAa,EACnB,IAAGA,GAAI,OAAM,EACb,GAAEA,GAAI,YAAW,EACjB,GAAEA,GAAI,aAAY,CACpB,EACD;IACEG,GAAA,EAAKJ;EACP;AAEJ;AAKO,eAAeD,WACpBM,SAAiB,EACjBJ,GAAW,EACXK,WAAqB;EAErB;EACA,MAAMC,eAAA,GAAkB,MAAM,IAAAL,OAAA,CAAAC,OAAM,EAAC,gBAAgB;IAAEC,GAAA,EAAKC;EAAU;EACtE,IAAIE,eAAA,EAAiB;IACnB,MAAMC,WAAA,GAAcC,OAAA,CAAQF,eAAA;IAC5B,IAAIC,WAAW,CAACP,GAAA,CAAI,IAAI,QAAQ,OAAOO,WAAW,CAACP,GAAA,CAAI,KAAK,UAAU;MACpE,OAAOO,WAAW,CAACP,GAAA,CAAI;IACzB;EACF;EAEA,MAAMS,QAAA,GAAW,MAAMZ,cAAA,CAAeO,SAAA,EAAWJ,GAAA;EAEjD,IAAIS,QAAA,EAAU;IACZ,IAAIA,QAAA,CAASC,QAAQ,CAAC,UAAUD,QAAA,CAASC,QAAQ,CAAC,SAAS;MACzD,OAAOF,OAAA,CAAQC,QAAA;IACjB;IAEA;IACA;IACA,MAAME,YAAA,GAAeC,GAAA,CAAAV,OAAE,CAACW,YAAY,CAACJ,QAAA,EAAU;IAC/C,OAAOK,MAAA,CAAAZ,OAAK,CAACa,KAAK,CAACJ,YAAA;EACrB;EAEA,OAAO;AACT"},"metadata":{},"sourceType":"script","externalDependencies":[]}