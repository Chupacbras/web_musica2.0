{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"runTypeCheck\", {\n  enumerable: true,\n  get: function () {\n    return runTypeCheck;\n  }\n});\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nconst _diagnosticFormatter = require(\"./diagnosticFormatter\");\nconst _getTypeScriptConfiguration = require(\"./getTypeScriptConfiguration\");\nconst _writeConfigurationDefaults = require(\"./writeConfigurationDefaults\");\nconst _compileerror = require(\"../compile-error\");\nconst _log = require(\"../../build/output/log\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nasync function runTypeCheck(ts, baseDir, distDir, tsConfigPath, cacheDir, isAppDirEnabled) {\n  const effectiveConfiguration = await (0, _getTypeScriptConfiguration.getTypeScriptConfiguration)(ts, tsConfigPath);\n  if (effectiveConfiguration.fileNames.length < 1) {\n    return {\n      hasWarnings: false,\n      inputFilesCount: 0,\n      totalFilesCount: 0,\n      incremental: false\n    };\n  }\n  const requiredConfig = (0, _writeConfigurationDefaults.getRequiredConfiguration)(ts);\n  const options = {\n    ...requiredConfig,\n    ...effectiveConfiguration.options,\n    declarationMap: false,\n    emitDeclarationOnly: false,\n    noEmit: true\n  };\n  let program;\n  let incremental = false;\n  if ((options.incremental || options.composite) && cacheDir) {\n    if (options.composite) {\n      (0, _log.warn)(\"TypeScript project references are not fully supported. Attempting to build in incremental mode.\");\n    }\n    incremental = true;\n    program = ts.createIncrementalProgram({\n      rootNames: effectiveConfiguration.fileNames,\n      options: {\n        ...options,\n        composite: false,\n        incremental: true,\n        tsBuildInfoFile: _path.default.join(cacheDir, \".tsbuildinfo\")\n      }\n    });\n  } else {\n    program = ts.createProgram(effectiveConfiguration.fileNames, options);\n  }\n  const result = program.emit();\n  // Intended to match:\n  // - pages/test.js\n  // - pages/apples.test.js\n  // - pages/__tests__/a.js\n  //\n  // But not:\n  // - pages/contest.js\n  // - pages/other.js\n  // - pages/test/a.js\n  //\n  const regexIgnoredFile = /[\\\\/]__(?:tests|mocks)__[\\\\/]|(?<=[\\\\/.])(?:spec|test)\\.[^\\\\/]+$/;\n  const allDiagnostics = ts.getPreEmitDiagnostics(program).concat(result.diagnostics).filter(d => !(d.file && regexIgnoredFile.test(d.file.fileName)));\n  const firstError = allDiagnostics.find(d => d.category === _diagnosticFormatter.DiagnosticCategory.Error && Boolean(d.file)) ?? allDiagnostics.find(d => d.category === _diagnosticFormatter.DiagnosticCategory.Error);\n  // In test mode, we want to check all diagnostics, not just the first one.\n  if (process.env.__NEXT_TEST_MODE) {\n    if (firstError) {\n      const allErrors = allDiagnostics.filter(d => d.category === _diagnosticFormatter.DiagnosticCategory.Error).map(d => \"[Test Mode] \" + (0, _diagnosticFormatter.getFormattedDiagnostic)(ts, baseDir, distDir, d, isAppDirEnabled));\n      console.error(\"\\n\\n===== TS errors =====\\n\\n\" + allErrors.join(\"\\n\\n\") + \"\\n\\n===== TS errors =====\\n\\n\");\n      // Make sure all stdout is flushed before we exit.\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n  }\n  if (firstError) {\n    throw new _compileerror.CompileError((0, _diagnosticFormatter.getFormattedDiagnostic)(ts, baseDir, distDir, firstError, isAppDirEnabled));\n  }\n  const warnings = allDiagnostics.filter(d => d.category === _diagnosticFormatter.DiagnosticCategory.Warning).map(d => (0, _diagnosticFormatter.getFormattedDiagnostic)(ts, baseDir, distDir, d, isAppDirEnabled));\n  return {\n    hasWarnings: true,\n    warnings,\n    inputFilesCount: effectiveConfiguration.fileNames.length,\n    totalFilesCount: program.getSourceFiles().length,\n    incremental\n  };\n}","map":{"version":3,"names":["runTypeCheck","ts","baseDir","distDir","tsConfigPath","cacheDir","isAppDirEnabled","effectiveConfiguration","_getTypeScriptConfiguration","getTypeScriptConfiguration","fileNames","length","hasWarnings","inputFilesCount","totalFilesCount","incremental","requiredConfig","_writeConfigurationDefaults","getRequiredConfiguration","options","declarationMap","emitDeclarationOnly","noEmit","program","composite","_log","warn","createIncrementalProgram","rootNames","tsBuildInfoFile","_path","default","join","createProgram","result","emit","regexIgnoredFile","allDiagnostics","getPreEmitDiagnostics","concat","diagnostics","filter","d","file","test","fileName","firstError","find","category","_diagnosticFormatter","DiagnosticCategory","Error","Boolean","process","env","__NEXT_TEST_MODE","allErrors","map","getFormattedDiagnostic","console","error","Promise","resolve","setTimeout","_compileerror","CompileError","warnings","Warning","getSourceFiles"],"sources":["../../../src/lib/typescript/runTypeCheck.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}