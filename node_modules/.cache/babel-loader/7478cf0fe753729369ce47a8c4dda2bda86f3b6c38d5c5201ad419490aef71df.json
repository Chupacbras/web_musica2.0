{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"eventSwcLoadFailure\", {\n  enumerable: true,\n  get: function () {\n    return eventSwcLoadFailure;\n  }\n});\nconst _shared = require(\"../../trace/shared\");\nconst _packagejson = require(\"next/package.json\");\nconst EVENT_PLUGIN_PRESENT = \"NEXT_SWC_LOAD_FAILURE\";\nasync function eventSwcLoadFailure(event) {\n  const telemetry = _shared.traceGlobals.get(\"telemetry\");\n  // can't continue if telemetry isn't set\n  if (!telemetry) return;\n  let glibcVersion;\n  let installedSwcPackages;\n  try {\n    var _process_report;\n    // @ts-ignore\n    glibcVersion = (_process_report = process.report) == null ? void 0 : _process_report.getReport().header.glibcVersionRuntime;\n  } catch {}\n  try {\n    const pkgNames = Object.keys(_packagejson.optionalDependencies || {}).filter(pkg => pkg.startsWith(\"@next/swc\"));\n    const installedPkgs = [];\n    for (const pkg of pkgNames) {\n      try {\n        const {\n          version\n        } = require(`${pkg}/package.json`);\n        installedPkgs.push(`${pkg}@${version}`);\n      } catch {}\n    }\n    if (installedPkgs.length > 0) {\n      installedSwcPackages = installedPkgs.sort().join(\",\");\n    }\n  } catch {}\n  telemetry.record({\n    eventName: EVENT_PLUGIN_PRESENT,\n    payload: {\n      nextVersion: _packagejson.version,\n      glibcVersion,\n      installedSwcPackages,\n      arch: process.arch,\n      platform: process.platform,\n      nodeVersion: process.versions.node,\n      wasm: event == null ? void 0 : event.wasm,\n      nativeBindingsErrorCode: event == null ? void 0 : event.nativeBindingsErrorCode\n    }\n  });\n  // ensure this event is flushed before process exits\n  await telemetry.flush();\n}","map":{"version":3,"names":["eventSwcLoadFailure","EVENT_PLUGIN_PRESENT","event","telemetry","_shared","traceGlobals","get","glibcVersion","installedSwcPackages","_process_report","process","report","getReport","header","glibcVersionRuntime","pkgNames","Object","keys","_packagejson","optionalDependencies","filter","pkg","startsWith","installedPkgs","version","require","push","length","sort","join","record","eventName","payload","nextVersion","arch","platform","nodeVersion","versions","node","wasm","nativeBindingsErrorCode","flush"],"sources":["../../../src/telemetry/events/swc-load-failure.ts"],"sourcesContent":[null],"mappings":";;;;;+BAoBsB;;;WAAAA,mBAAA;;;wBApBO;6BAGgC;AAE7D,MAAMC,oBAAA,GAAuB;AAetB,eAAeD,oBACpBE,KAAsC;EAEtC,MAAMC,SAAA,GAAmCC,OAAA,CAAAC,YAAY,CAACC,GAAG,CAAC;EAC1D;EACA,IAAI,CAACH,SAAA,EAAW;EAEhB,IAAII,YAAA;EACJ,IAAIC,oBAAA;EAEJ,IAAI;QAEaC,eAAA;IADf;IACAF,YAAA,IAAeE,eAAA,GAAAC,OAAA,CAAQC,MAAM,qBAAdF,eAAA,CAAgBG,SAAS,GAAGC,MAAM,CAACC,mBAAmB;EACvE,EAAE,MAAM,CAAC;EAET,IAAI;IACF,MAAMC,QAAA,GAAWC,MAAA,CAAOC,IAAI,CAACC,YAAA,CAAAC,oBAAoB,IAAI,CAAC,GAAGC,MAAM,CAAEC,GAAA,IAC/DA,GAAA,CAAIC,UAAU,CAAC;IAEjB,MAAMC,aAAA,GAAgB,EAAE;IAExB,KAAK,MAAMF,GAAA,IAAON,QAAA,EAAU;MAC1B,IAAI;QACF,MAAM;UAAES;QAAO,CAAE,GAAGC,OAAA,CAAS,GAAEJ,GAAI,eAAc;QACjDE,aAAA,CAAcG,IAAI,CAAE,GAAEL,GAAI,IAAGG,OAAQ,EAAC;MACxC,EAAE,MAAM,CAAC;IACX;IAEA,IAAID,aAAA,CAAcI,MAAM,GAAG,GAAG;MAC5BnB,oBAAA,GAAuBe,aAAA,CAAcK,IAAI,GAAGC,IAAI,CAAC;IACnD;EACF,EAAE,MAAM,CAAC;EAET1B,SAAA,CAAU2B,MAAM,CAAC;IACfC,SAAA,EAAW9B,oBAAA;IACX+B,OAAA,EAAS;MACPC,WAAA,EAAAf,YAAA,CAAAM,OAAW;MACXjB,YAAA;MACAC,oBAAA;MACA0B,IAAA,EAAMxB,OAAA,CAAQwB,IAAI;MAClBC,QAAA,EAAUzB,OAAA,CAAQyB,QAAQ;MAC1BC,WAAA,EAAa1B,OAAA,CAAQ2B,QAAQ,CAACC,IAAI;MAClCC,IAAI,EAAErC,KAAA,oBAAAA,KAAA,CAAOqC,IAAI;MACjBC,uBAAuB,EAAEtC,KAAA,oBAAAA,KAAA,CAAOsC;IAClC;EACF;EACA;EACA,MAAMrC,SAAA,CAAUsC,KAAK;AACvB"},"metadata":{},"sourceType":"script","externalDependencies":[]}