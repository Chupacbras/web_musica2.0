{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  buildCustomRoute: null,\n  default: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  buildCustomRoute: function () {\n    return buildCustomRoute;\n  },\n  default: function () {\n    return build;\n  }\n});\nrequire(\"../lib/setup-exception-listeners\");\nconst _env = require(\"@next/env\");\nconst _chalk = /*#__PURE__*/_interop_require_default(require(\"next/dist/compiled/chalk\"));\nconst _crypto = /*#__PURE__*/_interop_require_default(require(\"crypto\"));\nconst _micromatch = require(\"next/dist/compiled/micromatch\");\nconst _fs = require(\"fs\");\nconst _os = /*#__PURE__*/_interop_require_default(require(\"os\"));\nconst _worker = require(\"../lib/worker\");\nconst _configshared = require(\"../server/config-shared\");\nconst _devalue = /*#__PURE__*/_interop_require_default(require(\"next/dist/compiled/devalue\"));\nconst _findup = /*#__PURE__*/_interop_require_default(require(\"next/dist/compiled/find-up\"));\nconst _indexcjs = require(\"next/dist/compiled/nanoid/index.cjs\");\nconst _pathtoregexp = require(\"next/dist/compiled/path-to-regexp\");\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nconst _constants = require(\"../lib/constants\");\nconst _fileexists = require(\"../lib/file-exists\");\nconst _findpagesdir = require(\"../lib/find-pages-dir\");\nconst _loadcustomroutes = /*#__PURE__*/_interop_require_wildcard(require(\"../lib/load-custom-routes\"));\nconst _redirectstatus = require(\"../lib/redirect-status\");\nconst _nonnullable = require(\"../lib/non-nullable\");\nconst _recursivedelete = require(\"../lib/recursive-delete\");\nconst _verifypartytownsetup = require(\"../lib/verify-partytown-setup\");\nconst _constants1 = require(\"../shared/lib/constants\");\nconst _utils = require(\"../shared/lib/router/utils\");\nconst _config = /*#__PURE__*/_interop_require_default(require(\"../server/config\"));\nconst _normalizepagepath = require(\"../shared/lib/page-path/normalize-page-path\");\nconst _require = require(\"../server/require\");\nconst _ciinfo = /*#__PURE__*/_interop_require_wildcard(require(\"../telemetry/ci-info\"));\nconst _events = require(\"../telemetry/events\");\nconst _storage = require(\"../telemetry/storage\");\nconst _getpagestaticinfo = require(\"./analysis/get-page-static-info\");\nconst _entries = require(\"./entries\");\nconst _generatebuildid = require(\"./generate-build-id\");\nconst _iswriteable = require(\"./is-writeable\");\nconst _log = /*#__PURE__*/_interop_require_wildcard(require(\"./output/log\"));\nconst _spinner = /*#__PURE__*/_interop_require_default(require(\"./spinner\"));\nconst _trace = require(\"../trace\");\nconst _utils1 = require(\"./utils\");\nconst _writebuildid = require(\"./write-build-id\");\nconst _normalizelocalepath = require(\"../shared/lib/i18n/normalize-locale-path\");\nconst _iserror = /*#__PURE__*/_interop_require_default(require(\"../lib/is-error\"));\nconst _isedgeruntime = require(\"../lib/is-edge-runtime\");\nconst _recursivecopy = require(\"../lib/recursive-copy\");\nconst _recursivereaddir = require(\"../lib/recursive-readdir\");\nconst _swc = require(\"./swc\");\nconst _routeregex = require(\"../shared/lib/router/utils/route-regex\");\nconst _flatreaddir = require(\"../lib/flat-readdir\");\nconst _swcplugins = require(\"../telemetry/events/swc-plugins\");\nconst _apppaths = require(\"../shared/lib/router/utils/app-paths\");\nconst _approuterheaders = require(\"../client/components/app-router-headers\");\nconst _webpackbuild = require(\"./webpack-build\");\nconst _buildcontext = require(\"./build-context\");\nconst _normalizepathsep = require(\"../shared/lib/page-path/normalize-path-sep\");\nconst _isapprouteroute = require(\"../lib/is-app-route-route\");\nconst _createclientrouterfilter = require(\"../lib/create-client-router-filter\");\nconst _findpagefile = require(\"../server/lib/find-page-file\");\nconst _typecheck = require(\"./type-check\");\nconst _generateinterceptionroutesrewrites = require(\"../lib/generate-interception-routes-rewrites\");\nconst _builddataroute = require(\"../server/lib/router-utils/build-data-route\");\nconst _requirehook = require(\"../server/require-hook\");\nconst _incrementalcacheserver = require(\"../server/lib/incremental-cache-server\");\nconst _nodefsmethods = require(\"../server/lib/node-fs-methods\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction buildCustomRoute(type, route, restrictedRedirectPaths) {\n  const compiled = (0, _pathtoregexp.pathToRegexp)(route.source, [], {\n    strict: true,\n    sensitive: false,\n    delimiter: \"/\"\n  });\n  let source = compiled.source;\n  if (!route.internal) {\n    source = (0, _redirectstatus.modifyRouteRegex)(source, type === \"redirect\" ? restrictedRedirectPaths : undefined);\n  }\n  const regex = (0, _loadcustomroutes.normalizeRouteRegex)(source);\n  if (type !== \"redirect\") {\n    return {\n      ...route,\n      regex\n    };\n  }\n  return {\n    ...route,\n    statusCode: (0, _redirectstatus.getRedirectStatus)(route),\n    permanent: undefined,\n    regex\n  };\n}\nasync function generateClientSsgManifest(prerenderManifest, {\n  buildId,\n  distDir,\n  locales\n}) {\n  const ssgPages = new Set([...Object.entries(prerenderManifest.routes) // Filter out dynamic routes\n  .filter(([, {\n    srcRoute\n  }]) => srcRoute == null).map(([route]) => (0, _normalizelocalepath.normalizeLocalePath)(route, locales).pathname), ...Object.keys(prerenderManifest.dynamicRoutes)].sort());\n  const clientSsgManifestContent = `self.__SSG_MANIFEST=${(0, _devalue.default)(ssgPages)};self.__SSG_MANIFEST_CB&&self.__SSG_MANIFEST_CB()`;\n  await _fs.promises.writeFile(_path.default.join(distDir, _constants1.CLIENT_STATIC_FILES_PATH, buildId, \"_ssgManifest.js\"), clientSsgManifestContent);\n}\nfunction pageToRoute(page) {\n  const routeRegex = (0, _routeregex.getNamedRouteRegex)(page, true);\n  return {\n    page,\n    regex: (0, _loadcustomroutes.normalizeRouteRegex)(routeRegex.re.source),\n    routeKeys: routeRegex.routeKeys,\n    namedRegex: routeRegex.namedRegex\n  };\n}\nasync function build(dir, reactProductionProfiling = false, debugOutput = false, runLint = true, noMangling = false, appDirOnly = false, turboNextBuild = false, turboNextBuildRoot = null, buildMode) {\n  const isCompile = buildMode === \"experimental-compile\";\n  const isGenerate = buildMode === \"experimental-generate\";\n  let hasAppDir = false;\n  try {\n    const nextBuildSpan = (0, _trace.trace)(\"next-build\", undefined, {\n      version: \"13.5.3\"\n    });\n    _buildcontext.NextBuildContext.nextBuildSpan = nextBuildSpan;\n    _buildcontext.NextBuildContext.dir = dir;\n    _buildcontext.NextBuildContext.appDirOnly = appDirOnly;\n    _buildcontext.NextBuildContext.reactProductionProfiling = reactProductionProfiling;\n    _buildcontext.NextBuildContext.noMangling = noMangling;\n    const buildResult = await nextBuildSpan.traceAsyncFn(async () => {\n      var _mappedPages_404, _config_images;\n      // attempt to load global env values so they are available in next.config.js\n      const {\n        loadedEnvFiles\n      } = nextBuildSpan.traceChild(\"load-dotenv\").traceFn(() => (0, _env.loadEnvConfig)(dir, false, _log));\n      _buildcontext.NextBuildContext.loadedEnvFiles = loadedEnvFiles;\n      const config = await nextBuildSpan.traceChild(\"load-next-config\").traceAsyncFn(() => (0, _config.default)(_constants1.PHASE_PRODUCTION_BUILD, dir, {\n        // Log for next.config loading process\n        silent: false\n      }));\n      _buildcontext.NextBuildContext.config = config;\n      let configOutDir = \"out\";\n      if (config.output === \"export\" && config.distDir !== \".next\") {\n        // In the past, a user had to run \"next build\" to generate\n        // \".next\" (or whatever the distDir) followed by \"next export\"\n        // to generate \"out\" (or whatever the outDir). However, when\n        // \"output: export\" is configured, \"next build\" does both steps.\n        // So the user-configured distDir is actually the outDir.\n        configOutDir = config.distDir;\n        config.distDir = \".next\";\n      }\n      const distDir = _path.default.join(dir, config.distDir);\n      (0, _trace.setGlobal)(\"phase\", _constants1.PHASE_PRODUCTION_BUILD);\n      (0, _trace.setGlobal)(\"distDir\", distDir);\n      let buildId = \"\";\n      if (isGenerate) {\n        buildId = await _fs.promises.readFile(_path.default.join(distDir, \"BUILD_ID\"), \"utf8\");\n      } else {\n        buildId = await nextBuildSpan.traceChild(\"generate-buildid\").traceAsyncFn(() => (0, _generatebuildid.generateBuildId)(config.generateBuildId, _indexcjs.nanoid));\n      }\n      _buildcontext.NextBuildContext.buildId = buildId;\n      const customRoutes = await nextBuildSpan.traceChild(\"load-custom-routes\").traceAsyncFn(() => (0, _loadcustomroutes.default)(config));\n      const {\n        headers,\n        rewrites,\n        redirects\n      } = customRoutes;\n      _buildcontext.NextBuildContext.rewrites = rewrites;\n      _buildcontext.NextBuildContext.originalRewrites = config._originalRewrites;\n      _buildcontext.NextBuildContext.originalRedirects = config._originalRedirects;\n      const cacheDir = _path.default.join(distDir, \"cache\");\n      if (_ciinfo.isCI && !_ciinfo.hasNextSupport) {\n        const hasCache = await (0, _fileexists.fileExists)(cacheDir);\n        if (!hasCache) {\n          // Intentionally not piping to stderr in case people fail in CI when\n          // stderr is detected.\n          console.log(`${_log.prefixes.warn} No build cache found. Please configure build caching for faster rebuilds. Read more: https://nextjs.org/docs/messages/no-cache`);\n        }\n      }\n      const telemetry = new _storage.Telemetry({\n        distDir\n      });\n      (0, _trace.setGlobal)(\"telemetry\", telemetry);\n      const publicDir = _path.default.join(dir, \"public\");\n      const isAppDirEnabled = true;\n      const {\n        pagesDir,\n        appDir\n      } = (0, _findpagesdir.findPagesDir)(dir);\n      _buildcontext.NextBuildContext.pagesDir = pagesDir;\n      _buildcontext.NextBuildContext.appDir = appDir;\n      hasAppDir = Boolean(appDir);\n      const isSrcDir = _path.default.relative(dir, pagesDir || appDir || \"\").startsWith(\"src\");\n      const hasPublicDir = await (0, _fileexists.fileExists)(publicDir);\n      telemetry.record((0, _events.eventCliSession)(dir, config, {\n        webpackVersion: 5,\n        cliCommand: \"build\",\n        isSrcDir,\n        hasNowJson: !!(await (0, _findup.default)(\"now.json\", {\n          cwd: dir\n        })),\n        isCustomServer: null,\n        turboFlag: false,\n        pagesDir: !!pagesDir,\n        appDir: !!appDir\n      }));\n      (0, _events.eventNextPlugins)(_path.default.resolve(dir)).then(events => telemetry.record(events));\n      (0, _swcplugins.eventSwcPlugins)(_path.default.resolve(dir), config).then(events => telemetry.record(events));\n      const ignoreESLint = Boolean(config.eslint.ignoreDuringBuilds);\n      const shouldLint = !ignoreESLint && runLint;\n      const typeCheckingOptions = {\n        dir,\n        appDir,\n        pagesDir,\n        runLint,\n        shouldLint,\n        ignoreESLint,\n        telemetry,\n        nextBuildSpan,\n        config,\n        cacheDir\n      };\n      // For app directory, we run type checking after build. That's because\n      // we dynamically generate types for each layout and page in the app\n      // directory.\n      if (!appDir && !isCompile) await (0, _typecheck.startTypeChecking)(typeCheckingOptions);\n      if (appDir && \"exportPathMap\" in config) {\n        _log.error('The \"exportPathMap\" configuration cannot be used with the \"app\" directory. Please use generateStaticParams() instead.');\n        await telemetry.flush();\n        process.exit(1);\n      }\n      const buildLintEvent = {\n        featureName: \"build-lint\",\n        invocationCount: shouldLint ? 1 : 0\n      };\n      telemetry.record({\n        eventName: _events.EVENT_BUILD_FEATURE_USAGE,\n        payload: buildLintEvent\n      });\n      let buildSpinner = {\n        stopAndPersist() {\n          return this;\n        }\n      };\n      if (!isGenerate) {\n        buildSpinner = (0, _spinner.default)(\"Creating an optimized production build\");\n      }\n      _buildcontext.NextBuildContext.buildSpinner = buildSpinner;\n      const validFileMatcher = (0, _findpagefile.createValidFileMatcher)(config.pageExtensions, appDir);\n      const pagesPaths = !appDirOnly && pagesDir ? await nextBuildSpan.traceChild(\"collect-pages\").traceAsyncFn(() => (0, _recursivereaddir.recursiveReadDir)(pagesDir, {\n        pathnameFilter: validFileMatcher.isPageFile\n      })) : [];\n      const middlewareDetectionRegExp = new RegExp(`^${_constants.MIDDLEWARE_FILENAME}\\\\.(?:${config.pageExtensions.join(\"|\")})$`);\n      const instrumentationHookDetectionRegExp = new RegExp(`^${_constants.INSTRUMENTATION_HOOK_FILENAME}\\\\.(?:${config.pageExtensions.join(\"|\")})$`);\n      const rootDir = _path.default.join(pagesDir || appDir, \"..\");\n      const instrumentationHookEnabled = Boolean(config.experimental.instrumentationHook);\n      const rootPaths = (await (0, _flatreaddir.flatReaddir)(rootDir, [middlewareDetectionRegExp, ...(instrumentationHookEnabled ? [instrumentationHookDetectionRegExp] : [])])).sort((0, _entries.sortByPageExts)(config.pageExtensions)).map(absoluteFile => absoluteFile.replace(dir, \"\"));\n      const hasInstrumentationHook = rootPaths.some(p => p.includes(_constants.INSTRUMENTATION_HOOK_FILENAME));\n      _buildcontext.NextBuildContext.hasInstrumentationHook = hasInstrumentationHook;\n      const previewProps = {\n        previewModeId: _crypto.default.randomBytes(16).toString(\"hex\"),\n        previewModeSigningKey: _crypto.default.randomBytes(32).toString(\"hex\"),\n        previewModeEncryptionKey: _crypto.default.randomBytes(32).toString(\"hex\")\n      };\n      _buildcontext.NextBuildContext.previewProps = previewProps;\n      const mappedPages = nextBuildSpan.traceChild(\"create-pages-mapping\").traceFn(() => (0, _entries.createPagesMapping)({\n        isDev: false,\n        pageExtensions: config.pageExtensions,\n        pagesType: \"pages\",\n        pagePaths: pagesPaths,\n        pagesDir\n      }));\n      _buildcontext.NextBuildContext.mappedPages = mappedPages;\n      let mappedAppPages;\n      let denormalizedAppPages;\n      if (appDir) {\n        const appPaths = await nextBuildSpan.traceChild(\"collect-app-paths\").traceAsyncFn(() => (0, _recursivereaddir.recursiveReadDir)(appDir, {\n          pathnameFilter: absolutePath => validFileMatcher.isAppRouterPage(absolutePath) ||\n          // For now we only collect the root /not-found page in the app\n          // directory as the 404 fallback\n          validFileMatcher.isRootNotFound(absolutePath),\n          ignorePartFilter: part => part.startsWith(\"_\")\n        }));\n        mappedAppPages = nextBuildSpan.traceChild(\"create-app-mapping\").traceFn(() => (0, _entries.createPagesMapping)({\n          pagePaths: appPaths,\n          isDev: false,\n          pagesType: \"app\",\n          pageExtensions: config.pageExtensions,\n          pagesDir: pagesDir\n        }));\n        // If the metadata route doesn't contain generating dynamic exports,\n        // we can replace the dynamic catch-all route and use the static route instead.\n        for (const [pageKey, pagePath] of Object.entries(mappedAppPages)) {\n          if (pageKey.includes(\"[[...__metadata_id__]]\")) {\n            const pageFilePath = (0, _entries.getPageFilePath)({\n              absolutePagePath: pagePath,\n              pagesDir,\n              appDir,\n              rootDir\n            });\n            const isDynamic = await (0, _getpagestaticinfo.isDynamicMetadataRoute)(pageFilePath);\n            if (!isDynamic) {\n              delete mappedAppPages[pageKey];\n              mappedAppPages[pageKey.replace(\"[[...__metadata_id__]]/\", \"\")] = pagePath;\n            }\n            if (pageKey.includes(\"sitemap.xml/[[...__metadata_id__]]\") && isDynamic) {\n              delete mappedAppPages[pageKey];\n              mappedAppPages[pageKey.replace(\"sitemap.xml/[[...__metadata_id__]]\", \"sitemap/[__metadata_id__]\")] = pagePath;\n            }\n          }\n        }\n        _buildcontext.NextBuildContext.mappedAppPages = mappedAppPages;\n      }\n      let mappedRootPaths = {};\n      if (rootPaths.length > 0) {\n        mappedRootPaths = (0, _entries.createPagesMapping)({\n          isDev: false,\n          pageExtensions: config.pageExtensions,\n          pagePaths: rootPaths,\n          pagesType: \"root\",\n          pagesDir: pagesDir\n        });\n      }\n      _buildcontext.NextBuildContext.mappedRootPaths = mappedRootPaths;\n      const pagesPageKeys = Object.keys(mappedPages);\n      const conflictingAppPagePaths = [];\n      const appPageKeys = [];\n      if (mappedAppPages) {\n        denormalizedAppPages = Object.keys(mappedAppPages);\n        for (const appKey of denormalizedAppPages) {\n          const normalizedAppPageKey = (0, _apppaths.normalizeAppPath)(appKey);\n          const pagePath = mappedPages[normalizedAppPageKey];\n          if (pagePath) {\n            const appPath = mappedAppPages[appKey];\n            conflictingAppPagePaths.push([pagePath.replace(/^private-next-pages/, \"pages\"), appPath.replace(/^private-next-app-dir/, \"app\")]);\n          }\n          appPageKeys.push(normalizedAppPageKey);\n        }\n      }\n      // Interception routes are modelled as beforeFiles rewrites\n      rewrites.beforeFiles.push(...(0, _generateinterceptionroutesrewrites.generateInterceptionRoutesRewrites)(appPageKeys));\n      const totalAppPagesCount = appPageKeys.length;\n      const pageKeys = {\n        pages: pagesPageKeys,\n        app: appPageKeys.length > 0 ? appPageKeys : undefined\n      };\n      if (turboNextBuild) {\n        // TODO(WEB-397) This is a temporary workaround to allow for filtering a\n        // subset of pages when building with --experimental-turbo, until we\n        // have complete support for all pages.\n        if (process.env.NEXT_TURBO_FILTER_PAGES) {\n          var _pageKeys_app;\n          const filterPages = process.env.NEXT_TURBO_FILTER_PAGES.split(\",\");\n          pageKeys.pages = pageKeys.pages.filter(page => {\n            return filterPages.some(filterPage => {\n              return (0, _micromatch.isMatch)(page, filterPage);\n            });\n          });\n          pageKeys.app = (_pageKeys_app = pageKeys.app) == null ? void 0 : _pageKeys_app.filter(page => {\n            return filterPages.some(filterPage => {\n              return (0, _micromatch.isMatch)(page, filterPage);\n            });\n          });\n        }\n      }\n      const numConflictingAppPaths = conflictingAppPagePaths.length;\n      if (mappedAppPages && numConflictingAppPaths > 0) {\n        _log.error(`Conflicting app and page file${numConflictingAppPaths === 1 ? \" was\" : \"s were\"} found, please remove the conflicting files to continue:`);\n        for (const [pagePath, appPath] of conflictingAppPagePaths) {\n          _log.error(`  \"${pagePath}\" - \"${appPath}\"`);\n        }\n        await telemetry.flush();\n        process.exit(1);\n      }\n      const conflictingPublicFiles = [];\n      const hasPages404 = (_mappedPages_404 = mappedPages[\"/404\"]) == null ? void 0 : _mappedPages_404.startsWith(_constants.PAGES_DIR_ALIAS);\n      const hasApp404 = !!(mappedAppPages == null ? void 0 : mappedAppPages[\"/_not-found\"]);\n      const hasCustomErrorPage = mappedPages[\"/_error\"].startsWith(_constants.PAGES_DIR_ALIAS);\n      if (hasPublicDir) {\n        const hasPublicUnderScoreNextDir = await (0, _fileexists.fileExists)(_path.default.join(publicDir, \"_next\"));\n        if (hasPublicUnderScoreNextDir) {\n          throw new Error(_constants.PUBLIC_DIR_MIDDLEWARE_CONFLICT);\n        }\n      }\n      await nextBuildSpan.traceChild(\"public-dir-conflict-check\").traceAsyncFn(async () => {\n        // Check if pages conflict with files in `public`\n        // Only a page of public file can be served, not both.\n        for (const page in mappedPages) {\n          const hasPublicPageFile = await (0, _fileexists.fileExists)(_path.default.join(publicDir, page === \"/\" ? \"/index\" : page), _fileexists.FileType.File);\n          if (hasPublicPageFile) {\n            conflictingPublicFiles.push(page);\n          }\n        }\n        const numConflicting = conflictingPublicFiles.length;\n        if (numConflicting) {\n          throw new Error(`Conflicting public and page file${numConflicting === 1 ? \" was\" : \"s were\"} found. https://nextjs.org/docs/messages/conflicting-public-file-page\\n${conflictingPublicFiles.join(\"\\n\")}`);\n        }\n      });\n      const nestedReservedPages = pageKeys.pages.filter(page => {\n        return page.match(/\\/(_app|_document|_error)$/) && _path.default.dirname(page) !== \"/\";\n      });\n      if (nestedReservedPages.length) {\n        _log.warn(`The following reserved Next.js pages were detected not directly under the pages directory:\\n` + nestedReservedPages.join(\"\\n\") + `\\nSee more info here: https://nextjs.org/docs/messages/nested-reserved-page\\n`);\n      }\n      const restrictedRedirectPaths = [\"/_next\"].map(p => config.basePath ? `${config.basePath}${p}` : p);\n      const routesManifestPath = _path.default.join(distDir, _constants1.ROUTES_MANIFEST);\n      const routesManifest = nextBuildSpan.traceChild(\"generate-routes-manifest\").traceFn(() => {\n        const sortedRoutes = (0, _utils.getSortedRoutes)([...pageKeys.pages, ...(pageKeys.app ?? [])]);\n        const dynamicRoutes = [];\n        const staticRoutes = [];\n        for (const route of sortedRoutes) {\n          if ((0, _utils.isDynamicRoute)(route)) {\n            dynamicRoutes.push(pageToRoute(route));\n          } else if (!(0, _utils1.isReservedPage)(route)) {\n            staticRoutes.push(pageToRoute(route));\n          }\n        }\n        return {\n          version: 3,\n          pages404: true,\n          caseSensitive: !!config.experimental.caseSensitiveRoutes,\n          basePath: config.basePath,\n          redirects: redirects.map(r => buildCustomRoute(\"redirect\", r, restrictedRedirectPaths)),\n          headers: headers.map(r => buildCustomRoute(\"header\", r)),\n          dynamicRoutes,\n          staticRoutes,\n          dataRoutes: [],\n          i18n: config.i18n || undefined,\n          rsc: {\n            header: _approuterheaders.RSC,\n            varyHeader: _approuterheaders.RSC_VARY_HEADER,\n            prefetchHeader: _approuterheaders.NEXT_ROUTER_PREFETCH,\n            contentTypeHeader: _approuterheaders.RSC_CONTENT_TYPE_HEADER\n          },\n          skipMiddlewareUrlNormalize: config.skipMiddlewareUrlNormalize\n        };\n      });\n      if (rewrites.beforeFiles.length === 0 && rewrites.fallback.length === 0) {\n        routesManifest.rewrites = rewrites.afterFiles.map(r => buildCustomRoute(\"rewrite\", r));\n      } else {\n        routesManifest.rewrites = {\n          beforeFiles: rewrites.beforeFiles.map(r => buildCustomRoute(\"rewrite\", r)),\n          afterFiles: rewrites.afterFiles.map(r => buildCustomRoute(\"rewrite\", r)),\n          fallback: rewrites.fallback.map(r => buildCustomRoute(\"rewrite\", r))\n        };\n      }\n      const combinedRewrites = [...rewrites.beforeFiles, ...rewrites.afterFiles, ...rewrites.fallback];\n      if (config.experimental.clientRouterFilter) {\n        const nonInternalRedirects = (config._originalRedirects || []).filter(r => !r.internal);\n        const clientRouterFilters = (0, _createclientrouterfilter.createClientRouterFilter)(appPageKeys, config.experimental.clientRouterFilterRedirects ? nonInternalRedirects : [], config.experimental.clientRouterFilterAllowedRate);\n        _buildcontext.NextBuildContext.clientRouterFilters = clientRouterFilters;\n      }\n      const distDirCreated = await nextBuildSpan.traceChild(\"create-dist-dir\").traceAsyncFn(async () => {\n        try {\n          await _fs.promises.mkdir(distDir, {\n            recursive: true\n          });\n          return true;\n        } catch (err) {\n          if ((0, _iserror.default)(err) && err.code === \"EPERM\") {\n            return false;\n          }\n          throw err;\n        }\n      });\n      if (!distDirCreated || !(await (0, _iswriteable.isWriteable)(distDir))) {\n        throw new Error(\"> Build directory is not writeable. https://nextjs.org/docs/messages/build-dir-not-writeable\");\n      }\n      if (config.cleanDistDir && !isGenerate) {\n        await (0, _recursivedelete.recursiveDelete)(distDir, /^cache/);\n      }\n      // Ensure commonjs handling is used for files in the distDir (generally .next)\n      // Files outside of the distDir can be \"type\": \"module\"\n      await _fs.promises.writeFile(_path.default.join(distDir, \"package.json\"), '{\"type\": \"commonjs\"}');\n      // We need to write the manifest with rewrites before build\n      await nextBuildSpan.traceChild(\"write-routes-manifest\").traceAsyncFn(() => _fs.promises.writeFile(routesManifestPath, JSON.stringify(routesManifest), \"utf8\"));\n      // We need to write a partial prerender manifest to make preview mode settings available in edge middleware\n      const partialManifest = {\n        preview: previewProps\n      };\n      await _fs.promises.writeFile(_path.default.join(distDir, _constants1.PRERENDER_MANIFEST).replace(/\\.json$/, \".js\"), `self.__PRERENDER_MANIFEST=${JSON.stringify(JSON.stringify(partialManifest))}`, \"utf8\");\n      const outputFileTracingRoot = config.experimental.outputFileTracingRoot || dir;\n      const manifestPath = _path.default.join(distDir, _constants1.SERVER_DIRECTORY, _constants1.PAGES_MANIFEST);\n      const {\n        incrementalCacheHandlerPath\n      } = config.experimental;\n      const requiredServerFiles = nextBuildSpan.traceChild(\"generate-required-server-files\").traceFn(() => ({\n        version: 1,\n        config: {\n          ...config,\n          configFile: undefined,\n          ...(_ciinfo.hasNextSupport ? {\n            compress: false\n          } : {}),\n          experimental: {\n            ...config.experimental,\n            trustHostHeader: _ciinfo.hasNextSupport,\n            incrementalCacheHandlerPath: incrementalCacheHandlerPath ? _path.default.relative(distDir, incrementalCacheHandlerPath) : undefined\n          }\n        },\n        appDir: dir,\n        relativeAppDir: _path.default.relative(outputFileTracingRoot, dir),\n        files: [_constants1.ROUTES_MANIFEST, _path.default.relative(distDir, manifestPath), _constants1.BUILD_MANIFEST, _constants1.PRERENDER_MANIFEST, _constants1.PRERENDER_MANIFEST.replace(/\\.json$/, \".js\"), _path.default.join(_constants1.SERVER_DIRECTORY, _constants1.MIDDLEWARE_MANIFEST), _path.default.join(_constants1.SERVER_DIRECTORY, _constants1.MIDDLEWARE_BUILD_MANIFEST + \".js\"), _path.default.join(_constants1.SERVER_DIRECTORY, _constants1.MIDDLEWARE_REACT_LOADABLE_MANIFEST + \".js\"), ...(appDir ? [...(config.experimental.sri ? [_path.default.join(_constants1.SERVER_DIRECTORY, _constants1.SUBRESOURCE_INTEGRITY_MANIFEST + \".js\"), _path.default.join(_constants1.SERVER_DIRECTORY, _constants1.SUBRESOURCE_INTEGRITY_MANIFEST + \".json\")] : []), _path.default.join(_constants1.SERVER_DIRECTORY, _constants1.APP_PATHS_MANIFEST), _path.default.join(_constants1.APP_PATH_ROUTES_MANIFEST), _constants1.APP_BUILD_MANIFEST, _path.default.join(_constants1.SERVER_DIRECTORY, _constants1.SERVER_REFERENCE_MANIFEST + \".js\"), _path.default.join(_constants1.SERVER_DIRECTORY, _constants1.SERVER_REFERENCE_MANIFEST + \".json\")] : []), _constants1.REACT_LOADABLE_MANIFEST, config.optimizeFonts ? _path.default.join(_constants1.SERVER_DIRECTORY, _constants1.FONT_MANIFEST) : null, _constants1.BUILD_ID_FILE, _path.default.join(_constants1.SERVER_DIRECTORY, _constants1.NEXT_FONT_MANIFEST + \".js\"), _path.default.join(_constants1.SERVER_DIRECTORY, _constants1.NEXT_FONT_MANIFEST + \".json\"), ...(hasInstrumentationHook ? [_path.default.join(_constants1.SERVER_DIRECTORY, `${_constants.INSTRUMENTATION_HOOK_FILENAME}.js`), _path.default.join(_constants1.SERVER_DIRECTORY, `edge-${_constants.INSTRUMENTATION_HOOK_FILENAME}.js`)] : [])].filter(_nonnullable.nonNullable).map(file => _path.default.join(config.distDir, file)),\n        ignore: []\n      }));\n      let binding = await (0, _swc.loadBindings)();\n      async function turbopackBuild() {\n        const turboNextBuildStart = process.hrtime();\n        const turboJson = _findup.default.sync(\"turbo.json\", {\n          cwd: dir\n        });\n        // eslint-disable-next-line no-shadow\n        const packagePath = _findup.default.sync(\"package.json\", {\n          cwd: dir\n        });\n        let root = turboNextBuildRoot ?? (turboJson ? _path.default.dirname(turboJson) : packagePath ? _path.default.dirname(packagePath) : undefined);\n        await binding.turbo.nextBuild({\n          ..._buildcontext.NextBuildContext,\n          root,\n          distDir: config.distDir\n        });\n        const [duration] = process.hrtime(turboNextBuildStart);\n        return {\n          duration,\n          turbotraceContext: null\n        };\n      }\n      let runTurbotrace = async _staticPages => {};\n      let turboTasksForTrace;\n      if (!isGenerate) {\n        const {\n          duration: webpackBuildDuration,\n          turbotraceContext\n        } = turboNextBuild ? await turbopackBuild() : await (0, _webpackbuild.webpackBuild)();\n        telemetry.record((0, _events.eventBuildCompleted)(pagesPaths, {\n          durationInSeconds: webpackBuildDuration,\n          totalAppPagesCount\n        }));\n        runTurbotrace = async function (staticPages) {\n          if (!turbotraceContext) {\n            return;\n          }\n          if (!(binding == null ? void 0 : binding.isWasm) && typeof binding.turbo.startTrace === \"function\") {\n            var _config_experimental_turbotrace;\n            let turbotraceOutputPath;\n            let turbotraceFiles;\n            turboTasksForTrace = binding.turbo.createTurboTasks((((_config_experimental_turbotrace = config.experimental.turbotrace) == null ? void 0 : _config_experimental_turbotrace.memoryLimit) ?? _constants1.TURBO_TRACE_DEFAULT_MEMORY_LIMIT) * 1024 * 1024);\n            const {\n              entriesTrace,\n              chunksTrace\n            } = turbotraceContext;\n            if (entriesTrace) {\n              const {\n                appDir: turbotraceContextAppDir,\n                depModArray,\n                entryNameMap,\n                outputPath,\n                action\n              } = entriesTrace;\n              const depModSet = new Set(depModArray);\n              const filesTracedInEntries = await binding.turbo.startTrace(action, turboTasksForTrace);\n              const {\n                contextDirectory,\n                input: entriesToTrace\n              } = action;\n              // only trace the assets under the appDir\n              // exclude files from node_modules, entries and processed by webpack\n              const filesTracedFromEntries = filesTracedInEntries.map(f => _path.default.join(contextDirectory, f)).filter(f => !f.includes(\"/node_modules/\") && f.startsWith(turbotraceContextAppDir) && !entriesToTrace.includes(f) && !depModSet.has(f));\n              if (filesTracedFromEntries.length) {\n                // The turbo trace doesn't provide the traced file type and reason at present\n                // let's write the traced files into the first [entry].nft.json\n                const [[, entryName]] = Array.from(entryNameMap.entries()).filter(([k]) => k.startsWith(turbotraceContextAppDir));\n                const traceOutputPath = _path.default.join(outputPath, `../${entryName}.js.nft.json`);\n                const traceOutputDir = _path.default.dirname(traceOutputPath);\n                turbotraceOutputPath = traceOutputPath;\n                turbotraceFiles = filesTracedFromEntries.map(file => _path.default.relative(traceOutputDir, file));\n              }\n            }\n            if (chunksTrace) {\n              const {\n                action,\n                outputPath\n              } = chunksTrace;\n              action.input = action.input.filter(f => {\n                const outputPagesPath = _path.default.join(outputPath, \"..\", \"pages\");\n                return !f.startsWith(outputPagesPath) || !staticPages.has(\n                // strip `outputPagesPath` and file ext from absolute\n                f.substring(outputPagesPath.length, f.length - 3));\n              });\n              await binding.turbo.startTrace(action, turboTasksForTrace);\n              if (turbotraceOutputPath && turbotraceFiles) {\n                const existedNftFile = await _fs.promises.readFile(turbotraceOutputPath, \"utf8\").then(existedContent => JSON.parse(existedContent)).catch(() => ({\n                  version: _constants1.TRACE_OUTPUT_VERSION,\n                  files: []\n                }));\n                existedNftFile.files.push(...turbotraceFiles);\n                const filesSet = new Set(existedNftFile.files);\n                existedNftFile.files = [...filesSet];\n                await _fs.promises.writeFile(turbotraceOutputPath, JSON.stringify(existedNftFile), \"utf8\");\n              }\n            }\n          }\n        };\n      }\n      // For app directory, we run type checking after build.\n      if (appDir && !(isCompile || isGenerate)) {\n        await (0, _typecheck.startTypeChecking)(typeCheckingOptions);\n      }\n      const postCompileSpinner = (0, _spinner.default)(\"Collecting page data\");\n      const buildManifestPath = _path.default.join(distDir, _constants1.BUILD_MANIFEST);\n      const appBuildManifestPath = _path.default.join(distDir, _constants1.APP_BUILD_MANIFEST);\n      let staticAppPagesCount = 0;\n      let serverAppPagesCount = 0;\n      let edgeRuntimeAppCount = 0;\n      let edgeRuntimePagesCount = 0;\n      const ssgPages = new Set();\n      const ssgStaticFallbackPages = new Set();\n      const ssgBlockingFallbackPages = new Set();\n      const staticPages = new Set();\n      const invalidPages = new Set();\n      const hybridAmpPages = new Set();\n      const serverPropsPages = new Set();\n      const additionalSsgPaths = new Map();\n      const additionalSsgPathsEncoded = new Map();\n      const appStaticPaths = new Map();\n      const appPrefetchPaths = new Map();\n      const appStaticPathsEncoded = new Map();\n      const appNormalizedPaths = new Map();\n      const appDynamicParamPaths = new Set();\n      const appDefaultConfigs = new Map();\n      const pageInfos = new Map();\n      const pagesManifest = JSON.parse(await _fs.promises.readFile(manifestPath, \"utf8\"));\n      const buildManifest = JSON.parse(await _fs.promises.readFile(buildManifestPath, \"utf8\"));\n      const appBuildManifest = appDir ? JSON.parse(await _fs.promises.readFile(appBuildManifestPath, \"utf8\")) : undefined;\n      const timeout = config.staticPageGenerationTimeout || 0;\n      const sharedPool = config.experimental.sharedPool || false;\n      const staticWorkerPath = sharedPool ? require.resolve(\"./worker\") : require.resolve(\"./utils\");\n      let appPathsManifest = {};\n      const appPathRoutes = {};\n      if (appDir) {\n        appPathsManifest = JSON.parse(await _fs.promises.readFile(_path.default.join(distDir, _constants1.SERVER_DIRECTORY, _constants1.APP_PATHS_MANIFEST), \"utf8\"));\n        Object.keys(appPathsManifest).forEach(entry => {\n          appPathRoutes[entry] = (0, _apppaths.normalizeAppPath)(entry);\n        });\n        await _fs.promises.writeFile(_path.default.join(distDir, _constants1.APP_PATH_ROUTES_MANIFEST), JSON.stringify(appPathRoutes, null, 2));\n      }\n      process.env.NEXT_PHASE = _constants1.PHASE_PRODUCTION_BUILD;\n      const numWorkers = config.experimental.memoryBasedWorkersCount ? Math.max(config.experimental.cpus !== _configshared.defaultConfig.experimental.cpus ? config.experimental.cpus : Math.min(config.experimental.cpus || 1, Math.floor(_os.default.freemem() / 1e9)),\n      // enforce a minimum of 4 workers\n      4) : config.experimental.cpus || 4;\n      function createStaticWorker(incrementalCacheIpcPort, incrementalCacheIpcValidationKey) {\n        let infoPrinted = false;\n        return new _worker.Worker(staticWorkerPath, {\n          timeout: timeout * 1000,\n          onRestart: (method, [arg], attempts) => {\n            if (method === \"exportPage\") {\n              const {\n                path: pagePath\n              } = arg;\n              if (attempts >= 3) {\n                throw new Error(`Static page generation for ${pagePath} is still timing out after 3 attempts. See more info here https://nextjs.org/docs/messages/static-page-generation-timeout`);\n              }\n              _log.warn(`Restarted static page generation for ${pagePath} because it took more than ${timeout} seconds`);\n            } else {\n              const pagePath = arg;\n              if (attempts >= 2) {\n                throw new Error(`Collecting page data for ${pagePath} is still timing out after 2 attempts. See more info here https://nextjs.org/docs/messages/page-data-collection-timeout`);\n              }\n              _log.warn(`Restarted collecting page data for ${pagePath} because it took more than ${timeout} seconds`);\n            }\n            if (!infoPrinted) {\n              _log.warn(\"See more info here https://nextjs.org/docs/messages/static-page-generation-timeout\");\n              infoPrinted = true;\n            }\n          },\n          numWorkers,\n          forkOptions: {\n            env: {\n              ...process.env,\n              __NEXT_INCREMENTAL_CACHE_IPC_PORT: incrementalCacheIpcPort + \"\",\n              __NEXT_INCREMENTAL_CACHE_IPC_KEY: incrementalCacheIpcValidationKey\n            }\n          },\n          enableWorkerThreads: config.experimental.workerThreads,\n          exposedMethods: sharedPool ? [\"hasCustomGetInitialProps\", \"isPageStatic\", \"getDefinedNamedExports\", \"exportPage\"] : [\"hasCustomGetInitialProps\", \"isPageStatic\", \"getDefinedNamedExports\"]\n        });\n      }\n      let CacheHandler;\n      if (incrementalCacheHandlerPath) {\n        CacheHandler = require(_path.default.isAbsolute(incrementalCacheHandlerPath) ? incrementalCacheHandlerPath : _path.default.join(dir, incrementalCacheHandlerPath));\n        CacheHandler = CacheHandler.default || CacheHandler;\n      }\n      const {\n        ipcPort: incrementalCacheIpcPort,\n        ipcValidationKey: incrementalCacheIpcValidationKey\n      } = await (0, _incrementalcacheserver.initialize)({\n        fs: _nodefsmethods.nodeFs,\n        dev: false,\n        appDir: isAppDirEnabled,\n        fetchCache: isAppDirEnabled,\n        flushToDisk: config.experimental.isrFlushToDisk,\n        serverDistDir: _path.default.join(distDir, \"server\"),\n        fetchCacheKeyPrefix: config.experimental.fetchCacheKeyPrefix,\n        maxMemoryCacheSize: config.experimental.isrMemoryCacheSize,\n        getPrerenderManifest: () => ({\n          version: -1,\n          routes: {},\n          dynamicRoutes: {},\n          notFoundRoutes: [],\n          preview: null\n        }),\n        requestHeaders: {},\n        CurCacheHandler: CacheHandler,\n        minimalMode: _ciinfo.hasNextSupport,\n        allowedRevalidateHeaderKeys: config.experimental.allowedRevalidateHeaderKeys\n      });\n      const pagesStaticWorkers = createStaticWorker(incrementalCacheIpcPort, incrementalCacheIpcValidationKey);\n      const appStaticWorkers = isAppDirEnabled ? createStaticWorker(incrementalCacheIpcPort, incrementalCacheIpcValidationKey) : undefined;\n      const analysisBegin = process.hrtime();\n      const staticCheckSpan = nextBuildSpan.traceChild(\"static-check\");\n      const functionsConfigManifest = {};\n      const {\n        customAppGetInitialProps,\n        namedExports,\n        isNextImageImported,\n        hasSsrAmpPages,\n        hasNonStaticErrorPage\n      } = await staticCheckSpan.traceAsyncFn(async () => {\n        if (isCompile) {\n          return {\n            customAppGetInitialProps: false,\n            namedExports: [],\n            isNextImageImported: true,\n            hasSsrAmpPages: !!pagesDir,\n            hasNonStaticErrorPage: true\n          };\n        }\n        const {\n          configFileName,\n          publicRuntimeConfig,\n          serverRuntimeConfig\n        } = config;\n        const runtimeEnvConfig = {\n          publicRuntimeConfig,\n          serverRuntimeConfig\n        };\n        const nonStaticErrorPageSpan = staticCheckSpan.traceChild(\"check-static-error-page\");\n        const errorPageHasCustomGetInitialProps = nonStaticErrorPageSpan.traceAsyncFn(async () => hasCustomErrorPage && (await pagesStaticWorkers.hasCustomGetInitialProps(\"/_error\", distDir, runtimeEnvConfig, false)));\n        const errorPageStaticResult = nonStaticErrorPageSpan.traceAsyncFn(async () => {\n          var _config_i18n, _config_i18n1;\n          return hasCustomErrorPage && pagesStaticWorkers.isPageStatic({\n            page: \"/_error\",\n            distDir,\n            configFileName,\n            runtimeEnvConfig,\n            httpAgentOptions: config.httpAgentOptions,\n            locales: (_config_i18n = config.i18n) == null ? void 0 : _config_i18n.locales,\n            defaultLocale: (_config_i18n1 = config.i18n) == null ? void 0 : _config_i18n1.defaultLocale,\n            nextConfigOutput: config.output\n          });\n        });\n        const appPageToCheck = \"/_app\";\n        const customAppGetInitialPropsPromise = pagesStaticWorkers.hasCustomGetInitialProps(appPageToCheck, distDir, runtimeEnvConfig, true);\n        const namedExportsPromise = pagesStaticWorkers.getDefinedNamedExports(appPageToCheck, distDir, runtimeEnvConfig);\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        let isNextImageImported;\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        let hasSsrAmpPages = false;\n        const computedManifestData = await (0, _utils1.computeFromManifest)({\n          build: buildManifest,\n          app: appBuildManifest\n        }, distDir, config.experimental.gzipSize);\n        const middlewareManifest = require(_path.default.join(distDir, _constants1.SERVER_DIRECTORY, _constants1.MIDDLEWARE_MANIFEST));\n        const actionManifest = appDir ? require(_path.default.join(distDir, _constants1.SERVER_DIRECTORY, _constants1.SERVER_REFERENCE_MANIFEST + \".json\")) : null;\n        const entriesWithAction = actionManifest ? new Set() : null;\n        if (actionManifest && entriesWithAction) {\n          for (const id in actionManifest.node) {\n            for (const entry in actionManifest.node[id].workers) {\n              entriesWithAction.add(entry);\n            }\n          }\n          for (const id in actionManifest.edge) {\n            for (const entry in actionManifest.edge[id].workers) {\n              entriesWithAction.add(entry);\n            }\n          }\n        }\n        for (const key of Object.keys(middlewareManifest == null ? void 0 : middlewareManifest.functions)) {\n          if (key.startsWith(\"/api\")) {\n            edgeRuntimePagesCount++;\n          }\n        }\n        await Promise.all(Object.entries(pageKeys).reduce((acc, [key, files]) => {\n          if (!files) {\n            return acc;\n          }\n          const pageType = key;\n          for (const page of files) {\n            acc.push({\n              pageType,\n              page\n            });\n          }\n          return acc;\n        }, []).map(({\n          pageType,\n          page\n        }) => {\n          const checkPageSpan = staticCheckSpan.traceChild(\"check-page\", {\n            page\n          });\n          return checkPageSpan.traceAsyncFn(async () => {\n            const actualPage = (0, _normalizepagepath.normalizePagePath)(page);\n            const [selfSize, allSize] = await (0, _utils1.getJsPageSizeInKb)(pageType, actualPage, distDir, buildManifest, appBuildManifest, config.experimental.gzipSize, computedManifestData);\n            let isSsg = false;\n            let isStatic = false;\n            let isServerComponent = false;\n            let isHybridAmp = false;\n            let ssgPageRoutes = null;\n            let pagePath = \"\";\n            if (pageType === \"pages\") {\n              pagePath = pagesPaths.find(p => {\n                p = (0, _normalizepathsep.normalizePathSep)(p);\n                return p.startsWith(actualPage + \".\") || p.startsWith(actualPage + \"/index.\");\n              }) || \"\";\n            }\n            let originalAppPath;\n            if (pageType === \"app\" && mappedAppPages) {\n              for (const [originalPath, normalizedPath] of Object.entries(appPathRoutes)) {\n                if (normalizedPath === page) {\n                  pagePath = mappedAppPages[originalPath].replace(/^private-next-app-dir/, \"\");\n                  originalAppPath = originalPath;\n                  break;\n                }\n              }\n            }\n            const pageFilePath = (0, _utils1.isAppBuiltinNotFoundPage)(pagePath) ? require.resolve(\"next/dist/client/components/not-found-error\") : _path.default.join((pageType === \"pages\" ? pagesDir : appDir) || \"\", pagePath);\n            const staticInfo = pagePath ? await (0, _getpagestaticinfo.getPageStaticInfo)({\n              pageFilePath,\n              nextConfig: config,\n              pageType\n            }) : undefined;\n            if (staticInfo == null ? void 0 : staticInfo.extraConfig) {\n              functionsConfigManifest[page] = staticInfo.extraConfig;\n            }\n            const pageRuntime = middlewareManifest.functions[originalAppPath || page] ? \"edge\" : staticInfo == null ? void 0 : staticInfo.runtime;\n            if (!isCompile) {\n              isServerComponent = pageType === \"app\" && (staticInfo == null ? void 0 : staticInfo.rsc) !== _constants1.RSC_MODULE_TYPES.client;\n              if (pageType === \"app\" || !(0, _utils1.isReservedPage)(page)) {\n                try {\n                  let edgeInfo;\n                  if ((0, _isedgeruntime.isEdgeRuntime)(pageRuntime)) {\n                    if (pageType === \"app\") {\n                      edgeRuntimeAppCount++;\n                    } else {\n                      edgeRuntimePagesCount++;\n                    }\n                    const manifestKey = pageType === \"pages\" ? page : originalAppPath || \"\";\n                    edgeInfo = middlewareManifest.functions[manifestKey];\n                  }\n                  let isPageStaticSpan = checkPageSpan.traceChild(\"is-page-static\");\n                  let workerResult = await isPageStaticSpan.traceAsyncFn(() => {\n                    var _config_i18n, _config_i18n1;\n                    return (pageType === \"app\" ? appStaticWorkers : pagesStaticWorkers).isPageStatic({\n                      page,\n                      originalAppPath,\n                      distDir,\n                      configFileName,\n                      runtimeEnvConfig,\n                      httpAgentOptions: config.httpAgentOptions,\n                      locales: (_config_i18n = config.i18n) == null ? void 0 : _config_i18n.locales,\n                      defaultLocale: (_config_i18n1 = config.i18n) == null ? void 0 : _config_i18n1.defaultLocale,\n                      parentId: isPageStaticSpan.id,\n                      pageRuntime,\n                      edgeInfo,\n                      pageType,\n                      incrementalCacheHandlerPath: config.experimental.incrementalCacheHandlerPath,\n                      isrFlushToDisk: config.experimental.isrFlushToDisk,\n                      maxMemoryCacheSize: config.experimental.isrMemoryCacheSize,\n                      nextConfigOutput: config.output\n                    });\n                  });\n                  if (pageType === \"app\" && originalAppPath) {\n                    appNormalizedPaths.set(originalAppPath, page);\n                    // TODO-APP: handle prerendering with edge\n                    if ((0, _isedgeruntime.isEdgeRuntime)(pageRuntime)) {\n                      isStatic = false;\n                      isSsg = false;\n                      _log.warnOnce(`Using edge runtime on a page currently disables static generation for that page`);\n                    } else {\n                      if (workerResult.encodedPrerenderRoutes && workerResult.prerenderRoutes) {\n                        appStaticPaths.set(originalAppPath, workerResult.prerenderRoutes);\n                        appStaticPathsEncoded.set(originalAppPath, workerResult.encodedPrerenderRoutes);\n                        ssgPageRoutes = workerResult.prerenderRoutes;\n                        isSsg = true;\n                      }\n                      const appConfig = workerResult.appConfig || {};\n                      if (appConfig.revalidate !== 0) {\n                        var _workerResult_prerenderRoutes;\n                        const isDynamic = (0, _utils.isDynamicRoute)(page);\n                        const hasGenerateStaticParams = !!((_workerResult_prerenderRoutes = workerResult.prerenderRoutes) == null ? void 0 : _workerResult_prerenderRoutes.length);\n                        if (config.output === \"export\" && isDynamic && !hasGenerateStaticParams) {\n                          throw new Error(`Page \"${page}\" is missing \"generateStaticParams()\" so it cannot be used with \"output: export\" config.`);\n                        }\n                        if (\n                        // Mark the app as static if:\n                        // - It has no dynamic param\n                        // - It doesn't have generateStaticParams but `dynamic` is set to\n                        //   `error` or `force-static`\n                        !isDynamic) {\n                          appStaticPaths.set(originalAppPath, [page]);\n                          appStaticPathsEncoded.set(originalAppPath, [page]);\n                          isStatic = true;\n                        } else if (isDynamic && !hasGenerateStaticParams && (appConfig.dynamic === \"error\" || appConfig.dynamic === \"force-static\")) {\n                          appStaticPaths.set(originalAppPath, []);\n                          appStaticPathsEncoded.set(originalAppPath, []);\n                          isStatic = true;\n                        }\n                      }\n                      if (workerResult.prerenderFallback) {\n                        // whether or not to allow requests for paths not\n                        // returned from generateStaticParams\n                        appDynamicParamPaths.add(originalAppPath);\n                      }\n                      appDefaultConfigs.set(originalAppPath, appConfig);\n                      if (!isStatic && !(0, _isapprouteroute.isAppRouteRoute)(originalAppPath) && !(0, _utils.isDynamicRoute)(originalAppPath)) {\n                        appPrefetchPaths.set(originalAppPath, page);\n                      }\n                    }\n                  } else {\n                    if ((0, _isedgeruntime.isEdgeRuntime)(pageRuntime)) {\n                      if (workerResult.hasStaticProps) {\n                        console.warn(`\"getStaticProps\" is not yet supported fully with \"experimental-edge\", detected on ${page}`);\n                      }\n                      // TODO: add handling for statically rendering edge\n                      // pages and allow edge with Prerender outputs\n                      workerResult.isStatic = false;\n                      workerResult.hasStaticProps = false;\n                    }\n                    if (workerResult.isStatic === false && (workerResult.isHybridAmp || workerResult.isAmpOnly)) {\n                      hasSsrAmpPages = true;\n                    }\n                    if (workerResult.isHybridAmp) {\n                      isHybridAmp = true;\n                      hybridAmpPages.add(page);\n                    }\n                    if (workerResult.isNextImageImported) {\n                      isNextImageImported = true;\n                    }\n                    if (workerResult.hasStaticProps) {\n                      ssgPages.add(page);\n                      isSsg = true;\n                      if (workerResult.prerenderRoutes && workerResult.encodedPrerenderRoutes) {\n                        additionalSsgPaths.set(page, workerResult.prerenderRoutes);\n                        additionalSsgPathsEncoded.set(page, workerResult.encodedPrerenderRoutes);\n                        ssgPageRoutes = workerResult.prerenderRoutes;\n                      }\n                      if (workerResult.prerenderFallback === \"blocking\") {\n                        ssgBlockingFallbackPages.add(page);\n                      } else if (workerResult.prerenderFallback === true) {\n                        ssgStaticFallbackPages.add(page);\n                      }\n                    } else if (workerResult.hasServerProps) {\n                      serverPropsPages.add(page);\n                    } else if (workerResult.isStatic && !isServerComponent && (await customAppGetInitialPropsPromise) === false) {\n                      staticPages.add(page);\n                      isStatic = true;\n                    } else if (isServerComponent) {\n                      // This is a static server component page that doesn't have\n                      // gSP or gSSP. We still treat it as a SSG page.\n                      ssgPages.add(page);\n                      isSsg = true;\n                    }\n                    if (hasPages404 && page === \"/404\") {\n                      if (!workerResult.isStatic && !workerResult.hasStaticProps) {\n                        throw new Error(`\\`pages/404\\` ${_constants.STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`);\n                      }\n                      // we need to ensure the 404 lambda is present since we use\n                      // it when _app has getInitialProps\n                      if ((await customAppGetInitialPropsPromise) && !workerResult.hasStaticProps) {\n                        staticPages.delete(page);\n                      }\n                    }\n                    if (_constants1.STATIC_STATUS_PAGES.includes(page) && !workerResult.isStatic && !workerResult.hasStaticProps) {\n                      throw new Error(`\\`pages${page}\\` ${_constants.STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`);\n                    }\n                  }\n                } catch (err) {\n                  if (!(0, _iserror.default)(err) || err.message !== \"INVALID_DEFAULT_EXPORT\") throw err;\n                  invalidPages.add(page);\n                }\n              }\n              if (pageType === \"app\") {\n                if (isSsg || isStatic) {\n                  staticAppPagesCount++;\n                } else {\n                  serverAppPagesCount++;\n                }\n              }\n            }\n            pageInfos.set(page, {\n              size: selfSize,\n              totalSize: allSize,\n              static: isStatic,\n              isSsg,\n              isHybridAmp,\n              ssgPageRoutes,\n              initialRevalidateSeconds: false,\n              runtime: pageRuntime,\n              pageDuration: undefined,\n              ssgPageDurations: undefined\n            });\n          });\n        }));\n        const errorPageResult = await errorPageStaticResult;\n        const nonStaticErrorPage = (await errorPageHasCustomGetInitialProps) || errorPageResult && errorPageResult.hasServerProps;\n        const returnValue = {\n          customAppGetInitialProps: await customAppGetInitialPropsPromise,\n          namedExports: await namedExportsPromise,\n          isNextImageImported,\n          hasSsrAmpPages,\n          hasNonStaticErrorPage: nonStaticErrorPage\n        };\n        if (!sharedPool) {\n          pagesStaticWorkers.end();\n          appStaticWorkers == null ? void 0 : appStaticWorkers.end();\n        }\n        return returnValue;\n      });\n      await runTurbotrace(staticPages);\n      if (customAppGetInitialProps) {\n        console.warn(_chalk.default.bold.yellow(`Warning: `) + _chalk.default.yellow(`You have opted-out of Automatic Static Optimization due to \\`getInitialProps\\` in \\`pages/_app\\`. This does not opt-out pages with \\`getStaticProps\\``));\n        console.warn(\"Read more: https://nextjs.org/docs/messages/opt-out-auto-static-optimization\\n\");\n      }\n      if (!hasSsrAmpPages) {\n        requiredServerFiles.ignore.push(_path.default.relative(dir, _path.default.join(_path.default.dirname(require.resolve(\"next/dist/compiled/@ampproject/toolbox-optimizer\")), \"**/*\")));\n      }\n      if (Object.keys(functionsConfigManifest).length > 0) {\n        const manifest = {\n          version: 1,\n          functions: functionsConfigManifest\n        };\n        await _fs.promises.writeFile(_path.default.join(distDir, _constants1.SERVER_DIRECTORY, _constants1.FUNCTIONS_CONFIG_MANIFEST), JSON.stringify(manifest, null, 2));\n      }\n      const nextServerTraceOutput = _path.default.join(distDir, \"next-server.js.nft.json\");\n      const nextMinimalTraceOutput = _path.default.join(distDir, \"next-minimal-server.js.nft.json\");\n      if (!isGenerate && config.outputFileTracing) {\n        let nodeFileTrace;\n        if (config.experimental.turbotrace) {\n          if (!(binding == null ? void 0 : binding.isWasm)) {\n            nodeFileTrace = binding.turbo.startTrace;\n          }\n        }\n        if (!nodeFileTrace) {\n          nodeFileTrace = require(\"next/dist/compiled/@vercel/nft\").nodeFileTrace;\n        }\n        const includeExcludeSpan = nextBuildSpan.traceChild(\"apply-include-excludes\");\n        const resolvedTraceIncludes = new Map();\n        const {\n          outputFileTracingIncludes = {},\n          outputFileTracingExcludes = {}\n        } = config.experimental;\n        const includeGlobKeys = Object.keys(outputFileTracingIncludes);\n        const excludeGlobKeys = Object.keys(outputFileTracingExcludes);\n        await includeExcludeSpan.traceAsyncFn(async () => {\n          const globOrig = require(\"next/dist/compiled/glob\");\n          const glob = pattern => {\n            return new Promise((resolve, reject) => {\n              globOrig(pattern, {\n                cwd: dir,\n                nodir: true,\n                dot: true\n              }, (err, files) => {\n                if (err) {\n                  return reject(err);\n                }\n                resolve(files);\n              });\n            });\n          };\n          if (config.outputFileTracing) {\n            for (let page of pageKeys.pages) {\n              // edge routes have no trace files\n              const pageInfo = pageInfos.get(page);\n              if ((pageInfo == null ? void 0 : pageInfo.runtime) === \"edge\") {\n                continue;\n              }\n              const combinedIncludes = new Set();\n              const combinedExcludes = new Set();\n              page = (0, _normalizepagepath.normalizePagePath)(page);\n              for (const curGlob of includeGlobKeys) {\n                if ((0, _micromatch.isMatch)(page, [curGlob])) {\n                  outputFileTracingIncludes[curGlob].forEach(include => {\n                    combinedIncludes.add(include);\n                  });\n                }\n              }\n              for (const curGlob of excludeGlobKeys) {\n                if ((0, _micromatch.isMatch)(page, [curGlob])) {\n                  outputFileTracingExcludes[curGlob].forEach(exclude => {\n                    combinedExcludes.add(exclude);\n                  });\n                }\n              }\n              if (!(combinedIncludes == null ? void 0 : combinedIncludes.size) && !(combinedExcludes == null ? void 0 : combinedExcludes.size)) {\n                continue;\n              }\n              const traceFile = _path.default.join(distDir, \"server/pages\", `${page}.js.nft.json`);\n              const pageDir = _path.default.dirname(traceFile);\n              const traceContent = JSON.parse(await _fs.promises.readFile(traceFile, \"utf8\"));\n              const includes = [];\n              if (combinedIncludes == null ? void 0 : combinedIncludes.size) {\n                await Promise.all([...combinedIncludes].map(async includeGlob => {\n                  const results = await glob(includeGlob);\n                  const resolvedInclude = resolvedTraceIncludes.get(includeGlob) || [...results.map(file => {\n                    return _path.default.relative(pageDir, _path.default.join(dir, file));\n                  })];\n                  includes.push(...resolvedInclude);\n                  resolvedTraceIncludes.set(includeGlob, resolvedInclude);\n                }));\n              }\n              const combined = new Set([...traceContent.files, ...includes]);\n              if (combinedExcludes == null ? void 0 : combinedExcludes.size) {\n                const resolvedGlobs = [...combinedExcludes].map(exclude => _path.default.join(dir, exclude));\n                combined.forEach(file => {\n                  if ((0, _micromatch.isMatch)(_path.default.join(pageDir, file), resolvedGlobs)) {\n                    combined.delete(file);\n                  }\n                });\n              }\n              await _fs.promises.writeFile(traceFile, JSON.stringify({\n                version: traceContent.version,\n                files: [...combined]\n              }));\n            }\n          }\n        });\n        await nextBuildSpan.traceChild(\"trace-next-server\").traceAsyncFn(async () => {\n          var _config_experimental_turbotrace, _config_experimental;\n          let cacheKey;\n          // consider all lockFiles in tree in case user accidentally\n          // has both package-lock.json and yarn.lock\n          const lockFiles = (await Promise.all([\"package-lock.json\", \"yarn.lock\", \"pnpm-lock.yaml\"].map(file => (0, _findup.default)(file, {\n            cwd: dir\n          })))).filter(Boolean) // TypeScript doesn't like this filter\n          ;\n\n          const cachedTracePath = _path.default.join(distDir, \"cache/next-server.js.nft.json\");\n          const minimalCachedTracePath = _path.default.join(distDir, \"cache/next-minimal-server.js.nft.json\");\n          if (lockFiles.length > 0 &&\n          // we can't leverage trace cache if this is configured\n          // currently unless we break this to a separate trace\n          // file\n          !config.experimental.incrementalCacheHandlerPath) {\n            const cacheHash = require(\"crypto\").createHash(\"sha1\");\n            cacheHash.update(require(\"next/package\").version);\n            cacheHash.update(hasSsrAmpPages + \"\");\n            cacheHash.update(_ciinfo.hasNextSupport + \"\");\n            await Promise.all(lockFiles.map(async lockFile => {\n              cacheHash.update(await _fs.promises.readFile(lockFile));\n            }));\n            cacheKey = cacheHash.digest(\"hex\");\n            try {\n              const existingTrace = JSON.parse(await _fs.promises.readFile(cachedTracePath, \"utf8\"));\n              const existingMinimalTrace = JSON.parse(await _fs.promises.readFile(minimalCachedTracePath, \"utf8\"));\n              if (existingTrace.cacheKey === cacheKey && existingMinimalTrace.cacheKey === cacheKey) {\n                await _fs.promises.copyFile(cachedTracePath, nextServerTraceOutput);\n                await _fs.promises.copyFile(minimalCachedTracePath, nextMinimalTraceOutput);\n                return;\n              }\n            } catch {}\n          }\n          const root = ((_config_experimental = config.experimental) == null ? void 0 : (_config_experimental_turbotrace = _config_experimental.turbotrace) == null ? void 0 : _config_experimental_turbotrace.contextDirectory) ?? outputFileTracingRoot;\n          // Under standalone mode, we need to trace the extra IPC server and\n          // worker files.\n          const isStandalone = config.output === \"standalone\";\n          const nextServerEntry = require.resolve(\"next/dist/server/next-server\");\n          const sharedEntriesSet = [...(config.experimental.turbotrace ? [] : Object.keys(_requirehook.defaultOverrides).map(value => require.resolve(value, {\n            paths: [require.resolve(\"next/dist/server/require-hook\")]\n          }))), require.resolve(\"next/dist/compiled/next-server/app-page.runtime.prod\"), require.resolve(\"next/dist/compiled/next-server/app-route.runtime.prod\"), require.resolve(\"next/dist/compiled/next-server/pages.runtime.prod\"), require.resolve(\"next/dist/compiled/next-server/pages-api.runtime.prod\")];\n          // ensure we trace any dependencies needed for custom\n          // incremental cache handler\n          if (incrementalCacheHandlerPath) {\n            sharedEntriesSet.push(require.resolve(_path.default.isAbsolute(incrementalCacheHandlerPath) ? incrementalCacheHandlerPath : _path.default.join(dir, incrementalCacheHandlerPath)));\n          }\n          const vanillaServerEntries = [...sharedEntriesSet, ...(isStandalone ? [require.resolve(\"next/dist/server/lib/start-server\"), require.resolve(\"next/dist/server/next\"), require.resolve(\"next/dist/server/require-hook\")] : []), require.resolve(\"next/dist/server/next-server\")].filter(Boolean);\n          const minimalServerEntries = [...sharedEntriesSet, require.resolve(\"next/dist/compiled/next-server/server.runtime.prod\")].filter(Boolean);\n          const additionalIgnores = new Set();\n          for (const glob of excludeGlobKeys) {\n            if ((0, _micromatch.isMatch)(\"next-server\", glob)) {\n              outputFileTracingExcludes[glob].forEach(exclude => {\n                additionalIgnores.add(exclude);\n              });\n            }\n          }\n          const ignores = [\"**/*.d.ts\", \"**/*.map\", \"**/next/dist/pages/**/*\", isStandalone ? null : \"**/next/dist/compiled/jest-worker/**/*\", \"**/next/dist/compiled/webpack/(bundle4|bundle5).js\", \"**/node_modules/webpack5/**/*\", \"**/next/dist/server/lib/squoosh/**/*.wasm\", \"**/next/dist/server/lib/route-resolver*\", ...(_ciinfo.hasNextSupport ? [\n          // only ignore image-optimizer code when\n          // this is being handled outside of next-server\n          \"**/next/dist/server/image-optimizer.js\", \"**/node_modules/sharp/**/*\"] : []), ...(!hasSsrAmpPages ? [\"**/next/dist/compiled/@ampproject/toolbox-optimizer/**/*\"] : []), ...additionalIgnores].filter(_nonnullable.nonNullable);\n          const ignoreFn = pathname => {\n            if (_path.default.isAbsolute(pathname) && !pathname.startsWith(root)) {\n              return true;\n            }\n            return (0, _micromatch.isMatch)(pathname, ignores, {\n              contains: true,\n              dot: true\n            });\n          };\n          const traceContext = _path.default.join(nextServerEntry, \"..\", \"..\");\n          const tracedFiles = new Set();\n          const minimalTracedFiles = new Set();\n          function addToTracedFiles(base, file, dest) {\n            dest.add(_path.default.relative(distDir, _path.default.join(base, file)).replace(/\\\\/g, \"/\"));\n          }\n          if (isStandalone) {\n            addToTracedFiles(\"\", require.resolve(\"next/dist/compiled/jest-worker/processChild\"), tracedFiles);\n            addToTracedFiles(\"\", require.resolve(\"next/dist/compiled/jest-worker/threadChild\"), tracedFiles);\n          }\n          if (config.experimental.turbotrace) {\n            const makeTrace = async entries => {\n              var _config_experimental_turbotrace, _config_experimental_turbotrace1, _config_experimental_turbotrace2, _config_experimental_turbotrace3;\n              return nodeFileTrace({\n                action: \"print\",\n                input: entries,\n                contextDirectory: traceContext,\n                logLevel: (_config_experimental_turbotrace = config.experimental.turbotrace) == null ? void 0 : _config_experimental_turbotrace.logLevel,\n                processCwd: (_config_experimental_turbotrace1 = config.experimental.turbotrace) == null ? void 0 : _config_experimental_turbotrace1.processCwd,\n                logDetail: (_config_experimental_turbotrace2 = config.experimental.turbotrace) == null ? void 0 : _config_experimental_turbotrace2.logDetail,\n                showAll: (_config_experimental_turbotrace3 = config.experimental.turbotrace) == null ? void 0 : _config_experimental_turbotrace3.logAll\n              }, turboTasksForTrace);\n            };\n            // turbotrace does not handle concurrent tracing\n            const vanillaFiles = await makeTrace(vanillaServerEntries);\n            const minimalFiles = await makeTrace(minimalServerEntries);\n            for (const [set, files] of [[tracedFiles, vanillaFiles], [minimalTracedFiles, minimalFiles]]) {\n              for (const file of files) {\n                if (!ignoreFn(_path.default.join(traceContext, file))) {\n                  addToTracedFiles(traceContext, file, set);\n                }\n              }\n            }\n          } else {\n            const makeTrace = async entries => nodeFileTrace(entries, {\n              base: root,\n              processCwd: dir,\n              ignore: ignoreFn\n            });\n            const [vanillaFiles, minimalFiles] = await Promise.all([makeTrace(vanillaServerEntries), makeTrace(minimalServerEntries)]);\n            for (const [set, traceResult] of [[tracedFiles, vanillaFiles], [minimalTracedFiles, minimalFiles]]) {\n              for (const file of traceResult.fileList) {\n                addToTracedFiles(root, file, set);\n              }\n            }\n          }\n          const moduleTypes = [\"app-page\", \"pages\"];\n          for (const type of moduleTypes) {\n            const modulePath = require.resolve(`next/dist/server/future/route-modules/${type}/module.compiled`);\n            const relativeModulePath = _path.default.relative(root, modulePath);\n            const contextDir = _path.default.join(_path.default.dirname(modulePath), \"vendored\", \"contexts\");\n            for (const item of await _fs.promises.readdir(contextDir)) {\n              const itemPath = _path.default.relative(root, _path.default.join(contextDir, item));\n              addToTracedFiles(root, itemPath, tracedFiles);\n              addToTracedFiles(root, itemPath, minimalTracedFiles);\n            }\n            addToTracedFiles(root, relativeModulePath, tracedFiles);\n            addToTracedFiles(root, relativeModulePath, minimalTracedFiles);\n          }\n          await Promise.all([_fs.promises.writeFile(nextServerTraceOutput, JSON.stringify({\n            version: 1,\n            cacheKey,\n            files: Array.from(tracedFiles)\n          })), _fs.promises.writeFile(nextMinimalTraceOutput, JSON.stringify({\n            version: 1,\n            cacheKey,\n            files: Array.from(minimalTracedFiles)\n          }))]);\n          await _fs.promises.unlink(cachedTracePath).catch(() => {});\n          await _fs.promises.unlink(minimalCachedTracePath).catch(() => {});\n          await _fs.promises.copyFile(nextServerTraceOutput, cachedTracePath).catch(() => {});\n          await _fs.promises.copyFile(nextMinimalTraceOutput, minimalCachedTracePath).catch(() => {});\n        });\n      }\n      if (serverPropsPages.size > 0 || ssgPages.size > 0) {\n        // We update the routes manifest after the build with the\n        // data routes since we can't determine these until after build\n        routesManifest.dataRoutes = (0, _utils.getSortedRoutes)([...serverPropsPages, ...ssgPages]).map(page => {\n          return (0, _builddataroute.buildDataRoute)(page, buildId);\n        });\n        await _fs.promises.writeFile(routesManifestPath, JSON.stringify(routesManifest), \"utf8\");\n      }\n      // Since custom _app.js can wrap the 404 page we have to opt-out of static optimization if it has getInitialProps\n      // Only export the static 404 when there is no /_error present\n      const useStaticPages404 = !customAppGetInitialProps && (!hasNonStaticErrorPage || hasPages404);\n      if (invalidPages.size > 0) {\n        const err = new Error(`Build optimization failed: found page${invalidPages.size === 1 ? \"\" : \"s\"} without a React Component as default export in \\n${[...invalidPages].map(pg => `pages${pg}`).join(\"\\n\")}\\n\\nSee https://nextjs.org/docs/messages/page-without-valid-component for more info.\\n`);\n        err.code = \"BUILD_OPTIMIZATION_FAILED\";\n        throw err;\n      }\n      await (0, _writebuildid.writeBuildId)(distDir, buildId);\n      if (config.experimental.optimizeCss) {\n        const globOrig = require(\"next/dist/compiled/glob\");\n        const cssFilePaths = await new Promise((resolve, reject) => {\n          globOrig(\"**/*.css\", {\n            cwd: _path.default.join(distDir, \"static\")\n          }, (err, files) => {\n            if (err) {\n              return reject(err);\n            }\n            resolve(files);\n          });\n        });\n        requiredServerFiles.files.push(...cssFilePaths.map(filePath => _path.default.join(config.distDir, \"static\", filePath)));\n      }\n      const features = [{\n        featureName: \"experimental/optimizeCss\",\n        invocationCount: config.experimental.optimizeCss ? 1 : 0\n      }, {\n        featureName: \"experimental/nextScriptWorkers\",\n        invocationCount: config.experimental.nextScriptWorkers ? 1 : 0\n      }, {\n        featureName: \"optimizeFonts\",\n        invocationCount: config.optimizeFonts ? 1 : 0\n      }];\n      telemetry.record(features.map(feature => {\n        return {\n          eventName: _events.EVENT_BUILD_FEATURE_USAGE,\n          payload: feature\n        };\n      }));\n      await _fs.promises.writeFile(_path.default.join(distDir, _constants1.SERVER_FILES_MANIFEST), JSON.stringify(requiredServerFiles), \"utf8\");\n      const middlewareManifest = JSON.parse(await _fs.promises.readFile(_path.default.join(distDir, _constants1.SERVER_DIRECTORY, _constants1.MIDDLEWARE_MANIFEST), \"utf8\"));\n      if (config.output === \"standalone\") {\n        await nextBuildSpan.traceChild(\"copy-traced-files\").traceAsyncFn(async () => {\n          await (0, _utils1.copyTracedFiles)(dir, distDir, pageKeys.pages, denormalizedAppPages, outputFileTracingRoot, requiredServerFiles.config, middlewareManifest, hasInstrumentationHook);\n        });\n      }\n      const finalPrerenderRoutes = {};\n      const finalDynamicRoutes = {};\n      const tbdPrerenderRoutes = [];\n      let ssgNotFoundPaths = [];\n      if (postCompileSpinner) postCompileSpinner.stopAndPersist();\n      const {\n        i18n\n      } = config;\n      const usedStaticStatusPages = _constants1.STATIC_STATUS_PAGES.filter(page => mappedPages[page] && mappedPages[page].startsWith(\"private-next-pages\"));\n      usedStaticStatusPages.forEach(page => {\n        if (!ssgPages.has(page) && !customAppGetInitialProps) {\n          staticPages.add(page);\n        }\n      });\n      const hasPages500 = usedStaticStatusPages.includes(\"/500\");\n      const useDefaultStatic500 = !hasPages500 && !hasNonStaticErrorPage && !customAppGetInitialProps;\n      const combinedPages = [...staticPages, ...ssgPages];\n      const isApp404Static = appStaticPaths.has(\"/_not-found\");\n      const hasStaticApp404 = hasApp404 && isApp404Static;\n      // we need to trigger automatic exporting when we have\n      // - static 404/500\n      // - getStaticProps paths\n      // - experimental app is enabled\n      if (!isCompile && (combinedPages.length > 0 || useStaticPages404 || useDefaultStatic500 || isAppDirEnabled)) {\n        const staticGenerationSpan = nextBuildSpan.traceChild(\"static-generation\");\n        await staticGenerationSpan.traceAsyncFn(async () => {\n          (0, _utils1.detectConflictingPaths)([...combinedPages, ...pageKeys.pages.filter(page => !combinedPages.includes(page))], ssgPages, additionalSsgPaths);\n          const exportApp = require(\"../export\").default;\n          const exportConfig = {\n            ...config,\n            initialPageRevalidationMap: {},\n            initialPageMetaMap: {},\n            pageDurationMap: {},\n            ssgNotFoundPaths: [],\n            // Default map will be the collection of automatic statically exported\n            // pages and incremental pages.\n            // n.b. we cannot handle this above in combinedPages because the dynamic\n            // page must be in the `pages` array, but not in the mapping.\n            exportPathMap: defaultMap => {\n              // Dynamically routed pages should be prerendered to be used as\n              // a client-side skeleton (fallback) while data is being fetched.\n              // This ensures the end-user never sees a 500 or slow response from the\n              // server.\n              //\n              // Note: prerendering disables automatic static optimization.\n              ssgPages.forEach(page => {\n                if ((0, _utils.isDynamicRoute)(page)) {\n                  tbdPrerenderRoutes.push(page);\n                  if (ssgStaticFallbackPages.has(page)) {\n                    // Override the rendering for the dynamic page to be treated as a\n                    // fallback render.\n                    if (i18n) {\n                      defaultMap[`/${i18n.defaultLocale}${page}`] = {\n                        page,\n                        query: {\n                          __nextFallback: \"true\"\n                        }\n                      };\n                    } else {\n                      defaultMap[page] = {\n                        page,\n                        query: {\n                          __nextFallback: \"true\"\n                        }\n                      };\n                    }\n                  } else {\n                    // Remove dynamically routed pages from the default path map when\n                    // fallback behavior is disabled.\n                    delete defaultMap[page];\n                  }\n                }\n              });\n              // Append the \"well-known\" routes we should prerender for, e.g. blog\n              // post slugs.\n              additionalSsgPaths.forEach((routes, page) => {\n                const encodedRoutes = additionalSsgPathsEncoded.get(page);\n                routes.forEach((route, routeIdx) => {\n                  defaultMap[route] = {\n                    page,\n                    query: {\n                      __nextSsgPath: encodedRoutes == null ? void 0 : encodedRoutes[routeIdx]\n                    }\n                  };\n                });\n              });\n              if (useStaticPages404) {\n                defaultMap[\"/404\"] = {\n                  page: hasPages404 ? \"/404\" : \"/_error\"\n                };\n              }\n              if (useDefaultStatic500) {\n                defaultMap[\"/500\"] = {\n                  page: \"/_error\"\n                };\n              }\n              // TODO: output manifest specific to app paths and their\n              // revalidate periods and dynamicParams settings\n              appStaticPaths.forEach((routes, originalAppPath) => {\n                const encodedRoutes = appStaticPathsEncoded.get(originalAppPath);\n                const appConfig = appDefaultConfigs.get(originalAppPath) || {};\n                routes.forEach((route, routeIdx) => {\n                  defaultMap[route] = {\n                    page: originalAppPath,\n                    query: {\n                      __nextSsgPath: encodedRoutes == null ? void 0 : encodedRoutes[routeIdx]\n                    },\n                    _isDynamicError: appConfig.dynamic === \"error\",\n                    _isAppDir: true\n                  };\n                });\n              });\n              for (const [originalAppPath, page] of appPrefetchPaths) {\n                defaultMap[page] = {\n                  page: originalAppPath,\n                  query: {},\n                  _isAppDir: true,\n                  _isAppPrefetch: true\n                };\n              }\n              if (i18n) {\n                for (const page of [...staticPages, ...ssgPages, ...(useStaticPages404 ? [\"/404\"] : []), ...(useDefaultStatic500 ? [\"/500\"] : [])]) {\n                  const isSsg = ssgPages.has(page);\n                  const isDynamic = (0, _utils.isDynamicRoute)(page);\n                  const isFallback = isSsg && ssgStaticFallbackPages.has(page);\n                  for (const locale of i18n.locales) {\n                    var _defaultMap_page;\n                    // skip fallback generation for SSG pages without fallback mode\n                    if (isSsg && isDynamic && !isFallback) continue;\n                    const outputPath = `/${locale}${page === \"/\" ? \"\" : page}`;\n                    defaultMap[outputPath] = {\n                      page: ((_defaultMap_page = defaultMap[page]) == null ? void 0 : _defaultMap_page.page) || page,\n                      query: {\n                        __nextLocale: locale,\n                        __nextFallback: isFallback ? \"true\" : undefined\n                      }\n                    };\n                  }\n                  if (isSsg) {\n                    // remove non-locale prefixed variant from defaultMap\n                    delete defaultMap[page];\n                  }\n                }\n              }\n              return defaultMap;\n            }\n          };\n          const exportOptions = {\n            isInvokedFromCli: false,\n            nextConfig: exportConfig,\n            hasAppDir,\n            silent: false,\n            buildExport: true,\n            debugOutput,\n            threads: config.experimental.cpus,\n            pages: combinedPages,\n            outdir: _path.default.join(distDir, \"export\"),\n            statusMessage: \"Generating static pages\",\n            exportAppPageWorker: sharedPool ? appStaticWorkers == null ? void 0 : appStaticWorkers.exportPage.bind(appStaticWorkers) : undefined,\n            exportPageWorker: sharedPool ? pagesStaticWorkers.exportPage.bind(pagesStaticWorkers) : undefined,\n            endWorker: sharedPool ? async () => {\n              await pagesStaticWorkers.end();\n              await (appStaticWorkers == null ? void 0 : appStaticWorkers.end());\n            } : undefined\n          };\n          await exportApp(dir, exportOptions, nextBuildSpan);\n          const postBuildSpinner = (0, _spinner.default)(\"Finalizing page optimization\");\n          ssgNotFoundPaths = exportConfig.ssgNotFoundPaths;\n          // remove server bundles that were exported\n          for (const page of staticPages) {\n            const serverBundle = (0, _require.getPagePath)(page, distDir, undefined, false);\n            await _fs.promises.unlink(serverBundle);\n          }\n          for (const [originalAppPath, routes] of appStaticPaths) {\n            var _pageInfos_get;\n            const page = appNormalizedPaths.get(originalAppPath) || \"\";\n            const appConfig = appDefaultConfigs.get(originalAppPath) || {};\n            let hasDynamicData = appConfig.revalidate === 0 || exportConfig.initialPageRevalidationMap[page] === 0;\n            if (hasDynamicData && ((_pageInfos_get = pageInfos.get(page)) == null ? void 0 : _pageInfos_get.static)) {\n              // if the page was marked as being static, but it contains dynamic data\n              // (ie, in the case of a static generation bailout), then it should be marked dynamic\n              pageInfos.set(page, {\n                ...pageInfos.get(page),\n                static: false,\n                isSsg: false\n              });\n            }\n            const isRouteHandler = (0, _isapprouteroute.isAppRouteRoute)(originalAppPath);\n            // this flag is used to selectively bypass the static cache and invoke the lambda directly\n            // to enable server actions on static routes\n            const bypassFor = [{\n              type: \"header\",\n              key: _approuterheaders.ACTION\n            }, {\n              type: \"header\",\n              key: \"content-type\",\n              value: \"multipart/form-data\"\n            }];\n            routes.forEach(route => {\n              if ((0, _utils.isDynamicRoute)(page) && route === page) return;\n              if (route === \"/_not-found\") return;\n              let revalidate = exportConfig.initialPageRevalidationMap[route];\n              if (typeof revalidate === \"undefined\") {\n                revalidate = typeof appConfig.revalidate !== \"undefined\" ? appConfig.revalidate : false;\n              }\n              // ensure revalidate is normalized correctly\n              if (typeof revalidate !== \"number\" && typeof revalidate !== \"boolean\") {\n                revalidate = false;\n              }\n              if (revalidate !== 0) {\n                const normalizedRoute = (0, _normalizepagepath.normalizePagePath)(route);\n                const dataRoute = isRouteHandler ? null : _path.default.posix.join(`${normalizedRoute}.rsc`);\n                const routeMeta = {};\n                const exportRouteMeta = exportConfig.initialPageMetaMap[route] || {};\n                if (exportRouteMeta.status !== 200) {\n                  routeMeta.initialStatus = exportRouteMeta.status;\n                }\n                const exportHeaders = exportRouteMeta.headers;\n                const headerKeys = Object.keys(exportHeaders || {});\n                if (exportHeaders && headerKeys.length) {\n                  routeMeta.initialHeaders = {};\n                  // normalize header values as initialHeaders\n                  // must be Record<string, string>\n                  for (const key of headerKeys) {\n                    let value = exportHeaders[key];\n                    if (Array.isArray(value)) {\n                      if (key === \"set-cookie\") {\n                        value = value.join(\",\");\n                      } else {\n                        value = value[value.length - 1];\n                      }\n                    }\n                    if (typeof value === \"string\") {\n                      routeMeta.initialHeaders[key] = value;\n                    }\n                  }\n                }\n                finalPrerenderRoutes[route] = {\n                  ...routeMeta,\n                  experimentalBypassFor: bypassFor,\n                  initialRevalidateSeconds: revalidate,\n                  srcRoute: page,\n                  dataRoute\n                };\n              } else {\n                hasDynamicData = true;\n                // we might have determined during prerendering that this page\n                // used dynamic data\n                pageInfos.set(route, {\n                  ...pageInfos.get(route),\n                  isSsg: false,\n                  static: false\n                });\n              }\n            });\n            if (!hasDynamicData && (0, _utils.isDynamicRoute)(originalAppPath)) {\n              const normalizedRoute = (0, _normalizepagepath.normalizePagePath)(page);\n              const dataRoute = _path.default.posix.join(`${normalizedRoute}.rsc`);\n              // TODO: create a separate manifest to allow enforcing\n              // dynamicParams for non-static paths?\n              finalDynamicRoutes[page] = {\n                experimentalBypassFor: bypassFor,\n                routeRegex: (0, _loadcustomroutes.normalizeRouteRegex)((0, _routeregex.getNamedRouteRegex)(page, false).re.source),\n                dataRoute,\n                // if dynamicParams are enabled treat as fallback:\n                // 'blocking' if not it's fallback: false\n                fallback: appDynamicParamPaths.has(originalAppPath) ? null : false,\n                dataRouteRegex: isRouteHandler ? null : (0, _loadcustomroutes.normalizeRouteRegex)((0, _routeregex.getNamedRouteRegex)(dataRoute.replace(/\\.rsc$/, \"\"), false).re.source.replace(/\\(\\?:\\\\\\/\\)\\?\\$$/, \"\\\\.rsc$\"))\n              };\n            }\n          }\n          const moveExportedPage = async (originPage, page, file, isSsg, ext, additionalSsgFile = false) => {\n            return staticGenerationSpan.traceChild(\"move-exported-page\").traceAsyncFn(async () => {\n              file = `${file}.${ext}`;\n              const orig = _path.default.join(exportOptions.outdir, file);\n              const pagePath = (0, _require.getPagePath)(originPage, distDir, undefined, false);\n              const relativeDest = _path.default.relative(_path.default.join(distDir, _constants1.SERVER_DIRECTORY), _path.default.join(_path.default.join(pagePath,\n              // strip leading / and then recurse number of nested dirs\n              // to place from base folder\n              originPage.slice(1).split(\"/\").map(() => \"..\").join(\"/\")), file)).replace(/\\\\/g, \"/\");\n              if (!isSsg && !(\n              // don't add static status page to manifest if it's\n              // the default generated version e.g. no pages/500\n              _constants1.STATIC_STATUS_PAGES.includes(page) && !usedStaticStatusPages.includes(page))) {\n                pagesManifest[page] = relativeDest;\n              }\n              const dest = _path.default.join(distDir, _constants1.SERVER_DIRECTORY, relativeDest);\n              const isNotFound = ssgNotFoundPaths.includes(page);\n              // for SSG files with i18n the non-prerendered variants are\n              // output with the locale prefixed so don't attempt moving\n              // without the prefix\n              if ((!i18n || additionalSsgFile) && !isNotFound) {\n                await _fs.promises.mkdir(_path.default.dirname(dest), {\n                  recursive: true\n                });\n                await _fs.promises.rename(orig, dest);\n              } else if (i18n && !isSsg) {\n                // this will be updated with the locale prefixed variant\n                // since all files are output with the locale prefix\n                delete pagesManifest[page];\n              }\n              if (i18n) {\n                if (additionalSsgFile) return;\n                for (const locale of i18n.locales) {\n                  const curPath = `/${locale}${page === \"/\" ? \"\" : page}`;\n                  const localeExt = page === \"/\" ? _path.default.extname(file) : \"\";\n                  const relativeDestNoPages = relativeDest.slice(\"pages/\".length);\n                  if (isSsg && ssgNotFoundPaths.includes(curPath)) {\n                    continue;\n                  }\n                  const updatedRelativeDest = _path.default.join(\"pages\", locale + localeExt,\n                  // if it's the top-most index page we want it to be locale.EXT\n                  // instead of locale/index.html\n                  page === \"/\" ? \"\" : relativeDestNoPages).replace(/\\\\/g, \"/\");\n                  const updatedOrig = _path.default.join(exportOptions.outdir, locale + localeExt, page === \"/\" ? \"\" : file);\n                  const updatedDest = _path.default.join(distDir, _constants1.SERVER_DIRECTORY, updatedRelativeDest);\n                  if (!isSsg) {\n                    pagesManifest[curPath] = updatedRelativeDest;\n                  }\n                  await _fs.promises.mkdir(_path.default.dirname(updatedDest), {\n                    recursive: true\n                  });\n                  await _fs.promises.rename(updatedOrig, updatedDest);\n                }\n              }\n            });\n          };\n          async function moveExportedAppNotFoundTo404() {\n            return staticGenerationSpan.traceChild(\"move-exported-app-not-found-\").traceAsyncFn(async () => {\n              const orig = _path.default.join(distDir, \"server\", \"app\", \"_not-found.html\");\n              const updatedRelativeDest = _path.default.join(\"pages\", \"404.html\").replace(/\\\\/g, \"/\");\n              if (await (0, _fileexists.fileExists)(orig)) {\n                await _fs.promises.copyFile(orig, _path.default.join(distDir, \"server\", updatedRelativeDest));\n                pagesManifest[\"/404\"] = updatedRelativeDest;\n              }\n            });\n          }\n          // If there's /not-found inside app, we prefer it over the pages 404\n          if (hasStaticApp404) {\n            await moveExportedAppNotFoundTo404();\n          } else {\n            // Only move /404 to /404 when there is no custom 404 as in that case we don't know about the 404 page\n            if (!hasPages404 && !hasApp404 && useStaticPages404) {\n              await moveExportedPage(\"/_error\", \"/404\", \"/404\", false, \"html\");\n            }\n          }\n          if (useDefaultStatic500) {\n            await moveExportedPage(\"/_error\", \"/500\", \"/500\", false, \"html\");\n          }\n          for (const page of combinedPages) {\n            const isSsg = ssgPages.has(page);\n            const isStaticSsgFallback = ssgStaticFallbackPages.has(page);\n            const isDynamic = (0, _utils.isDynamicRoute)(page);\n            const hasAmp = hybridAmpPages.has(page);\n            const file = (0, _normalizepagepath.normalizePagePath)(page);\n            const pageInfo = pageInfos.get(page);\n            const durationInfo = exportConfig.pageDurationMap[page];\n            if (pageInfo && durationInfo) {\n              // Set Build Duration\n              if (pageInfo.ssgPageRoutes) {\n                pageInfo.ssgPageDurations = pageInfo.ssgPageRoutes.map(pagePath => durationInfo[pagePath]);\n              }\n              pageInfo.pageDuration = durationInfo[page];\n            }\n            // The dynamic version of SSG pages are only prerendered if the\n            // fallback is enabled. Below, we handle the specific prerenders\n            // of these.\n            const hasHtmlOutput = !(isSsg && isDynamic && !isStaticSsgFallback);\n            if (hasHtmlOutput) {\n              await moveExportedPage(page, page, file, isSsg, \"html\");\n            }\n            if (hasAmp && (!isSsg || isSsg && !isDynamic)) {\n              const ampPage = `${file}.amp`;\n              await moveExportedPage(page, ampPage, ampPage, isSsg, \"html\");\n              if (isSsg) {\n                await moveExportedPage(page, ampPage, ampPage, isSsg, \"json\");\n              }\n            }\n            if (isSsg) {\n              // For a non-dynamic SSG page, we must copy its data file\n              // from export, we already moved the HTML file above\n              if (!isDynamic) {\n                await moveExportedPage(page, page, file, isSsg, \"json\");\n                if (i18n) {\n                  // TODO: do we want to show all locale variants in build output\n                  for (const locale of i18n.locales) {\n                    const localePage = `/${locale}${page === \"/\" ? \"\" : page}`;\n                    finalPrerenderRoutes[localePage] = {\n                      initialRevalidateSeconds: exportConfig.initialPageRevalidationMap[localePage],\n                      srcRoute: null,\n                      dataRoute: _path.default.posix.join(\"/_next/data\", buildId, `${file}.json`)\n                    };\n                  }\n                } else {\n                  finalPrerenderRoutes[page] = {\n                    initialRevalidateSeconds: exportConfig.initialPageRevalidationMap[page],\n                    srcRoute: null,\n                    dataRoute: _path.default.posix.join(\"/_next/data\", buildId, `${file}.json`)\n                  };\n                }\n                // Set Page Revalidation Interval\n                if (pageInfo) {\n                  pageInfo.initialRevalidateSeconds = exportConfig.initialPageRevalidationMap[page];\n                }\n              } else {\n                // For a dynamic SSG page, we did not copy its data exports and only\n                // copy the fallback HTML file (if present).\n                // We must also copy specific versions of this page as defined by\n                // `getStaticPaths` (additionalSsgPaths).\n                const extraRoutes = additionalSsgPaths.get(page) || [];\n                for (const route of extraRoutes) {\n                  const pageFile = (0, _normalizepagepath.normalizePagePath)(route);\n                  await moveExportedPage(page, route, pageFile, isSsg, \"html\", true);\n                  await moveExportedPage(page, route, pageFile, isSsg, \"json\", true);\n                  if (hasAmp) {\n                    const ampPage = `${pageFile}.amp`;\n                    await moveExportedPage(page, ampPage, ampPage, isSsg, \"html\", true);\n                    await moveExportedPage(page, ampPage, ampPage, isSsg, \"json\", true);\n                  }\n                  finalPrerenderRoutes[route] = {\n                    initialRevalidateSeconds: exportConfig.initialPageRevalidationMap[route],\n                    srcRoute: page,\n                    dataRoute: _path.default.posix.join(\"/_next/data\", buildId, `${(0, _normalizepagepath.normalizePagePath)(route)}.json`)\n                  };\n                  // Set route Revalidation Interval\n                  if (pageInfo) {\n                    pageInfo.initialRevalidateSeconds = exportConfig.initialPageRevalidationMap[route];\n                  }\n                }\n              }\n            }\n          }\n          // remove temporary export folder\n          await _fs.promises.rm(exportOptions.outdir, {\n            recursive: true,\n            force: true\n          });\n          await _fs.promises.writeFile(manifestPath, JSON.stringify(pagesManifest, null, 2), \"utf8\");\n          if (postBuildSpinner) postBuildSpinner.stopAndPersist();\n          console.log();\n        });\n      }\n      // ensure the worker is not left hanging\n      pagesStaticWorkers.close();\n      appStaticWorkers == null ? void 0 : appStaticWorkers.close();\n      const analysisEnd = process.hrtime(analysisBegin);\n      telemetry.record((0, _events.eventBuildOptimize)(pagesPaths, {\n        durationInSeconds: analysisEnd[0],\n        staticPageCount: staticPages.size,\n        staticPropsPageCount: ssgPages.size,\n        serverPropsPageCount: serverPropsPages.size,\n        ssrPageCount: pagesPaths.length - (staticPages.size + ssgPages.size + serverPropsPages.size),\n        hasStatic404: useStaticPages404,\n        hasReportWebVitals: (namedExports == null ? void 0 : namedExports.includes(\"reportWebVitals\")) ?? false,\n        rewritesCount: combinedRewrites.length,\n        headersCount: headers.length,\n        redirectsCount: redirects.length - 1,\n        headersWithHasCount: headers.filter(r => !!r.has).length,\n        rewritesWithHasCount: combinedRewrites.filter(r => !!r.has).length,\n        redirectsWithHasCount: redirects.filter(r => !!r.has).length,\n        middlewareCount: Object.keys(rootPaths).length > 0 ? 1 : 0,\n        totalAppPagesCount,\n        staticAppPagesCount,\n        serverAppPagesCount,\n        edgeRuntimeAppCount,\n        edgeRuntimePagesCount\n      }));\n      if (_buildcontext.NextBuildContext.telemetryPlugin) {\n        const events = (0, _events.eventBuildFeatureUsage)(_buildcontext.NextBuildContext.telemetryPlugin);\n        telemetry.record(events);\n        telemetry.record((0, _events.eventPackageUsedInGetServerSideProps)(_buildcontext.NextBuildContext.telemetryPlugin));\n      }\n      if (ssgPages.size > 0 || appDir) {\n        var _config_i18n;\n        tbdPrerenderRoutes.forEach(tbdRoute => {\n          const normalizedRoute = (0, _normalizepagepath.normalizePagePath)(tbdRoute);\n          const dataRoute = _path.default.posix.join(\"/_next/data\", buildId, `${normalizedRoute}.json`);\n          finalDynamicRoutes[tbdRoute] = {\n            routeRegex: (0, _loadcustomroutes.normalizeRouteRegex)((0, _routeregex.getNamedRouteRegex)(tbdRoute, false).re.source),\n            dataRoute,\n            fallback: ssgBlockingFallbackPages.has(tbdRoute) ? null : ssgStaticFallbackPages.has(tbdRoute) ? `${normalizedRoute}.html` : false,\n            dataRouteRegex: (0, _loadcustomroutes.normalizeRouteRegex)((0, _routeregex.getNamedRouteRegex)(dataRoute.replace(/\\.json$/, \"\"), false).re.source.replace(/\\(\\?:\\\\\\/\\)\\?\\$$/, \"\\\\.json$\"))\n          };\n        });\n        const prerenderManifest = {\n          version: 4,\n          routes: finalPrerenderRoutes,\n          dynamicRoutes: finalDynamicRoutes,\n          notFoundRoutes: ssgNotFoundPaths,\n          preview: previewProps\n        };\n        _buildcontext.NextBuildContext.previewModeId = previewProps.previewModeId;\n        _buildcontext.NextBuildContext.fetchCacheKeyPrefix = config.experimental.fetchCacheKeyPrefix;\n        _buildcontext.NextBuildContext.allowedRevalidateHeaderKeys = config.experimental.allowedRevalidateHeaderKeys;\n        await _fs.promises.writeFile(_path.default.join(distDir, _constants1.PRERENDER_MANIFEST), JSON.stringify(prerenderManifest), \"utf8\");\n        await _fs.promises.writeFile(_path.default.join(distDir, _constants1.PRERENDER_MANIFEST).replace(/\\.json$/, \".js\"), `self.__PRERENDER_MANIFEST=${JSON.stringify(JSON.stringify(prerenderManifest))}`, \"utf8\");\n        await generateClientSsgManifest(prerenderManifest, {\n          distDir,\n          buildId,\n          locales: ((_config_i18n = config.i18n) == null ? void 0 : _config_i18n.locales) || []\n        });\n      } else {\n        const prerenderManifest = {\n          version: 4,\n          routes: {},\n          dynamicRoutes: {},\n          preview: previewProps,\n          notFoundRoutes: []\n        };\n        await _fs.promises.writeFile(_path.default.join(distDir, _constants1.PRERENDER_MANIFEST), JSON.stringify(prerenderManifest), \"utf8\");\n        await _fs.promises.writeFile(_path.default.join(distDir, _constants1.PRERENDER_MANIFEST).replace(/\\.json$/, \".js\"), `self.__PRERENDER_MANIFEST=${JSON.stringify(JSON.stringify(prerenderManifest))}`, \"utf8\");\n      }\n      const images = {\n        ...config.images\n      };\n      const {\n        deviceSizes,\n        imageSizes\n      } = images;\n      images.sizes = [...deviceSizes, ...imageSizes];\n      images.remotePatterns = ((config == null ? void 0 : (_config_images = config.images) == null ? void 0 : _config_images.remotePatterns) || []).map(p => ({\n        // Should be the same as matchRemotePattern()\n        protocol: p.protocol,\n        hostname: (0, _micromatch.makeRe)(p.hostname).source,\n        port: p.port,\n        pathname: (0, _micromatch.makeRe)(p.pathname ?? \"**\").source\n      }));\n      await _fs.promises.writeFile(_path.default.join(distDir, _constants1.IMAGES_MANIFEST), JSON.stringify({\n        version: 1,\n        images\n      }), \"utf8\");\n      await _fs.promises.writeFile(_path.default.join(distDir, _constants1.EXPORT_MARKER), JSON.stringify({\n        version: 1,\n        hasExportPathMap: typeof config.exportPathMap === \"function\",\n        exportTrailingSlash: config.trailingSlash === true,\n        isNextImageImported: isNextImageImported === true\n      }), \"utf8\");\n      await _fs.promises.unlink(_path.default.join(distDir, _constants1.EXPORT_DETAIL)).catch(err => {\n        if (err.code === \"ENOENT\") {\n          return Promise.resolve();\n        }\n        return Promise.reject(err);\n      });\n      if (config.output === \"standalone\") {\n        for (const file of [...requiredServerFiles.files, _path.default.join(config.distDir, _constants1.SERVER_FILES_MANIFEST), ...loadedEnvFiles.reduce((acc, envFile) => {\n          if ([\".env\", \".env.production\"].includes(envFile.path)) {\n            acc.push(envFile.path);\n          }\n          return acc;\n        }, [])]) {\n          const filePath = _path.default.join(dir, file);\n          const outputPath = _path.default.join(distDir, \"standalone\", _path.default.relative(outputFileTracingRoot, filePath));\n          await _fs.promises.mkdir(_path.default.dirname(outputPath), {\n            recursive: true\n          });\n          await _fs.promises.copyFile(filePath, outputPath);\n        }\n        await (0, _recursivecopy.recursiveCopy)(_path.default.join(distDir, _constants1.SERVER_DIRECTORY, \"pages\"), _path.default.join(distDir, \"standalone\", _path.default.relative(outputFileTracingRoot, distDir), _constants1.SERVER_DIRECTORY, \"pages\"), {\n          overwrite: true\n        });\n        if (appDir) {\n          const originalServerApp = _path.default.join(distDir, _constants1.SERVER_DIRECTORY, \"app\");\n          if ((0, _fs.existsSync)(originalServerApp)) {\n            await (0, _recursivecopy.recursiveCopy)(originalServerApp, _path.default.join(distDir, \"standalone\", _path.default.relative(outputFileTracingRoot, distDir), _constants1.SERVER_DIRECTORY, \"app\"), {\n              overwrite: true\n            });\n          }\n        }\n      }\n      await nextBuildSpan.traceChild(\"print-tree-view\").traceAsyncFn(() => (0, _utils1.printTreeView)(pageKeys, pageInfos, {\n        distPath: distDir,\n        buildId: buildId,\n        pagesDir,\n        useStaticPages404,\n        pageExtensions: config.pageExtensions,\n        appBuildManifest,\n        buildManifest,\n        middlewareManifest,\n        gzipSize: config.experimental.gzipSize\n      }));\n      if (debugOutput) {\n        nextBuildSpan.traceChild(\"print-custom-routes\").traceFn(() => (0, _utils1.printCustomRoutes)({\n          redirects,\n          rewrites,\n          headers\n        }));\n      }\n      if (config.analyticsId) {\n        console.log(_chalk.default.bold.green(\"Next.js Speed Insights\") + \" is enabled for this production build. \" + \"You'll receive a Real Experience Score computed by all of your visitors.\");\n        console.log(\"\");\n      }\n      if (Boolean(config.experimental.nextScriptWorkers)) {\n        await nextBuildSpan.traceChild(\"verify-partytown-setup\").traceAsyncFn(async () => {\n          await (0, _verifypartytownsetup.verifyPartytownSetup)(dir, _path.default.join(distDir, _constants1.CLIENT_STATIC_FILES_PATH));\n        });\n      }\n      if (config.output === \"export\") {\n        const exportApp = require(\"../export\").default;\n        const pagesWorker = createStaticWorker(incrementalCacheIpcPort, incrementalCacheIpcValidationKey);\n        const appWorker = createStaticWorker(incrementalCacheIpcPort, incrementalCacheIpcValidationKey);\n        const options = {\n          isInvokedFromCli: false,\n          buildExport: false,\n          nextConfig: config,\n          hasAppDir,\n          silent: true,\n          threads: config.experimental.cpus,\n          outdir: _path.default.join(dir, configOutDir),\n          exportAppPageWorker: sharedPool ? appWorker.exportPage.bind(appWorker) : undefined,\n          exportPageWorker: sharedPool ? pagesWorker.exportPage.bind(pagesWorker) : undefined,\n          endWorker: sharedPool ? async () => {\n            await pagesWorker.end();\n            await appWorker.end();\n          } : undefined\n        };\n        await exportApp(dir, options, nextBuildSpan);\n        // ensure the worker is not left hanging\n        pagesWorker.close();\n        appWorker.close();\n      }\n      await nextBuildSpan.traceChild(\"telemetry-flush\").traceAsyncFn(() => telemetry.flush());\n    });\n    return buildResult;\n  } finally {\n    // Ensure we wait for lockfile patching if present\n    await _swc.lockfilePatchPromise.cur;\n    // Ensure all traces are flushed before finishing the command\n    await (0, _trace.flushAllTraces)();\n    (0, _swc.teardownTraceSubscriber)();\n    (0, _swc.teardownHeapProfiler)();\n    (0, _swc.teardownCrashReporter)();\n  }\n}","map":{"version":3,"names":["buildCustomRoute","default","build","type","route","restrictedRedirectPaths","compiled","_pathtoregexp","pathToRegexp","source","strict","sensitive","delimiter","internal","_redirectstatus","modifyRouteRegex","undefined","regex","_loadcustomroutes","normalizeRouteRegex","statusCode","getRedirectStatus","permanent","generateClientSsgManifest","prerenderManifest","buildId","distDir","locales","ssgPages","Set","Object","entries","routes","filter","srcRoute","map","_normalizelocalepath","normalizeLocalePath","pathname","keys","dynamicRoutes","sort","clientSsgManifestContent","_devalue","_fs","promises","writeFile","_path","join","_constants1","CLIENT_STATIC_FILES_PATH","pageToRoute","page","routeRegex","_routeregex","getNamedRouteRegex","re","routeKeys","namedRegex","dir","reactProductionProfiling","debugOutput","runLint","noMangling","appDirOnly","turboNextBuild","turboNextBuildRoot","buildMode","isCompile","isGenerate","hasAppDir","nextBuildSpan","_trace","trace","version","_buildcontext","NextBuildContext","buildResult","traceAsyncFn","_mappedPages_404","_config_images","loadedEnvFiles","traceChild","traceFn","_env","loadEnvConfig","_log","config","_config","PHASE_PRODUCTION_BUILD","silent","configOutDir","output","setGlobal","readFile","_generatebuildid","generateBuildId","_indexcjs","nanoid","customRoutes","headers","rewrites","redirects","originalRewrites","_originalRewrites","originalRedirects","_originalRedirects","cacheDir","_ciinfo","isCI","hasNextSupport","hasCache","_fileexists","fileExists","console","log","prefixes","warn","telemetry","_storage","Telemetry","publicDir","isAppDirEnabled","pagesDir","appDir","_findpagesdir","findPagesDir","Boolean","isSrcDir","relative","startsWith","hasPublicDir","record","_events","eventCliSession","webpackVersion","cliCommand","hasNowJson","_findup","cwd","isCustomServer","turboFlag","eventNextPlugins","resolve","then","events","_swcplugins","eventSwcPlugins","ignoreESLint","eslint","ignoreDuringBuilds","shouldLint","typeCheckingOptions","_typecheck","startTypeChecking","error","flush","process","exit","buildLintEvent","featureName","invocationCount","eventName","EVENT_BUILD_FEATURE_USAGE","payload","buildSpinner","stopAndPersist","_spinner","validFileMatcher","_findpagefile","createValidFileMatcher","pageExtensions","pagesPaths","_recursivereaddir","recursiveReadDir","pathnameFilter","isPageFile","middlewareDetectionRegExp","RegExp","_constants","MIDDLEWARE_FILENAME","instrumentationHookDetectionRegExp","INSTRUMENTATION_HOOK_FILENAME","rootDir","instrumentationHookEnabled","experimental","instrumentationHook","rootPaths","_flatreaddir","flatReaddir","_entries","sortByPageExts","absoluteFile","replace","hasInstrumentationHook","some","p","includes","previewProps","previewModeId","_crypto","randomBytes","toString","previewModeSigningKey","previewModeEncryptionKey","mappedPages","createPagesMapping","isDev","pagesType","pagePaths","mappedAppPages","denormalizedAppPages","appPaths","absolutePath","isAppRouterPage","isRootNotFound","ignorePartFilter","part","pageKey","pagePath","pageFilePath","getPageFilePath","absolutePagePath","isDynamic","_getpagestaticinfo","isDynamicMetadataRoute","mappedRootPaths","length","pagesPageKeys","conflictingAppPagePaths","appPageKeys","appKey","normalizedAppPageKey","_apppaths","normalizeAppPath","appPath","push","beforeFiles","_generateinterceptionroutesrewrites","generateInterceptionRoutesRewrites","totalAppPagesCount","pageKeys","pages","app","env","NEXT_TURBO_FILTER_PAGES","_pageKeys_app","filterPages","split","filterPage","_micromatch","isMatch","numConflictingAppPaths","conflictingPublicFiles","hasPages404","PAGES_DIR_ALIAS","hasApp404","hasCustomErrorPage","hasPublicUnderScoreNextDir","Error","PUBLIC_DIR_MIDDLEWARE_CONFLICT","hasPublicPageFile","FileType","File","numConflicting","nestedReservedPages","match","dirname","basePath","routesManifestPath","ROUTES_MANIFEST","routesManifest","sortedRoutes","_utils","getSortedRoutes","staticRoutes","isDynamicRoute","_utils1","isReservedPage","pages404","caseSensitive","caseSensitiveRoutes","r","dataRoutes","i18n","rsc","header","_approuterheaders","RSC","varyHeader","RSC_VARY_HEADER","prefetchHeader","NEXT_ROUTER_PREFETCH","contentTypeHeader","RSC_CONTENT_TYPE_HEADER","skipMiddlewareUrlNormalize","fallback","afterFiles","combinedRewrites","clientRouterFilter","nonInternalRedirects","clientRouterFilters","_createclientrouterfilter","createClientRouterFilter","clientRouterFilterRedirects","clientRouterFilterAllowedRate","distDirCreated","mkdir","recursive","err","_iserror","code","_iswriteable","isWriteable","cleanDistDir","_recursivedelete","recursiveDelete","JSON","stringify","partialManifest","preview","PRERENDER_MANIFEST","outputFileTracingRoot","manifestPath","SERVER_DIRECTORY","PAGES_MANIFEST","incrementalCacheHandlerPath","requiredServerFiles","configFile","compress","trustHostHeader","relativeAppDir","files","BUILD_MANIFEST","MIDDLEWARE_MANIFEST","MIDDLEWARE_BUILD_MANIFEST","MIDDLEWARE_REACT_LOADABLE_MANIFEST","sri","SUBRESOURCE_INTEGRITY_MANIFEST","APP_PATHS_MANIFEST","APP_PATH_ROUTES_MANIFEST","APP_BUILD_MANIFEST","SERVER_REFERENCE_MANIFEST","REACT_LOADABLE_MANIFEST","optimizeFonts","FONT_MANIFEST","BUILD_ID_FILE","NEXT_FONT_MANIFEST","_nonnullable","nonNullable","file","ignore","binding","_swc","loadBindings","turbopackBuild","turboNextBuildStart","hrtime","turboJson","sync","packagePath","root","turbo","nextBuild","duration","turbotraceContext","runTurbotrace","_staticPages","turboTasksForTrace","webpackBuildDuration","_webpackbuild","webpackBuild","eventBuildCompleted","durationInSeconds","staticPages","isWasm","startTrace","_config_experimental_turbotrace","turbotraceOutputPath","turbotraceFiles","createTurboTasks","turbotrace","memoryLimit","TURBO_TRACE_DEFAULT_MEMORY_LIMIT","entriesTrace","chunksTrace","turbotraceContextAppDir","depModArray","entryNameMap","outputPath","action","depModSet","filesTracedInEntries","contextDirectory","input","entriesToTrace","filesTracedFromEntries","f","has","entryName","Array","from","k","traceOutputPath","traceOutputDir","outputPagesPath","substring","existedNftFile","existedContent","parse","catch","TRACE_OUTPUT_VERSION","filesSet","postCompileSpinner","buildManifestPath","appBuildManifestPath","staticAppPagesCount","serverAppPagesCount","edgeRuntimeAppCount","edgeRuntimePagesCount","ssgStaticFallbackPages","ssgBlockingFallbackPages","invalidPages","hybridAmpPages","serverPropsPages","additionalSsgPaths","Map","additionalSsgPathsEncoded","appStaticPaths","appPrefetchPaths","appStaticPathsEncoded","appNormalizedPaths","appDynamicParamPaths","appDefaultConfigs","pageInfos","pagesManifest","buildManifest","appBuildManifest","timeout","staticPageGenerationTimeout","sharedPool","staticWorkerPath","require","appPathsManifest","appPathRoutes","forEach","entry","NEXT_PHASE","numWorkers","memoryBasedWorkersCount","Math","max","cpus","_configshared","defaultConfig","min","floor","_os","freemem","createStaticWorker","incrementalCacheIpcPort","incrementalCacheIpcValidationKey","infoPrinted","_worker","Worker","onRestart","method","arg","attempts","path","forkOptions","__NEXT_INCREMENTAL_CACHE_IPC_PORT","__NEXT_INCREMENTAL_CACHE_IPC_KEY","enableWorkerThreads","workerThreads","exposedMethods","CacheHandler","isAbsolute","ipcPort","ipcValidationKey","_incrementalcacheserver","initialize","fs","_nodefsmethods","nodeFs","dev","fetchCache","flushToDisk","isrFlushToDisk","serverDistDir","fetchCacheKeyPrefix","maxMemoryCacheSize","isrMemoryCacheSize","getPrerenderManifest","notFoundRoutes","requestHeaders","CurCacheHandler","minimalMode","allowedRevalidateHeaderKeys","pagesStaticWorkers","appStaticWorkers","analysisBegin","staticCheckSpan","functionsConfigManifest","customAppGetInitialProps","namedExports","isNextImageImported","hasSsrAmpPages","hasNonStaticErrorPage","configFileName","publicRuntimeConfig","serverRuntimeConfig","runtimeEnvConfig","nonStaticErrorPageSpan","errorPageHasCustomGetInitialProps","hasCustomGetInitialProps","errorPageStaticResult","_config_i18n","_config_i18n1","isPageStatic","httpAgentOptions","defaultLocale","nextConfigOutput","appPageToCheck","customAppGetInitialPropsPromise","namedExportsPromise","getDefinedNamedExports","computedManifestData","computeFromManifest","gzipSize","middlewareManifest","actionManifest","entriesWithAction","id","node","workers","add","edge","key","functions","Promise","all","reduce","acc","pageType","checkPageSpan","actualPage","_normalizepagepath","normalizePagePath","selfSize","allSize","getJsPageSizeInKb","isSsg","isStatic","isServerComponent","isHybridAmp","ssgPageRoutes","find","_normalizepathsep","normalizePathSep","originalAppPath","originalPath","normalizedPath","isAppBuiltinNotFoundPage","staticInfo","getPageStaticInfo","nextConfig","extraConfig","pageRuntime","runtime","RSC_MODULE_TYPES","client","edgeInfo","_isedgeruntime","isEdgeRuntime","manifestKey","isPageStaticSpan","workerResult","parentId","set","warnOnce","encodedPrerenderRoutes","prerenderRoutes","appConfig","revalidate","_workerResult_prerenderRoutes","hasGenerateStaticParams","dynamic","prerenderFallback","_isapprouteroute","isAppRouteRoute","hasStaticProps","isAmpOnly","hasServerProps","STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR","delete","STATIC_STATUS_PAGES","message","size","totalSize","static","initialRevalidateSeconds","pageDuration","ssgPageDurations","errorPageResult","nonStaticErrorPage","returnValue","end","_chalk","bold","yellow","manifest","FUNCTIONS_CONFIG_MANIFEST","nextServerTraceOutput","nextMinimalTraceOutput","outputFileTracing","nodeFileTrace","includeExcludeSpan","resolvedTraceIncludes","outputFileTracingIncludes","outputFileTracingExcludes","includeGlobKeys","excludeGlobKeys","globOrig","glob","pattern","reject","nodir","dot","pageInfo","get","combinedIncludes","combinedExcludes","curGlob","include","exclude","traceFile","pageDir","traceContent","includeGlob","results","resolvedInclude","combined","resolvedGlobs","_config_experimental","cacheKey","lockFiles","cachedTracePath","minimalCachedTracePath","cacheHash","createHash","update","lockFile","digest","existingTrace","existingMinimalTrace","copyFile","isStandalone","nextServerEntry","sharedEntriesSet","_requirehook","defaultOverrides","value","paths","vanillaServerEntries","minimalServerEntries","additionalIgnores","ignores","ignoreFn","contains","traceContext","tracedFiles","minimalTracedFiles","addToTracedFiles","base","dest","makeTrace","_config_experimental_turbotrace1","_config_experimental_turbotrace2","_config_experimental_turbotrace3","logLevel","processCwd","logDetail","showAll","logAll","vanillaFiles","minimalFiles","traceResult","fileList","moduleTypes","modulePath","relativeModulePath","contextDir","item","readdir","itemPath","unlink","_builddataroute","buildDataRoute","useStaticPages404","pg","_writebuildid","writeBuildId","optimizeCss","cssFilePaths","filePath","features","nextScriptWorkers","feature","SERVER_FILES_MANIFEST","copyTracedFiles","finalPrerenderRoutes","finalDynamicRoutes","tbdPrerenderRoutes","ssgNotFoundPaths","usedStaticStatusPages","hasPages500","useDefaultStatic500","combinedPages","isApp404Static","hasStaticApp404","staticGenerationSpan","detectConflictingPaths","exportApp","exportConfig","initialPageRevalidationMap","initialPageMetaMap","pageDurationMap","exportPathMap","defaultMap","query","__nextFallback","encodedRoutes","routeIdx","__nextSsgPath","_isDynamicError","_isAppDir","_isAppPrefetch","isFallback","locale","_defaultMap_page","__nextLocale","exportOptions","isInvokedFromCli","buildExport","threads","outdir","statusMessage","exportAppPageWorker","exportPage","bind","exportPageWorker","endWorker","postBuildSpinner","serverBundle","_require","getPagePath","_pageInfos_get","hasDynamicData","isRouteHandler","bypassFor","ACTION","normalizedRoute","dataRoute","posix","routeMeta","exportRouteMeta","status","initialStatus","exportHeaders","headerKeys","initialHeaders","isArray","experimentalBypassFor","dataRouteRegex","moveExportedPage","originPage","ext","additionalSsgFile","orig","relativeDest","slice","isNotFound","rename","curPath","localeExt","extname","relativeDestNoPages","updatedRelativeDest","updatedOrig","updatedDest","moveExportedAppNotFoundTo404","isStaticSsgFallback","hasAmp","durationInfo","hasHtmlOutput","ampPage","localePage","extraRoutes","pageFile","rm","force","close","analysisEnd","eventBuildOptimize","staticPageCount","staticPropsPageCount","serverPropsPageCount","ssrPageCount","hasStatic404","hasReportWebVitals","rewritesCount","headersCount","redirectsCount","headersWithHasCount","rewritesWithHasCount","redirectsWithHasCount","middlewareCount","telemetryPlugin","eventBuildFeatureUsage","eventPackageUsedInGetServerSideProps","tbdRoute","images","deviceSizes","imageSizes","sizes","remotePatterns","protocol","hostname","makeRe","port","IMAGES_MANIFEST","EXPORT_MARKER","hasExportPathMap","exportTrailingSlash","trailingSlash","EXPORT_DETAIL","envFile","_recursivecopy","recursiveCopy","overwrite","originalServerApp","existsSync","printTreeView","distPath","printCustomRoutes","analyticsId","green","_verifypartytownsetup","verifyPartytownSetup","pagesWorker","appWorker","options","lockfilePatchPromise","cur","flushAllTraces","teardownTraceSubscriber","teardownHeapProfiler","teardownCrashReporter"],"sources":["../../src/build/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}