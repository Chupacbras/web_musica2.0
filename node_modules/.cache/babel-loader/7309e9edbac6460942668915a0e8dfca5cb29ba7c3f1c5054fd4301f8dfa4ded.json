{"ast":null,"code":"#!/usr/bin/env node\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"nextStart\", {\n  enumerable: true,\n  get: function () {\n    return nextStart;\n  }\n});\nrequire(\"../server/lib/cpu-profile\");\nconst _startserver = require(\"../server/lib/start-server\");\nconst _utils = require(\"../server/lib/utils\");\nconst _getprojectdir = require(\"../lib/get-project-dir\");\nconst _getreservedport = require(\"../lib/helpers/get-reserved-port\");\nconst nextStart = async args => {\n  if (args[\"--help\"]) {\n    console.log(`\n      Description\n        Starts the application in production mode.\n        The application should be compiled with \\`next build\\` first.\n\n      Usage\n        $ next start <dir> -p <port>\n\n      <dir> represents the directory of the Next.js application.\n      If no directory is provided, the current directory will be used.\n\n      Options\n        --port, -p          A port number on which to start the application\n        --hostname, -H      Hostname on which to start the application (default: 0.0.0.0)\n        --keepAliveTimeout  Max milliseconds to wait before closing inactive connections\n        --help, -h          Displays this message\n    `);\n    process.exit(0);\n  }\n  const dir = (0, _getprojectdir.getProjectDir)(args._[0]);\n  const host = args[\"--hostname\"];\n  const port = (0, _utils.getPort)(args);\n  if ((0, _getreservedport.isPortIsReserved)(port)) {\n    (0, _utils.printAndExit)((0, _getreservedport.getReservedPortExplanation)(port), 1);\n  }\n  const isExperimentalTestProxy = args[\"--experimental-test-proxy\"];\n  const keepAliveTimeoutArg = args[\"--keepAliveTimeout\"];\n  if (typeof keepAliveTimeoutArg !== \"undefined\" && (Number.isNaN(keepAliveTimeoutArg) || !Number.isFinite(keepAliveTimeoutArg) || keepAliveTimeoutArg < 0)) {\n    (0, _utils.printAndExit)(`Invalid --keepAliveTimeout, expected a non negative number but received \"${keepAliveTimeoutArg}\"`, 1);\n  }\n  const keepAliveTimeout = keepAliveTimeoutArg ? Math.ceil(keepAliveTimeoutArg) : undefined;\n  await (0, _startserver.startServer)({\n    dir,\n    isDev: false,\n    isExperimentalTestProxy,\n    hostname: host,\n    port,\n    keepAliveTimeout\n  });\n};","map":{"version":3,"names":["nextStart","args","console","log","process","exit","dir","_getprojectdir","getProjectDir","_","host","port","_utils","getPort","_getreservedport","isPortIsReserved","printAndExit","getReservedPortExplanation","isExperimentalTestProxy","keepAliveTimeoutArg","Number","isNaN","isFinite","keepAliveTimeout","Math","ceil","undefined","_startserver","startServer","isDev","hostname"],"sources":["../../src/cli/next-start.ts"],"sourcesContent":[null],"mappings":";;;;;;+BAuES;;;WAAAA,SAAA;;;QArEF;6BACqB;uBACU;+BACR;iCAKvB;AAEP,MAAMA,SAAA,GAAwB,MAAOC,IAAA;EACnC,IAAIA,IAAI,CAAC,SAAS,EAAE;IAClBC,OAAA,CAAQC,GAAG,CAAE;;;;;;;;;;;;;;;;KAgBZ;IACDC,OAAA,CAAQC,IAAI,CAAC;EACf;EAEA,MAAMC,GAAA,GAAM,IAAAC,cAAA,CAAAC,aAAa,EAACP,IAAA,CAAKQ,CAAC,CAAC,EAAE;EACnC,MAAMC,IAAA,GAAOT,IAAI,CAAC,aAAa;EAC/B,MAAMU,IAAA,GAAO,IAAAC,MAAA,CAAAC,OAAO,EAACZ,IAAA;EAErB,IAAI,IAAAa,gBAAA,CAAAC,gBAAgB,EAACJ,IAAA,GAAO;IAC1B,IAAAC,MAAA,CAAAI,YAAY,EAAC,IAAAF,gBAAA,CAAAG,0BAA0B,EAACN,IAAA,GAAO;EACjD;EAEA,MAAMO,uBAAA,GAA0BjB,IAAI,CAAC,4BAA4B;EAEjE,MAAMkB,mBAAA,GAA0ClB,IAAI,CAAC,qBAAqB;EAC1E,IACE,OAAOkB,mBAAA,KAAwB,gBAC9BC,MAAA,CAAOC,KAAK,CAACF,mBAAA,KACZ,CAACC,MAAA,CAAOE,QAAQ,CAACH,mBAAA,KACjBA,mBAAA,GAAsB,IACxB;IACA,IAAAP,MAAA,CAAAI,YAAY,EACT,4EAA2EG,mBAAoB,GAAE,EAClG;EAEJ;EAEA,MAAMI,gBAAA,GAAmBJ,mBAAA,GACrBK,IAAA,CAAKC,IAAI,CAACN,mBAAA,IACVO,SAAA;EAEJ,MAAM,IAAAC,YAAA,CAAAC,WAAW,EAAC;IAChBtB,GAAA;IACAuB,KAAA,EAAO;IACPX,uBAAA;IACAY,QAAA,EAAUpB,IAAA;IACVC,IAAA;IACAY;EACF;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}