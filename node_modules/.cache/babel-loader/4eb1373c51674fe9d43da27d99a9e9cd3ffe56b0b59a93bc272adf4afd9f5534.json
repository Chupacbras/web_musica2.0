{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _default;\n  }\n});\nconst _postcssvalueparser = /*#__PURE__*/_interop_require_default(require(\"next/dist/compiled/postcss-value-parser\"));\nconst _utils = require(\"../utils\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst isUrlFunc = /url/i;\nconst isImageSetFunc = /^(?:-webkit-)?image-set$/i;\nconst needParseDeclaration = /(?:url|(?:-webkit-)?image-set)\\(/i;\nfunction getNodeFromUrlFunc(node) {\n  return node.nodes && node.nodes[0];\n}\nfunction getWebpackIgnoreCommentValue(index, nodes, inBetween) {\n  if (index === 0 && typeof inBetween !== \"undefined\") {\n    return inBetween;\n  }\n  let prevValueNode = nodes[index - 1];\n  if (!prevValueNode) {\n    // eslint-disable-next-line consistent-return\n    return;\n  }\n  if (prevValueNode.type === \"space\") {\n    if (!nodes[index - 2]) {\n      // eslint-disable-next-line consistent-return\n      return;\n    }\n    prevValueNode = nodes[index - 2];\n  }\n  if (prevValueNode.type !== \"comment\") {\n    // eslint-disable-next-line consistent-return\n    return;\n  }\n  const matched = prevValueNode.value.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n  return matched && matched[2] === \"true\";\n}\nfunction shouldHandleURL(url, declaration, result, isSupportDataURLInNewURL) {\n  if (url.length === 0) {\n    result.warn(`Unable to find uri in '${declaration.toString()}'`, {\n      node: declaration\n    });\n    return false;\n  }\n  if ((0, _utils.isDataUrl)(url) && isSupportDataURLInNewURL) {\n    try {\n      decodeURIComponent(url);\n    } catch (ignoreError) {\n      return false;\n    }\n    return true;\n  }\n  if (!(0, _utils.isUrlRequestable)(url)) {\n    return false;\n  }\n  return true;\n}\nfunction parseDeclaration(declaration, key, result, isSupportDataURLInNewURL) {\n  if (!needParseDeclaration.test(declaration[key])) {\n    return;\n  }\n  const parsed = (0, _postcssvalueparser.default)(declaration.raws && declaration.raws.value && declaration.raws.value.raw ? declaration.raws.value.raw : declaration[key]);\n  let inBetween;\n  if (declaration.raws && declaration.raws.between) {\n    const lastCommentIndex = declaration.raws.between.lastIndexOf(\"/*\");\n    const matched = declaration.raws.between.slice(lastCommentIndex).match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n    if (matched) {\n      inBetween = matched[2] === \"true\";\n    }\n  }\n  let isIgnoreOnDeclaration = false;\n  const prevNode = declaration.prev();\n  if (prevNode && prevNode.type === \"comment\") {\n    const matched = prevNode.text.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n    if (matched) {\n      isIgnoreOnDeclaration = matched[2] === \"true\";\n    }\n  }\n  let needIgnore;\n  const parsedURLs = [];\n  parsed.walk((valueNode, index, valueNodes) => {\n    if (valueNode.type !== \"function\") {\n      return;\n    }\n    if (isUrlFunc.test(valueNode.value)) {\n      needIgnore = getWebpackIgnoreCommentValue(index, valueNodes, inBetween);\n      if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n        if (needIgnore) {\n          // eslint-disable-next-line no-undefined\n          needIgnore = undefined;\n        }\n        return;\n      }\n      const {\n        nodes\n      } = valueNode;\n      const isStringValue = nodes.length !== 0 && nodes[0].type === \"string\";\n      let url = isStringValue ? nodes[0].value : _postcssvalueparser.default.stringify(nodes);\n      url = (0, _utils.normalizeUrl)(url, isStringValue);\n      // Do not traverse inside `url`\n      if (!shouldHandleURL(url, declaration, result, isSupportDataURLInNewURL)) {\n        // eslint-disable-next-line consistent-return\n        return false;\n      }\n      const queryParts = url.split(\"!\");\n      let prefix;\n      if (queryParts.length > 1) {\n        url = queryParts.pop();\n        prefix = queryParts.join(\"!\");\n      }\n      parsedURLs.push({\n        declaration,\n        parsed,\n        node: getNodeFromUrlFunc(valueNode),\n        prefix,\n        url,\n        needQuotes: false\n      });\n      // eslint-disable-next-line consistent-return\n      return false;\n    } else if (isImageSetFunc.test(valueNode.value)) {\n      for (const [innerIndex, nNode] of valueNode.nodes.entries()) {\n        const {\n          type,\n          value\n        } = nNode;\n        if (type === \"function\" && isUrlFunc.test(value)) {\n          needIgnore = getWebpackIgnoreCommentValue(innerIndex, valueNode.nodes);\n          if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n            if (needIgnore) {\n              // eslint-disable-next-line no-undefined\n              needIgnore = undefined;\n            }\n            continue;\n          }\n          const {\n            nodes\n          } = nNode;\n          const isStringValue = nodes.length !== 0 && nodes[0].type === \"string\";\n          let url = isStringValue ? nodes[0].value : _postcssvalueparser.default.stringify(nodes);\n          url = (0, _utils.normalizeUrl)(url, isStringValue);\n          // Do not traverse inside `url`\n          if (!shouldHandleURL(url, declaration, result, isSupportDataURLInNewURL)) {\n            // eslint-disable-next-line consistent-return\n            return false;\n          }\n          const queryParts = url.split(\"!\");\n          let prefix;\n          if (queryParts.length > 1) {\n            url = queryParts.pop();\n            prefix = queryParts.join(\"!\");\n          }\n          parsedURLs.push({\n            declaration,\n            parsed,\n            node: getNodeFromUrlFunc(nNode),\n            prefix,\n            url,\n            needQuotes: false\n          });\n        } else if (type === \"string\") {\n          needIgnore = getWebpackIgnoreCommentValue(innerIndex, valueNode.nodes);\n          if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n            if (needIgnore) {\n              // eslint-disable-next-line no-undefined\n              needIgnore = undefined;\n            }\n            continue;\n          }\n          let url = (0, _utils.normalizeUrl)(value, true);\n          // Do not traverse inside `url`\n          if (!shouldHandleURL(url, declaration, result, isSupportDataURLInNewURL)) {\n            // eslint-disable-next-line consistent-return\n            return false;\n          }\n          const queryParts = url.split(\"!\");\n          let prefix;\n          if (queryParts.length > 1) {\n            url = queryParts.pop();\n            prefix = queryParts.join(\"!\");\n          }\n          parsedURLs.push({\n            declaration,\n            parsed,\n            node: nNode,\n            prefix,\n            url,\n            needQuotes: true\n          });\n        }\n      }\n      // Do not traverse inside `image-set`\n      // eslint-disable-next-line consistent-return\n      return false;\n    }\n  });\n  // eslint-disable-next-line consistent-return\n  return parsedURLs;\n}\nconst plugin = (options = {}) => {\n  return {\n    postcssPlugin: \"postcss-url-parser\",\n    prepare(result) {\n      const parsedDeclarations = [];\n      return {\n        Declaration(declaration) {\n          const {\n            isSupportDataURLInNewURL\n          } = options;\n          const parsedURL = parseDeclaration(declaration, \"value\", result, isSupportDataURLInNewURL);\n          if (!parsedURL) {\n            return;\n          }\n          parsedDeclarations.push(...parsedURL);\n        },\n        async OnceExit() {\n          if (parsedDeclarations.length === 0) {\n            return;\n          }\n          const resolvedDeclarations = await Promise.all(parsedDeclarations.map(async parsedDeclaration => {\n            const {\n              url\n            } = parsedDeclaration;\n            if (options.filter) {\n              const needKeep = await options.filter(url);\n              if (!needKeep) {\n                // eslint-disable-next-line consistent-return\n                return;\n              }\n            }\n            if ((0, _utils.isDataUrl)(url)) {\n              // eslint-disable-next-line consistent-return\n              return parsedDeclaration;\n            }\n            const splittedUrl = url.split(/(\\?)?#/);\n            const [pathname, query, hashOrQuery] = splittedUrl;\n            let hash = query ? \"?\" : \"\";\n            hash += hashOrQuery ? `#${hashOrQuery}` : \"\";\n            const {\n              needToResolveURL,\n              rootContext\n            } = options;\n            const request = (0, _utils.requestify)(pathname, rootContext,\n            // @ts-expect-error TODO: only 2 arguments allowed.\n            needToResolveURL);\n            if (!needToResolveURL) {\n              // eslint-disable-next-line consistent-return\n              return {\n                ...parsedDeclaration,\n                url: request,\n                hash\n              };\n            }\n            const {\n              resolver,\n              context\n            } = options;\n            const resolvedUrl = await (0, _utils.resolveRequests)(resolver, context, [...new Set([request, url])]);\n            if (!resolvedUrl) {\n              // eslint-disable-next-line consistent-return\n              return;\n            }\n            // eslint-disable-next-line consistent-return\n            return {\n              ...parsedDeclaration,\n              url: resolvedUrl,\n              hash\n            };\n          }));\n          const urlToNameMap = new Map();\n          const urlToReplacementMap = new Map();\n          let hasUrlImportHelper = false;\n          for (let index = 0; index <= resolvedDeclarations.length - 1; index++) {\n            const item = resolvedDeclarations[index];\n            if (!item) {\n              continue;\n            }\n            if (!hasUrlImportHelper) {\n              options.imports.push({\n                type: \"get_url_import\",\n                importName: \"___CSS_LOADER_GET_URL_IMPORT___\",\n                url: options.urlHandler(require.resolve(\"../runtime/getUrl.js\")),\n                index: -1\n              });\n              hasUrlImportHelper = true;\n            }\n            const {\n              url,\n              prefix\n            } = item;\n            const newUrl = prefix ? `${prefix}!${url}` : url;\n            let importName = urlToNameMap.get(newUrl);\n            if (!importName) {\n              importName = `___CSS_LOADER_URL_IMPORT_${urlToNameMap.size}___`;\n              urlToNameMap.set(newUrl, importName);\n              options.imports.push({\n                type: \"url\",\n                importName,\n                url: options.needToResolveURL ? options.urlHandler(newUrl) : JSON.stringify(newUrl),\n                index\n              });\n            }\n            const {\n              hash,\n              needQuotes\n            } = item;\n            const replacementKey = JSON.stringify({\n              newUrl,\n              hash,\n              needQuotes\n            });\n            let replacementName = urlToReplacementMap.get(replacementKey);\n            if (!replacementName) {\n              replacementName = `___CSS_LOADER_URL_REPLACEMENT_${urlToReplacementMap.size}___`;\n              urlToReplacementMap.set(replacementKey, replacementName);\n              options.replacements.push({\n                replacementName,\n                importName,\n                hash,\n                needQuotes\n              });\n            }\n            // eslint-disable-next-line no-param-reassign\n            item.node.type = \"word\";\n            // eslint-disable-next-line no-param-reassign\n            item.node.value = replacementName;\n            // eslint-disable-next-line no-param-reassign\n            item.declaration.value = item.parsed.toString();\n          }\n        }\n      };\n    }\n  };\n};\nplugin.postcss = true;\nconst _default = plugin;","map":{"version":3,"names":["_default","isUrlFunc","isImageSetFunc","needParseDeclaration","getNodeFromUrlFunc","node","nodes","getWebpackIgnoreCommentValue","index","inBetween","prevValueNode","type","matched","value","match","_utils","WEBPACK_IGNORE_COMMENT_REGEXP","shouldHandleURL","url","declaration","result","isSupportDataURLInNewURL","length","warn","toString","isDataUrl","decodeURIComponent","ignoreError","isUrlRequestable","parseDeclaration","key","test","parsed","_postcssvalueparser","default","raws","raw","between","lastCommentIndex","lastIndexOf","slice","isIgnoreOnDeclaration","prevNode","prev","text","needIgnore","parsedURLs","walk","valueNode","valueNodes","undefined","isStringValue","stringify","normalizeUrl","queryParts","split","prefix","pop","join","push","needQuotes","innerIndex","nNode","entries","plugin","options","postcssPlugin","prepare","parsedDeclarations","Declaration","parsedURL","OnceExit","resolvedDeclarations","Promise","all","map","parsedDeclaration","filter","needKeep","splittedUrl","pathname","query","hashOrQuery","hash","needToResolveURL","rootContext","request","requestify","resolver","context","resolvedUrl","resolveRequests","Set","urlToNameMap","Map","urlToReplacementMap","hasUrlImportHelper","item","imports","importName","urlHandler","require","resolve","newUrl","get","size","set","JSON","replacementKey","replacementName","replacements","postcss"],"sources":["../../../../../../../src/build/webpack/loaders/css-loader/src/plugins/postcss-url-parser.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}