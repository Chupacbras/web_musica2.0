{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports,\n/**\n* **PostCSS Loader**\n*\n* Loads && processes CSS with [PostCSS](https://github.com/postcss/postcss)\n*/\n\"default\", {\n  enumerable: true,\n  get: function () {\n    return loader;\n  }\n});\nconst _Warning = /*#__PURE__*/_interop_require_default(require(\"./Warning\"));\nconst _Error = /*#__PURE__*/_interop_require_default(require(\"./Error\"));\nconst _utils = require(\"./utils\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nasync function loader( /** Source */content, /** Source Map */sourceMap, meta) {\n  const loaderSpan = this.currentTraceSpan.traceChild(\"postcss-loader\");\n  const callback = this.async();\n  loaderSpan.traceAsyncFn(async () => {\n    const options = this.getOptions();\n    const file = this.resourcePath;\n    const useSourceMap = typeof options.sourceMap !== \"undefined\" ? options.sourceMap : this.sourceMap;\n    const processOptions = {\n      from: file,\n      to: file\n    };\n    if (useSourceMap) {\n      processOptions.map = {\n        inline: false,\n        annotation: false,\n        ...processOptions.map\n      };\n    }\n    if (sourceMap && processOptions.map) {\n      processOptions.map.prev = loaderSpan.traceChild(\"normalize-source-map\").traceFn(() => (0, _utils.normalizeSourceMap)(sourceMap, this.context));\n    }\n    let root;\n    // Reuse PostCSS AST from other loaders\n    if (meta && meta.ast && meta.ast.type === \"postcss\") {\n      ({\n        root\n      } = meta.ast);\n      loaderSpan.setAttribute(\"astUsed\", \"true\");\n    }\n    // Initializes postcss with plugins\n    const {\n      postcssWithPlugins\n    } = await options.postcss();\n    let result;\n    try {\n      result = await loaderSpan.traceChild(\"postcss-process\").traceAsyncFn(() => postcssWithPlugins.process(root || content, processOptions));\n    } catch (error) {\n      if (error.file) {\n        this.addDependency(error.file);\n      }\n      if (error.name === \"CssSyntaxError\") {\n        throw new _Error.default(error);\n      }\n      throw error;\n    }\n    for (const warning of result.warnings()) {\n      this.emitWarning(new _Warning.default(warning));\n    }\n    for (const message of result.messages) {\n      // eslint-disable-next-line default-case\n      switch (message.type) {\n        case \"dependency\":\n          this.addDependency(message.file);\n          break;\n        case \"build-dependency\":\n          this.addBuildDependency(message.file);\n          break;\n        case \"missing-dependency\":\n          this.addMissingDependency(message.file);\n          break;\n        case \"context-dependency\":\n          this.addContextDependency(message.file);\n          break;\n        case \"dir-dependency\":\n          this.addContextDependency(message.dir);\n          break;\n        case \"asset\":\n          if (message.content && message.file) {\n            this.emitFile(message.file, message.content, message.sourceMap, message.info);\n          }\n      }\n    }\n    // eslint-disable-next-line no-undefined\n    let map = result.map ? result.map.toJSON() : undefined;\n    if (map && useSourceMap) {\n      map = (0, _utils.normalizeSourceMapAfterPostcss)(map, this.context);\n    }\n    const ast = {\n      type: \"postcss\",\n      version: result.processor.version,\n      root: result.root\n    };\n    return [result.css, map, {\n      ast\n    }];\n  }).then(([css, map, {\n    ast\n  }]) => {\n    callback == null ? void 0 : callback(null, css, map, {\n      ast\n    });\n  }, err => {\n    callback == null ? void 0 : callback(err);\n  });\n}","map":{"version":3,"names":["loader","content","sourceMap","meta","loaderSpan","currentTraceSpan","traceChild","callback","async","traceAsyncFn","options","getOptions","file","resourcePath","useSourceMap","processOptions","from","to","map","inline","annotation","prev","traceFn","_utils","normalizeSourceMap","context","root","ast","type","setAttribute","postcssWithPlugins","postcss","result","process","error","addDependency","name","_Error","default","warning","warnings","emitWarning","_Warning","message","messages","addBuildDependency","addMissingDependency","addContextDependency","dir","emitFile","info","toJSON","undefined","normalizeSourceMapAfterPostcss","version","processor","css","then","err"],"sources":["../../../../../../src/build/webpack/loaders/postcss-loader/src/index.ts"],"sourcesContent":[null],"mappings":";;;;;;AAIA;;;;;AAKA;;;WAA8BA,MAAA;;;+DATV;6DACI;uBAC2C;;;;;;AAOpD,eAAeA,OAAA,CAE5B,aACAC,OAAe,EACf,iBACAC,SAAc,EACdC,IAAS;EAET,MAAMC,UAAA,GAAa,IAAI,CAACC,gBAAgB,CAACC,UAAU,CAAC;EACpD,MAAMC,QAAA,GAAW,IAAI,CAACC,KAAK;EAE3BJ,UAAA,CACGK,YAAY,CAAC;IACZ,MAAMC,OAAA,GAAU,IAAI,CAACC,UAAU;IAC/B,MAAMC,IAAA,GAAO,IAAI,CAACC,YAAY;IAE9B,MAAMC,YAAA,GACJ,OAAOJ,OAAA,CAAQR,SAAS,KAAK,cACzBQ,OAAA,CAAQR,SAAS,GACjB,IAAI,CAACA,SAAS;IAEpB,MAAMa,cAAA,GAAsB;MAC1BC,IAAA,EAAMJ,IAAA;MACNK,EAAA,EAAIL;IACN;IAEA,IAAIE,YAAA,EAAc;MAChBC,cAAA,CAAeG,GAAG,GAAG;QACnBC,MAAA,EAAQ;QACRC,UAAA,EAAY;QACZ,GAAGL,cAAA,CAAeG;MACpB;IACF;IAEA,IAAIhB,SAAA,IAAaa,cAAA,CAAeG,GAAG,EAAE;MACnCH,cAAA,CAAeG,GAAG,CAACG,IAAI,GAAGjB,UAAA,CACvBE,UAAU,CAAC,wBACXgB,OAAO,CAAC,MAAM,IAAAC,MAAA,CAAAC,kBAAkB,EAACtB,SAAA,EAAW,IAAI,CAACuB,OAAO;IAC7D;IAEA,IAAIC,IAAA;IAEJ;IACA,IAAIvB,IAAA,IAAQA,IAAA,CAAKwB,GAAG,IAAIxB,IAAA,CAAKwB,GAAG,CAACC,IAAI,KAAK,WAAW;MACjD;QAAEF;MAAI,CAAE,GAAGvB,IAAA,CAAKwB,GAAG;MACrBvB,UAAA,CAAWyB,YAAY,CAAC,WAAW;IACrC;IAEA;IACA,MAAM;MAAEC;IAAkB,CAAE,GAAG,MAAMpB,OAAA,CAAQqB,OAAO;IAEpD,IAAIC,MAAA;IAEJ,IAAI;MACFA,MAAA,GAAS,MAAM5B,UAAA,CACZE,UAAU,CAAC,mBACXG,YAAY,CAAC,MACZqB,kBAAA,CAAmBG,OAAO,CAACP,IAAA,IAAQzB,OAAA,EAASc,cAAA;IAElD,EAAE,OAAOmB,KAAA,EAAY;MACnB,IAAIA,KAAA,CAAMtB,IAAI,EAAE;QACd,IAAI,CAACuB,aAAa,CAACD,KAAA,CAAMtB,IAAI;MAC/B;MAEA,IAAIsB,KAAA,CAAME,IAAI,KAAK,kBAAkB;QACnC,MAAM,IAAIC,MAAA,CAAAC,OAAW,CAACJ,KAAA;MACxB;MAEA,MAAMA,KAAA;IACR;IAEA,KAAK,MAAMK,OAAA,IAAWP,MAAA,CAAOQ,QAAQ,IAAI;MACvC,IAAI,CAACC,WAAW,CAAC,IAAIC,QAAA,CAAAJ,OAAO,CAACC,OAAA;IAC/B;IAEA,KAAK,MAAMI,OAAA,IAAWX,MAAA,CAAOY,QAAQ,EAAE;MACrC;MACA,QAAQD,OAAA,CAAQf,IAAI;QAClB,KAAK;UACH,IAAI,CAACO,aAAa,CAACQ,OAAA,CAAQ/B,IAAI;UAC/B;QACF,KAAK;UACH,IAAI,CAACiC,kBAAkB,CAACF,OAAA,CAAQ/B,IAAI;UACpC;QACF,KAAK;UACH,IAAI,CAACkC,oBAAoB,CAACH,OAAA,CAAQ/B,IAAI;UACtC;QACF,KAAK;UACH,IAAI,CAACmC,oBAAoB,CAACJ,OAAA,CAAQ/B,IAAI;UACtC;QACF,KAAK;UACH,IAAI,CAACmC,oBAAoB,CAACJ,OAAA,CAAQK,GAAG;UACrC;QACF,KAAK;UACH,IAAIL,OAAA,CAAQ1C,OAAO,IAAI0C,OAAA,CAAQ/B,IAAI,EAAE;YACnC,IAAI,CAACqC,QAAQ,CACXN,OAAA,CAAQ/B,IAAI,EACZ+B,OAAA,CAAQ1C,OAAO,EACf0C,OAAA,CAAQzC,SAAS,EACjByC,OAAA,CAAQO,IAAI;UAEhB;MACJ;IACF;IAEA;IACA,IAAIhC,GAAA,GAAMc,MAAA,CAAOd,GAAG,GAAGc,MAAA,CAAOd,GAAG,CAACiC,MAAM,KAAKC,SAAA;IAE7C,IAAIlC,GAAA,IAAOJ,YAAA,EAAc;MACvBI,GAAA,GAAM,IAAAK,MAAA,CAAA8B,8BAA8B,EAACnC,GAAA,EAAK,IAAI,CAACO,OAAO;IACxD;IAEA,MAAME,GAAA,GAAM;MACVC,IAAA,EAAM;MACN0B,OAAA,EAAStB,MAAA,CAAOuB,SAAS,CAACD,OAAO;MACjC5B,IAAA,EAAMM,MAAA,CAAON;IACf;IAEA,OAAO,CAACM,MAAA,CAAOwB,GAAG,EAAEtC,GAAA,EAAK;MAAES;IAAI,EAAE;EACnC,GACC8B,IAAI,CACH,CAAC,CAACD,GAAA,EAAKtC,GAAA,EAAK;IAAES;EAAG,CAAE,CAAM;IACvBpB,QAAA,oBAAAA,QAAA,CAAW,MAAMiD,GAAA,EAAKtC,GAAA,EAAK;MAAES;IAAI;EACnC,GACC+B,GAAA;IACCnD,QAAA,oBAAAA,QAAA,CAAWmD,GAAA;EACb;AAEN"},"metadata":{},"sourceType":"script","externalDependencies":[]}