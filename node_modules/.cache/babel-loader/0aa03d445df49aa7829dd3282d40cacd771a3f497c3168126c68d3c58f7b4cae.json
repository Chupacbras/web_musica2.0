{"ast":null,"code":"/*\nThe MIT License (MIT)\n\nCopyright (c) 2016 Ben Holloway\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return process;\n  }\n});\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nconst _fileprotocol = require(\"./file-protocol\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst ORPHAN_CR_REGEX = /\\r(?!\\n)(.|\\n)?/g;\nfunction process(postcss, sourceFile, sourceContent, params) {\n  // #107 libsass emits orphan CR not considered newline, postcss does consider newline (content vs source-map mismatch)\n  // prepend file protocol to all sources to avoid problems with source map\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  return postcss([postcss.plugin(\"postcss-resolve-url\", postcssPlugin)]).process(sourceContent, {\n    from: (0, _fileprotocol.prepend)(sourceFile),\n    map: params.outputSourceMap && {\n      prev: !!params.inputSourceMap && (0, _fileprotocol.prepend)(params.inputSourceMap),\n      inline: false,\n      annotation: false,\n      sourcesContent: true\n    }\n  }).then(result => ({\n    content: result.css,\n    map: params.outputSourceMap ? (0, _fileprotocol.remove)(result.map.toJSON()) : null\n  }));\n  /**\n  * Plugin for postcss that follows SASS transpilation.\n  */\n  function postcssPlugin() {\n    return function (styles) {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      styles.walkDecls(eachDeclaration);\n    };\n    /**\n    * Process a declaration from the syntax tree.\n    * @param declaration\n    */\n    function eachDeclaration(declaration) {\n      const isValid = declaration.value && declaration.value.indexOf(\"url\") >= 0;\n      if (isValid) {\n        // reverse the original source-map to find the original source file before transpilation\n        const startPosApparent = declaration.source.start,\n          startPosOriginal = params.sourceMapConsumer && params.sourceMapConsumer.originalPositionFor(startPosApparent);\n        // we require a valid directory for the specified file\n        const directory = startPosOriginal && startPosOriginal.source && (0, _fileprotocol.remove)(_path.default.dirname(startPosOriginal.source));\n        if (directory) {\n          declaration.value = params.transformDeclaration(declaration.value, directory);\n        } else if (params.sourceMapConsumer) {\n          throw new Error(\"source-map information is not available at url() declaration \" + (ORPHAN_CR_REGEX.test(sourceContent) ? \"(found orphan CR, try removeCR option)\" : \"(no orphan CR found)\"));\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["process","ORPHAN_CR_REGEX","postcss","sourceFile","sourceContent","params","plugin","postcssPlugin","from","_fileprotocol","prepend","map","outputSourceMap","prev","inputSourceMap","inline","annotation","sourcesContent","then","result","content","css","remove","toJSON","styles","walkDecls","eachDeclaration","declaration","isValid","value","indexOf","startPosApparent","source","start","startPosOriginal","sourceMapConsumer","originalPositionFor","directory","_path","default","dirname","transformDeclaration","Error","test"],"sources":["../../../../../../src/build/webpack/loaders/resolve-url-loader/lib/postcss.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;+BAOA;;;WAAwBA,OAAA;;;4DALP;8BACe;;;;;;AAEhC,MAAMC,eAAA,GAAkB;AAET,SAASD,QACtBE,OAAY,EACZC,UAAe,EACfC,aAAkB,EAClBC,MAAW;EAEX;EAEA;EACA;EACA,OAAOH,OAAA,CAAQ,CAACA,OAAA,CAAQI,MAAM,CAAC,uBAAuBC,aAAA,EAAe,EAClEP,OAAO,CAACI,aAAA,EAAe;IACtBI,IAAA,EAAM,IAAAC,aAAA,CAAAC,OAAO,EAACP,UAAA;IACdQ,GAAA,EAAKN,MAAA,CAAOO,eAAe,IAAI;MAC7BC,IAAA,EAAM,CAAC,CAACR,MAAA,CAAOS,cAAc,IAAI,IAAAL,aAAA,CAAAC,OAAO,EAACL,MAAA,CAAOS,cAAc;MAC9DC,MAAA,EAAQ;MACRC,UAAA,EAAY;MACZC,cAAA,EAAgB;IAClB;EACF,GACCC,IAAI,CAAEC,MAAA,KAAiB;IACtBC,OAAA,EAASD,MAAA,CAAOE,GAAG;IACnBV,GAAA,EAAKN,MAAA,CAAOO,eAAe,GAAG,IAAAH,aAAA,CAAAa,MAAM,EAACH,MAAA,CAAOR,GAAG,CAACY,MAAM,MAAM;EAC9D;EAEF;;;EAGA,SAAShB,cAAA;IACP,OAAO,UAAUiB,MAAW;MAC1B;MACAA,MAAA,CAAOC,SAAS,CAACC,eAAA;IACnB;IAEA;;;;IAIA,SAASA,gBAAgBC,WAAgB;MACvC,MAAMC,OAAA,GAAUD,WAAA,CAAYE,KAAK,IAAIF,WAAA,CAAYE,KAAK,CAACC,OAAO,CAAC,UAAU;MACzE,IAAIF,OAAA,EAAS;QACX;QACA,MAAMG,gBAAA,GAAmBJ,WAAA,CAAYK,MAAM,CAACC,KAAK;UAC/CC,gBAAA,GACE7B,MAAA,CAAO8B,iBAAiB,IACxB9B,MAAA,CAAO8B,iBAAiB,CAACC,mBAAmB,CAACL,gBAAA;QAEjD;QACA,MAAMM,SAAA,GACJH,gBAAA,IACAA,gBAAA,CAAiBF,MAAM,IACvB,IAAAvB,aAAA,CAAAa,MAAM,EAACgB,KAAA,CAAAC,OAAI,CAACC,OAAO,CAACN,gBAAA,CAAiBF,MAAM;QAC7C,IAAIK,SAAA,EAAW;UACbV,WAAA,CAAYE,KAAK,GAAGxB,MAAA,CAAOoC,oBAAoB,CAC7Cd,WAAA,CAAYE,KAAK,EACjBQ,SAAA;QAEJ,OAEK,IAAIhC,MAAA,CAAO8B,iBAAiB,EAAE;UACjC,MAAM,IAAIO,KAAA,CACR,mEACGzC,eAAA,CAAgB0C,IAAI,CAACvC,aAAA,IAClB,2CACA,sBAAqB;QAE/B;MACF;IACF;EACF;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}