{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"getTypeScriptIntent\", {\n  enumerable: true,\n  get: function () {\n    return getTypeScriptIntent;\n  }\n});\nconst _fs = require(\"fs\");\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nconst _fileexists = require(\"../file-exists\");\nconst _recursivereaddir = require(\"../recursive-readdir\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nasync function getTypeScriptIntent(baseDir, intentDirs, tsconfigPath) {\n  const resolvedTsConfigPath = _path.default.join(baseDir, tsconfigPath);\n  // The integration turns on if we find a `tsconfig.json` in the user's\n  // project.\n  const hasTypeScriptConfiguration = await (0, _fileexists.fileExists)(resolvedTsConfigPath);\n  if (hasTypeScriptConfiguration) {\n    const content = await _fs.promises.readFile(resolvedTsConfigPath, {\n      encoding: \"utf8\"\n    }).then(txt => txt.trim(), () => null);\n    return {\n      firstTimeSetup: content === \"\" || content === \"{}\"\n    };\n  }\n  // Next.js also offers a friendly setup mode that bootstraps a TypeScript\n  // project for the user when we detect TypeScript files. So, we need to check\n  // the `pages/` directory for a TypeScript file.\n  // Checking all directories is too slow, so this is a happy medium.\n  const tsFilesRegex = /.*\\.(ts|tsx)$/;\n  const excludedRegex = /(node_modules|.*\\.d\\.ts$)/;\n  for (const dir of intentDirs) {\n    const typescriptFiles = await (0, _recursivereaddir.recursiveReadDir)(dir, {\n      pathnameFilter: name => tsFilesRegex.test(name),\n      ignoreFilter: name => excludedRegex.test(name)\n    });\n    if (typescriptFiles.length) {\n      return {\n        firstTimeSetup: true\n      };\n    }\n  }\n  return false;\n}","map":{"version":3,"names":["getTypeScriptIntent","baseDir","intentDirs","tsconfigPath","resolvedTsConfigPath","_path","default","join","hasTypeScriptConfiguration","_fileexists","fileExists","content","_fs","promises","readFile","encoding","then","txt","trim","firstTimeSetup","tsFilesRegex","excludedRegex","dir","typescriptFiles","_recursivereaddir","recursiveReadDir","pathnameFilter","name","test","ignoreFilter","length"],"sources":["../../../src/lib/typescript/getTypeScriptIntent.ts"],"sourcesContent":[null],"mappings":";;;;;+BAOsB;;;WAAAA,mBAAA;;;oBAPS;4DACd;4BACU;kCACM;;;;;;AAI1B,eAAeA,oBACpBC,OAAe,EACfC,UAAoB,EACpBC,YAAoB;EAEpB,MAAMC,oBAAA,GAAuBC,KAAA,CAAAC,OAAI,CAACC,IAAI,CAACN,OAAA,EAASE,YAAA;EAEhD;EACA;EACA,MAAMK,0BAAA,GAA6B,MAAM,IAAAC,WAAA,CAAAC,UAAU,EAACN,oBAAA;EACpD,IAAII,0BAAA,EAA4B;IAC9B,MAAMG,OAAA,GAAU,MAAMC,GAAA,CAAAC,QAAE,CACrBC,QAAQ,CAACV,oBAAA,EAAsB;MAAEW,QAAA,EAAU;IAAO,GAClDC,IAAI,CACFC,GAAA,IAAQA,GAAA,CAAIC,IAAI,IACjB,MAAM;IAEV,OAAO;MAAEC,cAAA,EAAgBR,OAAA,KAAY,MAAMA,OAAA,KAAY;IAAK;EAC9D;EAEA;EACA;EACA;EACA;EACA,MAAMS,YAAA,GAAe;EACrB,MAAMC,aAAA,GAAgB;EACtB,KAAK,MAAMC,GAAA,IAAOpB,UAAA,EAAY;IAC5B,MAAMqB,eAAA,GAAkB,MAAM,IAAAC,iBAAA,CAAAC,gBAAgB,EAACH,GAAA,EAAK;MAClDI,cAAA,EAAiBC,IAAA,IAASP,YAAA,CAAaQ,IAAI,CAACD,IAAA;MAC5CE,YAAA,EAAeF,IAAA,IAASN,aAAA,CAAcO,IAAI,CAACD,IAAA;IAC7C;IACA,IAAIJ,eAAA,CAAgBO,MAAM,EAAE;MAC1B,OAAO;QAAEX,cAAA,EAAgB;MAAK;IAChC;EACF;EAEA,OAAO;AACT"},"metadata":{},"sourceType":"script","externalDependencies":[]}